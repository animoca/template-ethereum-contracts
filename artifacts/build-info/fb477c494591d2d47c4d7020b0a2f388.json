{"id":"fb477c494591d2d47c4d7020b0a2f388","_format":"hh-sol-build-info-1","solcVersion":"0.8.21","solcLongVersion":"0.8.21+commit.d9974bed","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC-173 Contract Ownership Standard (events)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173Events {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 is IERC173Events {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) {\n            revert NotTargetContractOwner(targetContract, account);\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {InconsistentArrayLengths} from \"./../../CommonErrors.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != amounts.length) revert InconsistentArrayLengths();\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                accounts[i].sendValue(amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n            }\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721Events {\n    /// @notice Emitted when a token is transferred.\n    /// @param from The previous token owner.\n    /// @param to The new token owner.\n    /// @param tokenId The transferred token identifier.\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /// @notice Emitted when a single token approval is set.\n    /// @param owner The token owner.\n    /// @param approved The approved address.\n    /// @param tokenId The approved token identifier.\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /// @notice Emitted when an approval for all tokens is set or unset.\n    /// @param owner The tokens owner.\n    /// @param operator The approved address.\n    /// @param approved True when then approval is set, false when it is unset.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC721Events} from \"./../events/IERC721Events.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC721Events {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/mocks/MyContractMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {MyContract} from \"./../MyContract.sol\";\n\ncontract MyContractMock is MyContract {\n    constructor(address data, IForwarderRegistry forwarderRegistry) MyContract(data, forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"},"contracts/MyContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n\ncontract MyContract is TokenRecovery, ForwarderRegistryContext {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    address public myData;\n\n    event DataSet(address data);\n\n    error InvalidZeroData();\n\n    constructor(address data, IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\n        if (data == address(0)) revert InvalidZeroData();\n        myData = data;\n        emit DataSet(data);\n    }\n\n    function setData(address data) external {\n        if (data == address(0)) revert InvalidZeroData();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        myData = data;\n        emit DataSet(data);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7]},"id":8,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"}],"src":"32:253:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[40],"ContractOwnershipBase":[88],"ContractOwnershipStorage":[380],"InterfaceDetection":[410]},"id":41,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":9,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":11,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":41,"sourceUnit":381,"src":"58:82:1","symbolAliases":[{"foreign":{"id":10,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"66:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":13,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":41,"sourceUnit":89,"src":"141:71:1","symbolAliases":[{"foreign":{"id":12,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":88,"src":"149:21:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":15,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":41,"sourceUnit":411,"src":"213:77:1","symbolAliases":[{"foreign":{"id":14,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"221:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":17,"name":"ContractOwnershipBase","nameLocations":["549:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":88,"src":"549:21:1"},"id":18,"nodeType":"InheritanceSpecifier","src":"549:21:1"},{"baseName":{"id":19,"name":"InterfaceDetection","nameLocations":["572:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":410,"src":"572:18:1"},"id":20,"nodeType":"InheritanceSpecifier","src":"572:18:1"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":16,"nodeType":"StructuredDocumentation","src":"292:218:1","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":40,"linearizedBaseContracts":[40,410,427,88,2007,133,113],"name":"ContractOwnership","nameLocation":"528:17:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":24,"libraryName":{"id":21,"name":"ContractOwnershipStorage","nameLocations":["603:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"603:24:1"},"nodeType":"UsingForDirective","src":"597:67:1","typeName":{"id":23,"nodeType":"UserDefinedTypeName","pathNode":{"id":22,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:1","657:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"632:31:1"},"referencedDeclaration":157,"src":"632:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":38,"nodeType":"Block","src":"998:80:1","statements":[{"expression":{"arguments":[{"id":35,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"1058:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":30,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1008:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$380_$","typeString":"type(library ContractOwnershipStorage)"}},"id":32,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":379,"src":"1008:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":33,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":34,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:1","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":229,"src":"1008:49:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":37,"nodeType":"ExpressionStatement","src":"1008:63:1"}]},"documentation":{"id":25,"nodeType":"StructuredDocumentation","src":"670:289:1","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":39,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[{"constant":false,"id":27,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:1","nodeType":"VariableDeclaration","scope":39,"src":"976:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":26,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:1"},"returnParameters":{"id":29,"nodeType":"ParameterList","parameters":[],"src":"998:0:1"},"scope":40,"src":"964:114:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":41,"src":"510:570:1","usedErrors":[95,415],"usedEvents":[112]}],"src":"32:1049:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[2007],"ContractOwnershipBase":[88],"ContractOwnershipStorage":[380],"IERC173":[133]},"id":89,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":42,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":44,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":89,"sourceUnit":134,"src":"58:52:2","symbolAliases":[{"foreign":{"id":43,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"66:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":46,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":89,"sourceUnit":381,"src":"111:85:2","symbolAliases":[{"foreign":{"id":45,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"119:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":48,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":89,"sourceUnit":2008,"src":"197:66:2","symbolAliases":[{"foreign":{"id":47,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"205:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":50,"name":"IERC173","nameLocations":["586:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":133,"src":"586:7:2"},"id":51,"nodeType":"InheritanceSpecifier","src":"586:7:2"},{"baseName":{"id":52,"name":"Context","nameLocations":["595:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2007,"src":"595:7:2"},"id":53,"nodeType":"InheritanceSpecifier","src":"595:7:2"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":49,"nodeType":"StructuredDocumentation","src":"265:278:2","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":88,"linearizedBaseContracts":[88,2007,133,113],"name":"ContractOwnershipBase","nameLocation":"561:21:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":57,"libraryName":{"id":54,"name":"ContractOwnershipStorage","nameLocations":["615:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"615:24:2"},"nodeType":"UsingForDirective","src":"609:67:2","typeName":{"id":56,"nodeType":"UserDefinedTypeName","pathNode":{"id":55,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:2","669:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"644:31:2"},"referencedDeclaration":157,"src":"644:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[132],"body":{"id":69,"nodeType":"Block","src":"765:65:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":63,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"782:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$380_$","typeString":"type(library ContractOwnershipStorage)"}},"id":64,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":379,"src":"782:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":66,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:2","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":308,"src":"782:39:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":62,"id":68,"nodeType":"Return","src":"775:48:2"}]},"documentation":{"id":58,"nodeType":"StructuredDocumentation","src":"682:23:2","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":70,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:2","nodeType":"FunctionDefinition","parameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"724:2:2"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[{"constant":false,"id":61,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":70,"src":"756:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":60,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:2"},"scope":88,"src":"710:120:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[126],"body":{"id":86,"nodeType":"Block","src":"924:92:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":81,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"986:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":83,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"1000:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":76,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"934:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$380_$","typeString":"type(library ContractOwnershipStorage)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":379,"src":"934:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":79,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":80,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:2","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":295,"src":"934:51:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"934:75:2"}]},"documentation":{"id":71,"nodeType":"StructuredDocumentation","src":"836:23:2","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":87,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:2","nodeType":"FunctionDefinition","parameters":{"id":74,"nodeType":"ParameterList","parameters":[{"constant":false,"id":73,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:2","nodeType":"VariableDeclaration","scope":87,"src":"891:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":72,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:2"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"924:0:2"},"scope":88,"src":"864:152:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":89,"src":"543:475:2","usedErrors":[95],"usedEvents":[112]}],"src":"32:987:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[95],"NotTargetContractOwner":[102]},"id":103,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":90,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":91,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":95,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":94,"nodeType":"ParameterList","parameters":[{"constant":false,"id":93,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":95,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":96,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":102,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":98,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":102,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":100,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":102,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":99,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","exportedSymbols":{"IERC173Events":[113]},"id":114,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":104,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173Events","contractDependencies":[],"contractKind":"interface","documentation":{"id":105,"nodeType":"StructuredDocumentation","src":"58:179:4","text":"@title ERC-173 Contract Ownership Standard (events)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":true,"id":113,"linearizedBaseContracts":[113],"name":"IERC173Events","nameLocation":"247:13:4","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"267:162:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":112,"name":"OwnershipTransferred","nameLocation":"440:20:4","nodeType":"EventDefinition","parameters":{"id":111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"477:13:4","nodeType":"VariableDeclaration","scope":112,"src":"461:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"461:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":110,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"508:8:4","nodeType":"VariableDeclaration","scope":112,"src":"492:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":109,"name":"address","nodeType":"ElementaryTypeName","src":"492:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"460:57:4"},"src":"434:84:4"}],"scope":114,"src":"237:283:4","usedErrors":[],"usedEvents":[112]}],"src":"32:489:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[133],"IERC173Events":[113]},"id":134,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":115,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":134,"sourceUnit":114,"src":"58:60:5","symbolAliases":[{"foreign":{"id":116,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"66:13:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":119,"name":"IERC173Events","nameLocations":["323:13:5"],"nodeType":"IdentifierPath","referencedDeclaration":113,"src":"323:13:5"},"id":120,"nodeType":"InheritanceSpecifier","src":"323:13:5"}],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":118,"nodeType":"StructuredDocumentation","src":"120:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":133,"linearizedBaseContracts":[133,113],"name":"IERC173","nameLocation":"312:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":121,"nodeType":"StructuredDocumentation","src":"343:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":126,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"699:17:5","nodeType":"FunctionDefinition","parameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"newOwner","nameLocation":"725:8:5","nodeType":"VariableDeclaration","scope":126,"src":"717:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"716:18:5"},"returnParameters":{"id":125,"nodeType":"ParameterList","parameters":[],"src":"743:0:5"},"scope":133,"src":"690:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"750:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":132,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"880:5:5","nodeType":"FunctionDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"885:2:5"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"mutability":"mutable","name":"contractOwner","nameLocation":"919:13:5","nodeType":"VariableDeclaration","scope":132,"src":"911:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"910:23:5"},"scope":133,"src":"871:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":134,"src":"302:634:5","usedErrors":[],"usedEvents":[112]}],"src":"32:905:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"ContractOwnershipStorage":[380],"IERC173":[133],"IERC173Events":[113],"InterfaceDetectionStorage":[528],"NotContractOwner":[95],"NotTargetContractOwner":[102],"ProxyInitialization":[808]},"id":381,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":135,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":138,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":381,"sourceUnit":103,"src":"58:97:6","symbolAliases":[{"foreign":{"id":136,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":137,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":381,"sourceUnit":114,"src":"156:60:6","symbolAliases":[{"foreign":{"id":139,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"164:13:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":381,"sourceUnit":134,"src":"217:52:6","symbolAliases":[{"foreign":{"id":141,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"225:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":381,"sourceUnit":809,"src":"270:84:6","symbolAliases":[{"foreign":{"id":143,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"278:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":381,"sourceUnit":529,"src":"355:104:6","symbolAliases":[{"foreign":{"id":145,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"363:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":380,"linearizedBaseContracts":[380],"name":"ContractOwnershipStorage","nameLocation":"469:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":150,"libraryName":{"id":147,"name":"ContractOwnershipStorage","nameLocations":["506:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"506:24:6"},"nodeType":"UsingForDirective","src":"500:67:6","typeName":{"id":149,"nodeType":"UserDefinedTypeName","pathNode":{"id":148,"name":"ContractOwnershipStorage.Layout","nameLocations":["535:24:6","560:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"535:31:6"},"referencedDeclaration":157,"src":"535:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":154,"libraryName":{"id":151,"name":"InterfaceDetectionStorage","nameLocations":["578:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":528,"src":"578:25:6"},"nodeType":"UsingForDirective","src":"572:69:6","typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"InterfaceDetectionStorage.Layout","nameLocations":["608:25:6","634:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":438,"src":"608:32:6"},"referencedDeclaration":438,"src":"608:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":157,"members":[{"constant":false,"id":156,"mutability":"mutable","name":"contractOwner","nameLocation":"679:13:6","nodeType":"VariableDeclaration","scope":157,"src":"671:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"671:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"654:6:6","nodeType":"StructDefinition","scope":380,"src":"647:52:6","visibility":"public"},{"constant":true,"id":170,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"731:19:6","nodeType":"VariableDeclaration","scope":380,"src":"705:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"705:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"779:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"769:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"769:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"761:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"761:7:6","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"761:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"831:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"761:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"753:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"753:7:6","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":183,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"865:21:6","nodeType":"VariableDeclaration","scope":380,"src":"839:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"839:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"915:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"905:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"905:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"897:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"897:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"897:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"965:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"897:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"889:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"889:7:6","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"889:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":228,"nodeType":"Block","src":"1476:281:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1490:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1514:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1506:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1506:7:6","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1506:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1490:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":215,"nodeType":"IfStatement","src":"1486:166:6","trueBody":{"id":214,"nodeType":"Block","src":"1518:134:6","statements":[{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1532:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1534:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"1532:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":201,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1550:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1532:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":203,"nodeType":"ExpressionStatement","src":"1532:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1624:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":208,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":207,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:6","typeDescriptions":{}}},"id":210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":211,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1628:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":204,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"1581:13:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$113_$","typeString":"type(contract IERC173Events)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1595:20:6","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":112,"src":"1581:34:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":213,"nodeType":"EmitStatement","src":"1576:65:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":222,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"1723:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$133_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$133_$","typeString":"type(contract IERC173)"}],"id":221,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1718:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$133","typeString":"type(contract IERC173)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1732:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1718:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1745:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":216,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"1661:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$528_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1687:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":527,"src":"1661:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$438_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1696:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":481,"src":"1661:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$438_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$438_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":227,"nodeType":"ExpressionStatement","src":"1661:89:6"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"974:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":229,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1411:15:6","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"s","nameLocation":"1442:1:6","nodeType":"VariableDeclaration","scope":229,"src":"1427:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Layout","nameLocations":["1427:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1427:6:6"},"referencedDeclaration":157,"src":"1427:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"initialOwner","nameLocation":"1453:12:6","nodeType":"VariableDeclaration","scope":229,"src":"1445:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1445:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1426:40:6"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1476:0:6"},"scope":380,"src":"1402:355:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":251,"nodeType":"Block","src":"2422:112:6","statements":[{"expression":{"arguments":[{"id":241,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2461:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2484:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":238,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"2432:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$808_$","typeString":"type(library ProxyInitialization)"}},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2452:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":807,"src":"2432:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2432:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":244,"nodeType":"ExpressionStatement","src":"2432:54:6"},{"expression":{"arguments":[{"id":248,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2514:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":245,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2496:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":247,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2498:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":229,"src":"2496:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2496:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":250,"nodeType":"ExpressionStatement","src":"2496:31:6"}]},"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"1763:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":252,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2363:9:6","nodeType":"FunctionDefinition","parameters":{"id":236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"s","nameLocation":"2388:1:6","nodeType":"VariableDeclaration","scope":252,"src":"2373:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":232,"nodeType":"UserDefinedTypeName","pathNode":{"id":231,"name":"Layout","nameLocations":["2373:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2373:6:6"},"referencedDeclaration":157,"src":"2373:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":235,"mutability":"mutable","name":"initialOwner","nameLocation":"2399:12:6","nodeType":"VariableDeclaration","scope":252,"src":"2391:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2372:40:6"},"returnParameters":{"id":237,"nodeType":"ParameterList","parameters":[],"src":"2422:0:6"},"scope":380,"src":"2354:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":294,"nodeType":"Block","src":"2997:295:6","statements":[{"assignments":[264],"declarations":[{"constant":false,"id":264,"mutability":"mutable","name":"previousOwner","nameLocation":"3015:13:6","nodeType":"VariableDeclaration","scope":294,"src":"3007:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"3007:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":267,"initialValue":{"expression":{"id":265,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3031:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3033:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3031:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3007:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":268,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3060:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":269,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3070:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3060:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":275,"nodeType":"IfStatement","src":"3056:60:6","trueBody":{"errorCall":{"arguments":[{"id":272,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3109:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":271,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"3092:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3092:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":274,"nodeType":"RevertStatement","src":"3085:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":276,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3130:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":277,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"3147:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3130:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":293,"nodeType":"IfStatement","src":"3126:160:6","trueBody":{"id":292,"nodeType":"Block","src":"3157:129:6","statements":[{"expression":{"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":279,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3171:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3173:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3171:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":282,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"3189:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3171:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":284,"nodeType":"ExpressionStatement","src":"3171:26:6"},{"eventCall":{"arguments":[{"id":288,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3251:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":289,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"3266:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":285,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3216:13:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$113_$","typeString":"type(contract IERC173Events)"}},"id":287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3230:20:6","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":112,"src":"3216:34:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3216:59:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":291,"nodeType":"EmitStatement","src":"3211:64:6"}]}}]},"documentation":{"id":253,"nodeType":"StructuredDocumentation","src":"2540:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":295,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2918:17:6","nodeType":"FunctionDefinition","parameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"mutability":"mutable","name":"s","nameLocation":"2951:1:6","nodeType":"VariableDeclaration","scope":295,"src":"2936:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":255,"nodeType":"UserDefinedTypeName","pathNode":{"id":254,"name":"Layout","nameLocations":["2936:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2936:6:6"},"referencedDeclaration":157,"src":"2936:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"sender","nameLocation":"2962:6:6","nodeType":"VariableDeclaration","scope":295,"src":"2954:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"2954:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":260,"mutability":"mutable","name":"newOwner","nameLocation":"2978:8:6","nodeType":"VariableDeclaration","scope":295,"src":"2970:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":259,"name":"address","nodeType":"ElementaryTypeName","src":"2970:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2935:52:6"},"returnParameters":{"id":262,"nodeType":"ParameterList","parameters":[],"src":"2997:0:6"},"scope":380,"src":"2909:383:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":307,"nodeType":"Block","src":"3498:39:6","statements":[{"expression":{"expression":{"id":304,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":299,"src":"3515:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3517:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3515:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":303,"id":306,"nodeType":"Return","src":"3508:22:6"}]},"documentation":{"id":296,"nodeType":"StructuredDocumentation","src":"3298:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":308,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3428:5:6","nodeType":"FunctionDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"s","nameLocation":"3449:1:6","nodeType":"VariableDeclaration","scope":308,"src":"3434:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":298,"nodeType":"UserDefinedTypeName","pathNode":{"id":297,"name":"Layout","nameLocations":["3434:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3434:6:6"},"referencedDeclaration":157,"src":"3434:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3433:18:6"},"returnParameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"contractOwner","nameLocation":"3483:13:6","nodeType":"VariableDeclaration","scope":308,"src":"3475:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":301,"name":"address","nodeType":"ElementaryTypeName","src":"3475:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3474:23:6"},"scope":380,"src":"3419:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":326,"nodeType":"Block","src":"3933:66:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":319,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"3958:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":318,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":133,"src":"3950:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$133_$","typeString":"type(contract IERC173)"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3950:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$133","typeString":"contract IERC173"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3974:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":132,"src":"3950:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":322,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3950:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":323,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"3985:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3950:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":317,"id":325,"nodeType":"Return","src":"3943:49:6"}]},"documentation":{"id":309,"nodeType":"StructuredDocumentation","src":"3543:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":327,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3818:21:6","nodeType":"FunctionDefinition","parameters":{"id":314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"targetContract","nameLocation":"3848:14:6","nodeType":"VariableDeclaration","scope":327,"src":"3840:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":310,"name":"address","nodeType":"ElementaryTypeName","src":"3840:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":313,"mutability":"mutable","name":"account","nameLocation":"3872:7:6","nodeType":"VariableDeclaration","scope":327,"src":"3864:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":312,"name":"address","nodeType":"ElementaryTypeName","src":"3864:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3839:41:6"},"returnParameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"3909:22:6","nodeType":"VariableDeclaration","scope":327,"src":"3904:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":315,"name":"bool","nodeType":"ElementaryTypeName","src":"3904:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3903:29:6"},"scope":380,"src":"3809:190:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":345,"nodeType":"Block","src":"4270:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":336,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"4284:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":337,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"4295:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":338,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4297:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"4295:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4284:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":344,"nodeType":"IfStatement","src":"4280:64:6","trueBody":{"errorCall":{"arguments":[{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"4336:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":340,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4319:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4319:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":343,"nodeType":"RevertStatement","src":"4312:32:6"}}]},"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"4005:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":346,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4198:22:6","nodeType":"FunctionDefinition","parameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":331,"mutability":"mutable","name":"s","nameLocation":"4236:1:6","nodeType":"VariableDeclaration","scope":346,"src":"4221:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":330,"nodeType":"UserDefinedTypeName","pathNode":{"id":329,"name":"Layout","nameLocations":["4221:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4221:6:6"},"referencedDeclaration":157,"src":"4221:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":333,"mutability":"mutable","name":"account","nameLocation":"4247:7:6","nodeType":"VariableDeclaration","scope":346,"src":"4239:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"4239:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4220:35:6"},"returnParameters":{"id":335,"nodeType":"ParameterList","parameters":[],"src":"4270:0:6"},"scope":380,"src":"4189:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":366,"nodeType":"Block","src":"4711:148:6","statements":[{"condition":{"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4725:47:6","subExpression":{"arguments":[{"id":355,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"4748:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"4764:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":354,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"4726:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4726:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":365,"nodeType":"IfStatement","src":"4721:132:6","trueBody":{"id":364,"nodeType":"Block","src":"4774:79:6","statements":[{"errorCall":{"arguments":[{"id":360,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"4818:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"4834:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"4795:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4795:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":363,"nodeType":"RevertStatement","src":"4788:54:6"}]}}]},"documentation":{"id":347,"nodeType":"StructuredDocumentation","src":"4357:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":367,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4627:28:6","nodeType":"FunctionDefinition","parameters":{"id":352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"targetContract","nameLocation":"4664:14:6","nodeType":"VariableDeclaration","scope":367,"src":"4656:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"4656:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"account","nameLocation":"4688:7:6","nodeType":"VariableDeclaration","scope":367,"src":"4680:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":350,"name":"address","nodeType":"ElementaryTypeName","src":"4680:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4655:41:6"},"returnParameters":{"id":353,"nodeType":"ParameterList","parameters":[],"src":"4711:0:6"},"scope":380,"src":"4618:241:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":378,"nodeType":"Block","src":"4924:115:6","statements":[{"assignments":[374],"declarations":[{"constant":false,"id":374,"mutability":"mutable","name":"position","nameLocation":"4942:8:6","nodeType":"VariableDeclaration","scope":378,"src":"4934:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4934:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":376,"initialValue":{"id":375,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"4953:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4934:38:6"},{"AST":{"nativeSrc":"4991:42:6","nodeType":"YulBlock","src":"4991:42:6","statements":[{"nativeSrc":"5005:18:6","nodeType":"YulAssignment","src":"5005:18:6","value":{"name":"position","nativeSrc":"5015:8:6","nodeType":"YulIdentifier","src":"5015:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5005:6:6","nodeType":"YulIdentifier","src":"5005:6:6"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":374,"isOffset":false,"isSlot":false,"src":"5015:8:6","valueSize":1},{"declaration":371,"isOffset":false,"isSlot":true,"src":"5005:6:6","suffix":"slot","valueSize":1}],"id":377,"nodeType":"InlineAssembly","src":"4982:51:6"}]},"id":379,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4874:6:6","nodeType":"FunctionDefinition","parameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"4880:2:6"},"returnParameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":371,"mutability":"mutable","name":"s","nameLocation":"4921:1:6","nodeType":"VariableDeclaration","scope":379,"src":"4906:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":370,"nodeType":"UserDefinedTypeName","pathNode":{"id":369,"name":"Layout","nameLocations":["4906:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4906:6:6"},"referencedDeclaration":157,"src":"4906:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"4905:18:6"},"scope":380,"src":"4865:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":381,"src":"461:4580:6","usedErrors":[],"usedEvents":[]}],"src":"32:5010:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[427],"InterfaceDetection":[410],"InterfaceDetectionStorage":[528]},"id":411,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":382,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":384,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":411,"sourceUnit":428,"src":"58:49:7","symbolAliases":[{"foreign":{"id":383,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":386,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":411,"sourceUnit":529,"src":"108:84:7","symbolAliases":[{"foreign":{"id":385,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":388,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":427,"src":"425:7:7"},"id":389,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":387,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":410,"linearizedBaseContracts":[410,427],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":393,"libraryName":{"id":390,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":528,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":392,"nodeType":"UserDefinedTypeName","pathNode":{"id":391,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":438,"src":"475:32:7"},"referencedDeclaration":438,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[426],"body":{"id":408,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":405,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":396,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":401,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$528_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":527,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$438_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":515,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$438_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$438_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":400,"id":407,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":394,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":409,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":409,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":395,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":409,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":398,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":410,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":411,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[415]},"id":416,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":412,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":415,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":414,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[427]},"id":428,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":417,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":418,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":427,"linearizedBaseContracts":[427],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":426,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":426,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":420,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":426,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":423,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":427,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":428,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[427],"IllegalInterfaceId":[415],"InterfaceDetectionStorage":[528]},"id":529,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":429,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":431,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":529,"sourceUnit":416,"src":"58:76:10","symbolAliases":[{"foreign":{"id":430,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":433,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":529,"sourceUnit":428,"src":"135:52:10","symbolAliases":[{"foreign":{"id":432,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":528,"linearizedBaseContracts":[528],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":438,"members":[{"constant":false,"id":437,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":438,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":436,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":434,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":435,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":528,"src":"229:74:10","visibility":"public"},{"constant":true,"id":451,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":528,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":439,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":449,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":444,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":442,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":454,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":528,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":452,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":480,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":465,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":466,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":471,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":468,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":470,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":472,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":475,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":437,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":476,"indexExpression":{"id":474,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":460,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":477,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":479,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":455,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":481,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":463,"nodeType":"ParameterList","parameters":[{"constant":false,"id":458,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":481,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":457,"nodeType":"UserDefinedTypeName","pathNode":{"id":456,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":438,"src":"804:6:10"},"referencedDeclaration":438,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":460,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":481,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":459,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":481,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":461,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":464,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":528,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":492,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":493,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":498,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":497,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":491,"id":496,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":499,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":501,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":427,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$427_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$427_$","typeString":"type(contract IERC165)"}],"id":500,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$427","typeString":"type(contract IERC165)"}},"id":503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":508,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":507,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":491,"id":506,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":509,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":510,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":437,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":512,"indexExpression":{"id":511,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":491,"id":513,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":515,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":515,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":484,"nodeType":"UserDefinedTypeName","pathNode":{"id":483,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":438,"src":"1386:6:10"},"referencedDeclaration":438,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":515,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":486,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":490,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":515,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":489,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":528,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":526,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[522],"declarations":[{"constant":false,"id":522,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":526,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":524,"initialValue":{"id":523,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":522,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":519,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":525,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":527,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":516,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":527,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":518,"nodeType":"UserDefinedTypeName","pathNode":{"id":517,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":438,"src":"1746:6:10"},"referencedDeclaration":438,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$438_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":528,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":529,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[577],"ForwarderRegistryContextBase":[697],"IERC2771":[709],"IForwarderRegistry":[723]},"id":578,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":530,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":578,"sourceUnit":724,"src":"58:71:11","symbolAliases":[{"foreign":{"id":531,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":534,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":578,"sourceUnit":710,"src":"130:51:11","symbolAliases":[{"foreign":{"id":533,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"138:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":578,"sourceUnit":698,"src":"182:85:11","symbolAliases":[{"foreign":{"id":535,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"190:28:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":538,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":697,"src":"575:28:11"},"id":539,"nodeType":"InheritanceSpecifier","src":"575:28:11"},{"baseName":{"id":540,"name":"IERC2771","nameLocations":["605:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":709,"src":"605:8:11"},"id":541,"nodeType":"InheritanceSpecifier","src":"605:8:11"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":537,"nodeType":"StructuredDocumentation","src":"269:260:11","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":577,"linearizedBaseContracts":[577,709,697],"name":"ForwarderRegistryContext","nameLocation":"547:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":550,"nodeType":"Block","src":"720:2:11","statements":[]},"id":551,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":547,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"700:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}}],"id":548,"kind":"baseConstructorSpecifier","modifierName":{"id":546,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":697,"src":"671:28:11"},"nodeType":"ModifierInvocation","src":"671:48:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":544,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:11","nodeType":"VariableDeclaration","scope":551,"src":"632:37:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"},"typeName":{"id":543,"nodeType":"UserDefinedTypeName","pathNode":{"id":542,"name":"IForwarderRegistry","nameLocations":["632:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":723,"src":"632:18:11"},"referencedDeclaration":723,"src":"632:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:11"},"returnParameters":{"id":549,"nodeType":"ParameterList","parameters":[],"src":"720:0:11"},"scope":577,"src":"620:102:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":559,"nodeType":"Block","src":"800:43:11","statements":[{"expression":{"id":557,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"817:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":556,"id":558,"nodeType":"Return","src":"810:26:11"}]},"functionSelector":"2b4c9f16","id":560,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:11","nodeType":"FunctionDefinition","parameters":{"id":552,"nodeType":"ParameterList","parameters":[],"src":"754:2:11"},"returnParameters":{"id":556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":555,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":560,"src":"780:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"},"typeName":{"id":554,"nodeType":"UserDefinedTypeName","pathNode":{"id":553,"name":"IForwarderRegistry","nameLocations":["780:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":723,"src":"780:18:11"},"referencedDeclaration":723,"src":"780:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:11"},"scope":577,"src":"728:115:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[708],"body":{"id":575,"nodeType":"Block","src":"962:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":568,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"979:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":571,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"1000:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}],"id":570,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":569,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:11","typeDescriptions":{}}},"id":572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":567,"id":574,"nodeType":"Return","src":"972:48:11"}]},"documentation":{"id":561,"nodeType":"StructuredDocumentation","src":"849:24:11","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":576,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:11","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":563,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:11","nodeType":"VariableDeclaration","scope":576,"src":"906:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":562,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:11"},"returnParameters":{"id":567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":566,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":576,"src":"956:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":565,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:11"},"scope":577,"src":"878:149:11","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":578,"src":"529:500:11","usedErrors":[],"usedEvents":[]}],"src":"32:998:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[752],"ForwarderRegistryContextBase":[697],"IForwarderRegistry":[723]},"id":698,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":579,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":581,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":698,"sourceUnit":724,"src":"58:74:12","symbolAliases":[{"foreign":{"id":580,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":583,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":698,"sourceUnit":753,"src":"133:67:12","symbolAliases":[{"foreign":{"id":582,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"141:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":584,"nodeType":"StructuredDocumentation","src":"202:243:12","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":697,"linearizedBaseContracts":[697],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":587,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:12","nodeType":"VariableDeclaration","scope":697,"src":"498:57:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"},"typeName":{"id":586,"nodeType":"UserDefinedTypeName","pathNode":{"id":585,"name":"IForwarderRegistry","nameLocations":["498:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":723,"src":"498:18:12"},"referencedDeclaration":723,"src":"498:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":597,"nodeType":"Block","src":"612:56:12","statements":[{"expression":{"id":595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":593,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"622:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":594,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":590,"src":"644:17:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"src":"622:39:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"id":596,"nodeType":"ExpressionStatement","src":"622:39:12"}]},"id":598,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":590,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:12","nodeType":"VariableDeclaration","scope":598,"src":"574:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"},"typeName":{"id":589,"nodeType":"UserDefinedTypeName","pathNode":{"id":588,"name":"IForwarderRegistry","nameLocations":["574:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":723,"src":"574:18:12"},"referencedDeclaration":723,"src":"574:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:12"},"returnParameters":{"id":592,"nodeType":"ParameterList","parameters":[],"src":"612:0:12"},"scope":697,"src":"562:106:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":647,"nodeType":"Block","src":"846:683:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":604,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":606,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":609,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:12","memberName":"data","nodeType":"MemberAccess","src":"1074:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:12","memberName":"length","nodeType":"MemberAccess","src":"1074:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":619,"nodeType":"IfStatement","src":"1043:95:12","trueBody":{"id":618,"nodeType":"Block","src":"1096:42:12","statements":[{"expression":{"expression":{"id":615,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":603,"id":617,"nodeType":"Return","src":"1110:17:12"}]}},{"assignments":[621],"declarations":[{"constant":false,"id":621,"mutability":"mutable","name":"sender","nameLocation":"1156:6:12","nodeType":"VariableDeclaration","scope":647,"src":"1148:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":620,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":625,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":622,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"1165:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$752_$","typeString":"type(library ERC2771Calldata)"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":734,"src":"1165:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":626,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":630,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"1372:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}],"id":629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":628,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:12","typeDescriptions":{}}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":635,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"1436:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":636,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":633,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"1396:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"id":634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":722,"src":"1396:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":643,"nodeType":"IfStatement","src":"1346:149:12","trueBody":{"id":642,"nodeType":"Block","src":"1457:38:12","statements":[{"expression":{"id":640,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"1478:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":603,"id":641,"nodeType":"Return","src":"1471:13:12"}]}},{"expression":{"expression":{"id":644,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":603,"id":646,"nodeType":"Return","src":"1505:17:12"}]},"documentation":{"id":599,"nodeType":"StructuredDocumentation","src":"674:105:12","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":648,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:12","nodeType":"FunctionDefinition","parameters":{"id":600,"nodeType":"ParameterList","parameters":[],"src":"803:2:12"},"returnParameters":{"id":603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":602,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":648,"src":"837:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":601,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:12"},"scope":697,"src":"784:745:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":695,"nodeType":"Block","src":"1710:668:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":654,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":656,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":659,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:12","memberName":"data","nodeType":"MemberAccess","src":"1938:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:12","memberName":"length","nodeType":"MemberAccess","src":"1938:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":669,"nodeType":"IfStatement","src":"1907:93:12","trueBody":{"id":668,"nodeType":"Block","src":"1960:40:12","statements":[{"expression":{"expression":{"id":665,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:12","memberName":"data","nodeType":"MemberAccess","src":"1981:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":653,"id":667,"nodeType":"Return","src":"1974:15:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":670,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":674,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2183:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}],"id":673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:12","typeDescriptions":{}}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":679,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"2247:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$752_$","typeString":"type(library ERC2771Calldata)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":734,"src":"2247:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":682,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":677,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2207:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":722,"src":"2207:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":691,"nodeType":"IfStatement","src":"2157:189:12","trueBody":{"id":690,"nodeType":"Block","src":"2289:57:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":686,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"2310:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$752_$","typeString":"type(library ERC2771Calldata)"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:12","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":751,"src":"2310:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":653,"id":689,"nodeType":"Return","src":"2303:32:12"}]}},{"expression":{"expression":{"id":692,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:12","memberName":"data","nodeType":"MemberAccess","src":"2363:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":653,"id":694,"nodeType":"Return","src":"2356:15:12"}]},"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"1535:103:12","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":696,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:12","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[],"src":"1660:2:12"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":696,"src":"1694:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":651,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:12"},"scope":697,"src":"1643:735:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":698,"src":"445:1935:12","usedErrors":[],"usedEvents":[]}],"src":"32:2349:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[709]},"id":710,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":699,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":700,"nodeType":"StructuredDocumentation","src":"58:110:13","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":709,"linearizedBaseContracts":[709],"name":"IERC2771","nameLocation":"178:8:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":701,"nodeType":"StructuredDocumentation","src":"193:171:13","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":708,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:13","nodeType":"FunctionDefinition","parameters":{"id":704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":703,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:13","nodeType":"VariableDeclaration","scope":708,"src":"397:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":702,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:13"},"returnParameters":{"id":707,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:13","nodeType":"VariableDeclaration","scope":708,"src":"439:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":705,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:13"},"scope":709,"src":"369:86:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":710,"src":"168:289:13","usedErrors":[],"usedEvents":[]}],"src":"32:426:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[723]},"id":724,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":711,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"58:143:14","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":723,"linearizedBaseContracts":[723],"name":"IForwarderRegistry","nameLocation":"211:18:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":713,"nodeType":"StructuredDocumentation","src":"236:314:14","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":722,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:14","nodeType":"FunctionDefinition","parameters":{"id":718,"nodeType":"ParameterList","parameters":[{"constant":false,"id":715,"mutability":"mutable","name":"sender","nameLocation":"592:6:14","nodeType":"VariableDeclaration","scope":722,"src":"584:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":714,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":717,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:14","nodeType":"VariableDeclaration","scope":722,"src":"600:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":716,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:14"},"returnParameters":{"id":721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":720,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:14","nodeType":"VariableDeclaration","scope":722,"src":"642:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":719,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:14"},"scope":723,"src":"555:104:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":724,"src":"201:460:14","usedErrors":[],"usedEvents":[]}],"src":"32:630:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[752]},"id":753,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":725,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":726,"nodeType":"StructuredDocumentation","src":"58:144:15","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":752,"linearizedBaseContracts":[752],"name":"ERC2771Calldata","nameLocation":"210:15:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":733,"nodeType":"Block","src":"398:105:15","statements":[{"AST":{"nativeSrc":"417:80:15","nodeType":"YulBlock","src":"417:80:15","statements":[{"nativeSrc":"431:56:15","nodeType":"YulAssignment","src":"431:56:15","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:15","nodeType":"YulLiteral","src":"445:2:15","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:15","nodeType":"YulIdentifier","src":"466:12:15"},"nativeSrc":"466:14:15","nodeType":"YulFunctionCall","src":"466:14:15"},{"kind":"number","nativeSrc":"482:2:15","nodeType":"YulLiteral","src":"482:2:15","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:15","nodeType":"YulIdentifier","src":"462:3:15"},"nativeSrc":"462:23:15","nodeType":"YulFunctionCall","src":"462:23:15"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:15","nodeType":"YulIdentifier","src":"449:12:15"},"nativeSrc":"449:37:15","nodeType":"YulFunctionCall","src":"449:37:15"}],"functionName":{"name":"shr","nativeSrc":"441:3:15","nodeType":"YulIdentifier","src":"441:3:15"},"nativeSrc":"441:46:15","nodeType":"YulFunctionCall","src":"441:46:15"},"variableNames":[{"name":"sender","nativeSrc":"431:6:15","nodeType":"YulIdentifier","src":"431:6:15"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":730,"isOffset":false,"isSlot":false,"src":"431:6:15","valueSize":1}],"id":732,"nodeType":"InlineAssembly","src":"408:89:15"}]},"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"232:101:15","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":734,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:15","nodeType":"FunctionDefinition","parameters":{"id":728,"nodeType":"ParameterList","parameters":[],"src":"356:2:15"},"returnParameters":{"id":731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":730,"mutability":"mutable","name":"sender","nameLocation":"390:6:15","nodeType":"VariableDeclaration","scope":734,"src":"382:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:15"},"scope":752,"src":"338:165:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":750,"nodeType":"Block","src":"679:89:15","statements":[{"id":749,"nodeType":"UncheckedBlock","src":"689:73:15","statements":[{"expression":{"baseExpression":{"expression":{"id":740,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:15","memberName":"data","nodeType":"MemberAccess","src":"720:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":742,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:15","memberName":"data","nodeType":"MemberAccess","src":"730:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:15","memberName":"length","nodeType":"MemberAccess","src":"730:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":739,"id":748,"nodeType":"Return","src":"713:38:15"}]}]},"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"509:102:15","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":751,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:15","nodeType":"FunctionDefinition","parameters":{"id":736,"nodeType":"ParameterList","parameters":[],"src":"632:2:15"},"returnParameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"data","nameLocation":"673:4:15","nodeType":"VariableDeclaration","scope":751,"src":"658:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":737,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:15"},"scope":752,"src":"616:152:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":753,"src":"202:568:15","usedErrors":[],"usedEvents":[]}],"src":"32:739:15"},"id":15},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[761]},"id":762,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":754,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:16"},{"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"58:179:16","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":761,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:16","nodeType":"ErrorDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:16","nodeType":"VariableDeclaration","scope":761,"src":"277:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":759,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:16","nodeType":"VariableDeclaration","scope":761,"src":"299:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":758,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:16"},"src":"237:80:16"}],"src":"32:286:16"},"id":16},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[761],"ProxyInitialization":[808],"StorageSlot":[2117]},"id":809,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":763,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":765,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":809,"sourceUnit":762,"src":"58:92:17","symbolAliases":[{"foreign":{"id":764,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"66:33:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":767,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":809,"sourceUnit":2118,"src":"151:74:17","symbolAliases":[{"foreign":{"id":766,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"159:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"227:92:17","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":808,"linearizedBaseContracts":[808],"name":"ProxyInitialization","nameLocation":"327:19:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":806,"nodeType":"Block","src":"735:294:17","statements":[{"assignments":[780],"declarations":[{"constant":false,"id":780,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:17","nodeType":"VariableDeclaration","scope":806,"src":"745:46:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2022_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":779,"nodeType":"UserDefinedTypeName","pathNode":{"id":778,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:17","757:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":2022,"src":"745:23:17"},"referencedDeclaration":2022,"src":"745:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2022_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":785,"initialValue":{"arguments":[{"id":783,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":771,"src":"821:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":781,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2117,"src":"794:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2117_$","typeString":"type(library StorageSlot)"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:17","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2072,"src":"794:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2022_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2022_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:17"},{"assignments":[787],"declarations":[{"constant":false,"id":787,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:17","nodeType":"VariableDeclaration","scope":806,"src":"843:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":786,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":790,"initialValue":{"expression":{"id":788,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"866:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2022_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":789,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2021,"src":"866:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":791,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"900:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":792,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":799,"nodeType":"IfStatement","src":"896:88:17","trueBody":{"errorCall":{"arguments":[{"id":795,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"964:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":796,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":794,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":761,"src":"930:33:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":798,"nodeType":"RevertStatement","src":"923:61:17"}},{"expression":{"id":804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":800,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"994:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2022_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":802,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2021,"src":"994:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":803,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":773,"src":"1017:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":805,"nodeType":"ExpressionStatement","src":"994:28:17"}]},"documentation":{"id":769,"nodeType":"StructuredDocumentation","src":"353:314:17","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":807,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:17","nodeType":"FunctionDefinition","parameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":771,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:17","nodeType":"VariableDeclaration","scope":807,"src":"690:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":773,"mutability":"mutable","name":"phase","nameLocation":"719:5:17","nodeType":"VariableDeclaration","scope":807,"src":"711:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":772,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:17"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[],"src":"735:0:17"},"scope":808,"src":"672:357:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":809,"src":"319:712:17","usedErrors":[],"usedEvents":[]}],"src":"32:1000:17"},"id":17},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[40],"TokenRecovery":[820],"TokenRecoveryBase":[1041]},"id":821,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":810,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":812,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":821,"sourceUnit":1042,"src":"58:63:18","symbolAliases":[{"foreign":{"id":811,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"66:17:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":814,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":821,"sourceUnit":41,"src":"122:68:18","symbolAliases":[{"foreign":{"id":813,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"130:17:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":816,"name":"TokenRecoveryBase","nameLocations":["440:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":1041,"src":"440:17:18"},"id":817,"nodeType":"InheritanceSpecifier","src":"440:17:18"},{"baseName":{"id":818,"name":"ContractOwnership","nameLocations":["459:17:18"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"459:17:18"},"id":819,"nodeType":"InheritanceSpecifier","src":"459:17:18"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":815,"nodeType":"StructuredDocumentation","src":"192:213:18","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":820,"linearizedBaseContracts":[820,40,410,427,88,1041,2007,133,113],"name":"TokenRecovery","nameLocation":"423:13:18","nodeType":"ContractDefinition","nodes":[],"scope":821,"src":"405:76:18","usedErrors":[7,95,415],"usedEvents":[112]}],"src":"32:450:18"},"id":18},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Address":[1985],"Context":[2007],"ContractOwnershipStorage":[380],"IERC20":[1243],"IERC721":[1162],"InconsistentArrayLengths":[7],"SafeERC20":[1655],"TokenRecoveryBase":[1041]},"id":1042,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":822,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../CommonErrors.sol","id":824,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1042,"sourceUnit":8,"src":"58:66:19","symbolAliases":[{"foreign":{"id":823,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"66:24:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":826,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1042,"sourceUnit":1166,"src":"125:69:19","symbolAliases":[{"foreign":{"id":825,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"133:6:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1042,"sourceUnit":1163,"src":"195:68:19","symbolAliases":[{"foreign":{"id":827,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"203:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":830,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1042,"sourceUnit":381,"src":"264:95:19","symbolAliases":[{"foreign":{"id":829,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"272:24:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":832,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1042,"sourceUnit":1656,"src":"360:82:19","symbolAliases":[{"foreign":{"id":831,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"368:9:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":834,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1042,"sourceUnit":2008,"src":"443:66:19","symbolAliases":[{"foreign":{"id":833,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"451:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":836,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1042,"sourceUnit":1986,"src":"510:66:19","symbolAliases":[{"foreign":{"id":835,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"518:7:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":838,"name":"Context","nameLocations":["889:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":2007,"src":"889:7:19"},"id":839,"nodeType":"InheritanceSpecifier","src":"889:7:19"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":837,"nodeType":"StructuredDocumentation","src":"578:272:19","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1041,"linearizedBaseContracts":[1041,2007],"name":"TokenRecoveryBase","nameLocation":"868:17:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":843,"libraryName":{"id":840,"name":"ContractOwnershipStorage","nameLocations":["909:24:19"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"909:24:19"},"nodeType":"UsingForDirective","src":"903:67:19","typeName":{"id":842,"nodeType":"UserDefinedTypeName","pathNode":{"id":841,"name":"ContractOwnershipStorage.Layout","nameLocations":["938:24:19","963:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"938:31:19"},"referencedDeclaration":157,"src":"938:31:19","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":847,"libraryName":{"id":844,"name":"SafeERC20","nameLocations":["981:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":1655,"src":"981:9:19"},"nodeType":"UsingForDirective","src":"975:27:19","typeName":{"id":846,"nodeType":"UserDefinedTypeName","pathNode":{"id":845,"name":"IERC20","nameLocations":["995:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"995:6:19"},"referencedDeclaration":1243,"src":"995:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}}},{"global":false,"id":850,"libraryName":{"id":848,"name":"Address","nameLocations":["1013:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":1985,"src":"1013:7:19"},"nodeType":"UsingForDirective","src":"1007:34:19","typeName":{"id":849,"name":"address","nodeType":"ElementaryTypeName","src":"1025:15:19","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"body":{"id":903,"nodeType":"Block","src":"2044:345:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":865,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"2111:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2111:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":860,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"2054:24:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$380_$","typeString":"type(library ContractOwnershipStorage)"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2079:6:19","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":379,"src":"2054:31:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2054:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":864,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2088:22:19","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":346,"src":"2054:56:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2054:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":868,"nodeType":"ExpressionStatement","src":"2054:70:19"},{"assignments":[870],"declarations":[{"constant":false,"id":870,"mutability":"mutable","name":"length","nameLocation":"2142:6:19","nodeType":"VariableDeclaration","scope":903,"src":"2134:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":869,"name":"uint256","nodeType":"ElementaryTypeName","src":"2134:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":873,"initialValue":{"expression":{"id":871,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"2151:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2160:6:19","memberName":"length","nodeType":"MemberAccess","src":"2151:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2134:32:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":874,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2180:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":875,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"2190:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2198:6:19","memberName":"length","nodeType":"MemberAccess","src":"2190:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2180:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":881,"nodeType":"IfStatement","src":"2176:63:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":878,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2213:24:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2213:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"RevertStatement","src":"2206:33:19"}},{"id":902,"nodeType":"UncheckedBlock","src":"2249:134:19","statements":[{"body":{"id":900,"nodeType":"Block","src":"2307:66:19","statements":[{"expression":{"arguments":[{"baseExpression":{"id":895,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"2347:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":897,"indexExpression":{"id":896,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"2355:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2347:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":891,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"2325:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":893,"indexExpression":{"id":892,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"2334:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2325:11:19","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2337:9:19","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":1707,"src":"2325:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2325:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":899,"nodeType":"ExpressionStatement","src":"2325:33:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":885,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"2289:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":886,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":870,"src":"2294:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2289:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":901,"initializationExpression":{"assignments":[883],"declarations":[{"constant":false,"id":883,"mutability":"mutable","name":"i","nameLocation":"2286:1:19","nodeType":"VariableDeclaration","scope":901,"src":"2278:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":882,"name":"uint256","nodeType":"ElementaryTypeName","src":"2278:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":884,"nodeType":"VariableDeclarationStatement","src":"2278:9:19"},"loopExpression":{"expression":{"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2302:3:19","subExpression":{"id":888,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":883,"src":"2304:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":890,"nodeType":"ExpressionStatement","src":"2302:3:19"},"nodeType":"ForStatement","src":"2273:100:19"}]}]},"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"1047:890:19","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":904,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1951:10:19","nodeType":"FunctionDefinition","parameters":{"id":858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":854,"mutability":"mutable","name":"accounts","nameLocation":"1989:8:19","nodeType":"VariableDeclaration","scope":904,"src":"1962:35:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"1962:15:19","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":853,"nodeType":"ArrayTypeName","src":"1962:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"amounts","nameLocation":"2018:7:19","nodeType":"VariableDeclaration","scope":904,"src":"1999:26:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":855,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":856,"nodeType":"ArrayTypeName","src":"1999:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1961:65:19"},"returnParameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"2044:0:19"},"scope":1041,"src":"1942:447:19","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":969,"nodeType":"Block","src":"3281:386:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":923,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"3348:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3348:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":918,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"3291:24:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$380_$","typeString":"type(library ContractOwnershipStorage)"}},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3316:6:19","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":379,"src":"3291:31:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3291:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":922,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3325:22:19","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":346,"src":"3291:56:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3291:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":926,"nodeType":"ExpressionStatement","src":"3291:70:19"},{"assignments":[928],"declarations":[{"constant":false,"id":928,"mutability":"mutable","name":"length","nameLocation":"3379:6:19","nodeType":"VariableDeclaration","scope":969,"src":"3371:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":927,"name":"uint256","nodeType":"ElementaryTypeName","src":"3371:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":931,"initialValue":{"expression":{"id":929,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"3388:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3397:6:19","memberName":"length","nodeType":"MemberAccess","src":"3388:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3371:32:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":935,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":932,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"3417:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":933,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"3427:6:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3434:6:19","memberName":"length","nodeType":"MemberAccess","src":"3427:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3417:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"3444:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":937,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"3454:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3462:6:19","memberName":"length","nodeType":"MemberAccess","src":"3454:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3444:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3417:51:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":944,"nodeType":"IfStatement","src":"3413:90:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":941,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"3477:24:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3477:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":943,"nodeType":"RevertStatement","src":"3470:33:19"}},{"id":968,"nodeType":"UncheckedBlock","src":"3513:148:19","statements":[{"body":{"id":966,"nodeType":"Block","src":"3571:80:19","statements":[{"expression":{"arguments":[{"baseExpression":{"id":958,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"3612:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":960,"indexExpression":{"id":959,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3621:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3612:11:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":961,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"3625:7:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":963,"indexExpression":{"id":962,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3633:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3625:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":954,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"3589:6:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":956,"indexExpression":{"id":955,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3596:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3589:9:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3599:12:19","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1312,"src":"3589:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1243_$","typeString":"function (contract IERC20,address,uint256)"}},"id":964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3589:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":965,"nodeType":"ExpressionStatement","src":"3589:47:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":948,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3553:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":949,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":928,"src":"3558:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3553:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":967,"initializationExpression":{"assignments":[946],"declarations":[{"constant":false,"id":946,"mutability":"mutable","name":"i","nameLocation":"3550:1:19","nodeType":"VariableDeclaration","scope":967,"src":"3542:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":945,"name":"uint256","nodeType":"ElementaryTypeName","src":"3542:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":947,"nodeType":"VariableDeclarationStatement","src":"3542:9:19"},"loopExpression":{"expression":{"id":952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3566:3:19","subExpression":{"id":951,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":946,"src":"3568:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":953,"nodeType":"ExpressionStatement","src":"3566:3:19"},"nodeType":"ForStatement","src":"3537:114:19"}]}]},"documentation":{"id":905,"nodeType":"StructuredDocumentation","src":"2395:758:19","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":970,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"3167:13:19","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":908,"mutability":"mutable","name":"accounts","nameLocation":"3200:8:19","nodeType":"VariableDeclaration","scope":970,"src":"3181:27:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":906,"name":"address","nodeType":"ElementaryTypeName","src":"3181:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":907,"nodeType":"ArrayTypeName","src":"3181:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":912,"mutability":"mutable","name":"tokens","nameLocation":"3228:6:19","nodeType":"VariableDeclaration","scope":970,"src":"3210:24:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":910,"nodeType":"UserDefinedTypeName","pathNode":{"id":909,"name":"IERC20","nameLocations":["3210:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"3210:6:19"},"referencedDeclaration":1243,"src":"3210:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":911,"nodeType":"ArrayTypeName","src":"3210:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1243_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"amounts","nameLocation":"3255:7:19","nodeType":"VariableDeclaration","scope":970,"src":"3236:26:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"3236:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":914,"nodeType":"ArrayTypeName","src":"3236:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3180:83:19"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[],"src":"3281:0:19"},"scope":1041,"src":"3158:509:19","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":1039,"nodeType":"Block","src":"4574:409:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":989,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"4641:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4641:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":984,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"4584:24:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$380_$","typeString":"type(library ContractOwnershipStorage)"}},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4609:6:19","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":379,"src":"4584:31:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4584:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":988,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4618:22:19","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":346,"src":"4584:56:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4584:70:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":992,"nodeType":"ExpressionStatement","src":"4584:70:19"},{"assignments":[994],"declarations":[{"constant":false,"id":994,"mutability":"mutable","name":"length","nameLocation":"4672:6:19","nodeType":"VariableDeclaration","scope":1039,"src":"4664:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":993,"name":"uint256","nodeType":"ElementaryTypeName","src":"4664:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":997,"initialValue":{"expression":{"id":995,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"4681:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4690:6:19","memberName":"length","nodeType":"MemberAccess","src":"4681:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4664:32:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":998,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"4710:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":999,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"4720:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4730:6:19","memberName":"length","nodeType":"MemberAccess","src":"4720:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4710:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1002,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"4740:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1003,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"4750:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4759:6:19","memberName":"length","nodeType":"MemberAccess","src":"4750:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4740:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4710:55:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1010,"nodeType":"IfStatement","src":"4706:94:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1007,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"4774:24:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4774:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1009,"nodeType":"RevertStatement","src":"4767:33:19"}},{"id":1038,"nodeType":"UncheckedBlock","src":"4810:167:19","statements":[{"body":{"id":1036,"nodeType":"Block","src":"4868:99:19","statements":[{"expression":{"arguments":[{"arguments":[{"id":1026,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4920:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1041","typeString":"contract TokenRecoveryBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1041","typeString":"contract TokenRecoveryBase"}],"id":1025,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4912:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1024,"name":"address","nodeType":"ElementaryTypeName","src":"4912:7:19","typeDescriptions":{}}},"id":1027,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4912:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1028,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":974,"src":"4927:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1030,"indexExpression":{"id":1029,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4936:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4927:11:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1031,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"4940:8:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1033,"indexExpression":{"id":1032,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4949:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4940:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1020,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":978,"src":"4886:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1022,"indexExpression":{"id":1021,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4896:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4886:12:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1162","typeString":"contract IERC721"}},"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4899:12:19","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1105,"src":"4886:25:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4886:66:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1035,"nodeType":"ExpressionStatement","src":"4886:66:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1014,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4850:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1015,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"4855:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4850:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1037,"initializationExpression":{"assignments":[1012],"declarations":[{"constant":false,"id":1012,"mutability":"mutable","name":"i","nameLocation":"4847:1:19","nodeType":"VariableDeclaration","scope":1037,"src":"4839:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1013,"nodeType":"VariableDeclarationStatement","src":"4839:9:19"},"loopExpression":{"expression":{"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4863:3:19","subExpression":{"id":1017,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"4865:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1019,"nodeType":"ExpressionStatement","src":"4863:3:19"},"nodeType":"ForStatement","src":"4834:133:19"}]}]},"documentation":{"id":971,"nodeType":"StructuredDocumentation","src":"3673:767:19","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":1040,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"4454:14:19","nodeType":"FunctionDefinition","parameters":{"id":982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":974,"mutability":"mutable","name":"accounts","nameLocation":"4488:8:19","nodeType":"VariableDeclaration","scope":1040,"src":"4469:27:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":972,"name":"address","nodeType":"ElementaryTypeName","src":"4469:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":973,"nodeType":"ArrayTypeName","src":"4469:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":978,"mutability":"mutable","name":"contracts","nameLocation":"4517:9:19","nodeType":"VariableDeclaration","scope":1040,"src":"4498:28:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":976,"nodeType":"UserDefinedTypeName","pathNode":{"id":975,"name":"IERC721","nameLocations":["4498:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":1162,"src":"4498:7:19"},"referencedDeclaration":1162,"src":"4498:7:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1162","typeString":"contract IERC721"}},"id":977,"nodeType":"ArrayTypeName","src":"4498:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1162_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"tokenIds","nameLocation":"4547:8:19","nodeType":"VariableDeclaration","scope":1040,"src":"4528:27:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":979,"name":"uint256","nodeType":"ElementaryTypeName","src":"4528:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":980,"nodeType":"ArrayTypeName","src":"4528:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4468:88:19"},"returnParameters":{"id":983,"nodeType":"ParameterList","parameters":[],"src":"4574:0:19"},"scope":1041,"src":"4445:538:19","stateMutability":"nonpayable","virtual":true,"visibility":"external"}],"scope":1042,"src":"850:4135:19","usedErrors":[7,95],"usedEvents":[]}],"src":"32:4954:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol","exportedSymbols":{"IERC721Events":[1072]},"id":1073,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1043,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Events","contractDependencies":[],"contractKind":"interface","documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"58:287:20","text":"@title ERC721 Non-Fungible Token Standard, basic interface (events).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard events, see IERC721 for the functions.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":true,"id":1072,"linearizedBaseContracts":[1072],"name":"IERC721Events","nameLocation":"355:13:20","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1045,"nodeType":"StructuredDocumentation","src":"375:190:20","text":"@notice Emitted when a token is transferred.\n @param from The previous token owner.\n @param to The new token owner.\n @param tokenId The transferred token identifier."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1053,"name":"Transfer","nameLocation":"576:8:20","nodeType":"EventDefinition","parameters":{"id":1052,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1047,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"601:4:20","nodeType":"VariableDeclaration","scope":1053,"src":"585:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1046,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1049,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"623:2:20","nodeType":"VariableDeclaration","scope":1053,"src":"607:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1048,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1051,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"643:7:20","nodeType":"VariableDeclaration","scope":1053,"src":"627:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1050,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"584:67:20"},"src":"570:82:20"},{"anonymous":false,"documentation":{"id":1054,"nodeType":"StructuredDocumentation","src":"658:194:20","text":"@notice Emitted when a single token approval is set.\n @param owner The token owner.\n @param approved The approved address.\n @param tokenId The approved token identifier."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1062,"name":"Approval","nameLocation":"863:8:20","nodeType":"EventDefinition","parameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1056,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"888:5:20","nodeType":"VariableDeclaration","scope":1062,"src":"872:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1055,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1058,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"911:8:20","nodeType":"VariableDeclaration","scope":1062,"src":"895:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1057,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1060,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"937:7:20","nodeType":"VariableDeclaration","scope":1062,"src":"921:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1059,"name":"uint256","nodeType":"ElementaryTypeName","src":"921:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"871:74:20"},"src":"857:89:20"},{"anonymous":false,"documentation":{"id":1063,"nodeType":"StructuredDocumentation","src":"952:233:20","text":"@notice Emitted when an approval for all tokens is set or unset.\n @param owner The tokens owner.\n @param operator The approved address.\n @param approved True when then approval is set, false when it is unset."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1071,"name":"ApprovalForAll","nameLocation":"1196:14:20","nodeType":"EventDefinition","parameters":{"id":1070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1065,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1227:5:20","nodeType":"VariableDeclaration","scope":1071,"src":"1211:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1064,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1067,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1250:8:20","nodeType":"VariableDeclaration","scope":1071,"src":"1234:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1066,"name":"address","nodeType":"ElementaryTypeName","src":"1234:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1069,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1265:8:20","nodeType":"VariableDeclaration","scope":1071,"src":"1260:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1068,"name":"bool","nodeType":"ElementaryTypeName","src":"1260:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1210:64:20"},"src":"1190:85:20"}],"scope":1073,"src":"345:932:20","usedErrors":[],"usedEvents":[1053,1062,1071]}],"src":"32:1246:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1162],"IERC721Events":[1072]},"id":1163,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1074,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol","file":"./../events/IERC721Events.sol","id":1076,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1163,"sourceUnit":1073,"src":"58:60:21","symbolAliases":[{"foreign":{"id":1075,"name":"IERC721Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1072,"src":"66:13:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1078,"name":"IERC721Events","nameLocations":["437:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":1072,"src":"437:13:21"},"id":1079,"nodeType":"InheritanceSpecifier","src":"437:13:21"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"120:296:21","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1162,"linearizedBaseContracts":[1162,1072],"name":"IERC721","nameLocation":"426:7:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1080,"nodeType":"StructuredDocumentation","src":"457:684:21","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1087,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1155:7:21","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1082,"mutability":"mutable","name":"to","nameLocation":"1171:2:21","nodeType":"VariableDeclaration","scope":1087,"src":"1163:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"1163:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1084,"mutability":"mutable","name":"tokenId","nameLocation":"1183:7:21","nodeType":"VariableDeclaration","scope":1087,"src":"1175:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1083,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1162:29:21"},"returnParameters":{"id":1086,"nodeType":"ParameterList","parameters":[],"src":"1200:0:21"},"scope":1162,"src":"1146:55:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1088,"nodeType":"StructuredDocumentation","src":"1207:341:21","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1095,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1562:17:21","nodeType":"FunctionDefinition","parameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"operator","nameLocation":"1588:8:21","nodeType":"VariableDeclaration","scope":1095,"src":"1580:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1089,"name":"address","nodeType":"ElementaryTypeName","src":"1580:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1092,"mutability":"mutable","name":"approved","nameLocation":"1603:8:21","nodeType":"VariableDeclaration","scope":1095,"src":"1598:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1091,"name":"bool","nodeType":"ElementaryTypeName","src":"1598:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1579:33:21"},"returnParameters":{"id":1094,"nodeType":"ParameterList","parameters":[],"src":"1621:0:21"},"scope":1162,"src":"1553:69:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1096,"nodeType":"StructuredDocumentation","src":"1628:667:21","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1105,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2309:12:21","nodeType":"FunctionDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1098,"mutability":"mutable","name":"from","nameLocation":"2330:4:21","nodeType":"VariableDeclaration","scope":1105,"src":"2322:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1097,"name":"address","nodeType":"ElementaryTypeName","src":"2322:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1100,"mutability":"mutable","name":"to","nameLocation":"2344:2:21","nodeType":"VariableDeclaration","scope":1105,"src":"2336:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1099,"name":"address","nodeType":"ElementaryTypeName","src":"2336:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1102,"mutability":"mutable","name":"tokenId","nameLocation":"2356:7:21","nodeType":"VariableDeclaration","scope":1105,"src":"2348:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"2348:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2321:43:21"},"returnParameters":{"id":1104,"nodeType":"ParameterList","parameters":[],"src":"2373:0:21"},"scope":1162,"src":"2300:74:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1106,"nodeType":"StructuredDocumentation","src":"2380:663:21","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1115,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3057:16:21","nodeType":"FunctionDefinition","parameters":{"id":1113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1108,"mutability":"mutable","name":"from","nameLocation":"3082:4:21","nodeType":"VariableDeclaration","scope":1115,"src":"3074:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1107,"name":"address","nodeType":"ElementaryTypeName","src":"3074:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1110,"mutability":"mutable","name":"to","nameLocation":"3096:2:21","nodeType":"VariableDeclaration","scope":1115,"src":"3088:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1109,"name":"address","nodeType":"ElementaryTypeName","src":"3088:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1112,"mutability":"mutable","name":"tokenId","nameLocation":"3108:7:21","nodeType":"VariableDeclaration","scope":1115,"src":"3100:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1111,"name":"uint256","nodeType":"ElementaryTypeName","src":"3100:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3073:43:21"},"returnParameters":{"id":1114,"nodeType":"ParameterList","parameters":[],"src":"3125:0:21"},"scope":1162,"src":"3048:78:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1116,"nodeType":"StructuredDocumentation","src":"3132:735:21","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1127,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3881:16:21","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1118,"mutability":"mutable","name":"from","nameLocation":"3906:4:21","nodeType":"VariableDeclaration","scope":1127,"src":"3898:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1117,"name":"address","nodeType":"ElementaryTypeName","src":"3898:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1120,"mutability":"mutable","name":"to","nameLocation":"3920:2:21","nodeType":"VariableDeclaration","scope":1127,"src":"3912:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1119,"name":"address","nodeType":"ElementaryTypeName","src":"3912:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1122,"mutability":"mutable","name":"tokenId","nameLocation":"3932:7:21","nodeType":"VariableDeclaration","scope":1127,"src":"3924:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1121,"name":"uint256","nodeType":"ElementaryTypeName","src":"3924:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"data","nameLocation":"3956:4:21","nodeType":"VariableDeclaration","scope":1127,"src":"3941:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1123,"name":"bytes","nodeType":"ElementaryTypeName","src":"3941:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3897:64:21"},"returnParameters":{"id":1126,"nodeType":"ParameterList","parameters":[],"src":"3970:0:21"},"scope":1162,"src":"3872:99:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1128,"nodeType":"StructuredDocumentation","src":"3977:209:21","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1135,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4200:9:21","nodeType":"FunctionDefinition","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1130,"mutability":"mutable","name":"owner","nameLocation":"4218:5:21","nodeType":"VariableDeclaration","scope":1135,"src":"4210:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1129,"name":"address","nodeType":"ElementaryTypeName","src":"4210:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4209:15:21"},"returnParameters":{"id":1134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1133,"mutability":"mutable","name":"balance","nameLocation":"4256:7:21","nodeType":"VariableDeclaration","scope":1135,"src":"4248:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1132,"name":"uint256","nodeType":"ElementaryTypeName","src":"4248:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4247:17:21"},"scope":1162,"src":"4191:74:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"4271:217:21","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1143,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4502:7:21","nodeType":"FunctionDefinition","parameters":{"id":1139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1138,"mutability":"mutable","name":"tokenId","nameLocation":"4518:7:21","nodeType":"VariableDeclaration","scope":1143,"src":"4510:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1137,"name":"uint256","nodeType":"ElementaryTypeName","src":"4510:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4509:17:21"},"returnParameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"tokenOwner","nameLocation":"4558:10:21","nodeType":"VariableDeclaration","scope":1143,"src":"4550:18:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"4550:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4549:20:21"},"scope":1162,"src":"4493:77:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1144,"nodeType":"StructuredDocumentation","src":"4576:285:21","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1151,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4875:11:21","nodeType":"FunctionDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"tokenId","nameLocation":"4895:7:21","nodeType":"VariableDeclaration","scope":1151,"src":"4887:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1145,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4886:17:21"},"returnParameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"mutability":"mutable","name":"approved","nameLocation":"4935:8:21","nodeType":"VariableDeclaration","scope":1151,"src":"4927:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1148,"name":"address","nodeType":"ElementaryTypeName","src":"4927:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4926:18:21"},"scope":1162,"src":"4866:79:21","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1152,"nodeType":"StructuredDocumentation","src":"4951:323:21","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1161,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5288:16:21","nodeType":"FunctionDefinition","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"mutability":"mutable","name":"owner","nameLocation":"5313:5:21","nodeType":"VariableDeclaration","scope":1161,"src":"5305:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1153,"name":"address","nodeType":"ElementaryTypeName","src":"5305:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"operator","nameLocation":"5328:8:21","nodeType":"VariableDeclaration","scope":1161,"src":"5320:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"5320:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5304:33:21"},"returnParameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"approvedForAll","nameLocation":"5366:14:21","nodeType":"VariableDeclaration","scope":1161,"src":"5361:19:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1158,"name":"bool","nodeType":"ElementaryTypeName","src":"5361:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5360:21:21"},"scope":1162,"src":"5279:103:21","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1163,"src":"416:4968:21","usedErrors":[],"usedEvents":[1053,1062,1071]}],"src":"32:5353:21"},"id":21},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[1243]},"id":1166,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1164,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":1165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1166,"sourceUnit":1244,"src":"115:35:22","symbolAliases":[],"unitAlias":""}],"src":"90:61:22"},"id":22},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1243]},"id":1244,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1167,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1168,"nodeType":"StructuredDocumentation","src":"131:70:23","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1243,"linearizedBaseContracts":[1243],"name":"IERC20","nameLocation":"212:6:23","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1169,"nodeType":"StructuredDocumentation","src":"225:158:23","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1177,"name":"Transfer","nameLocation":"394:8:23","nodeType":"EventDefinition","parameters":{"id":1176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1171,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:23","nodeType":"VariableDeclaration","scope":1177,"src":"403:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1170,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1173,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:23","nodeType":"VariableDeclaration","scope":1177,"src":"425:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1175,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:23","nodeType":"VariableDeclaration","scope":1177,"src":"445:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:23"},"src":"388:72:23"},{"anonymous":false,"documentation":{"id":1178,"nodeType":"StructuredDocumentation","src":"466:148:23","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1186,"name":"Approval","nameLocation":"625:8:23","nodeType":"EventDefinition","parameters":{"id":1185,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1180,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:23","nodeType":"VariableDeclaration","scope":1186,"src":"634:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1179,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1182,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:23","nodeType":"VariableDeclaration","scope":1186,"src":"657:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1184,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:23","nodeType":"VariableDeclaration","scope":1186,"src":"682:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1183,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:23"},"src":"619:78:23"},{"documentation":{"id":1187,"nodeType":"StructuredDocumentation","src":"703:66:23","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1192,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:23","nodeType":"FunctionDefinition","parameters":{"id":1188,"nodeType":"ParameterList","parameters":[],"src":"794:2:23"},"returnParameters":{"id":1191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1192,"src":"820:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1189,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:23"},"scope":1243,"src":"774:55:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1193,"nodeType":"StructuredDocumentation","src":"835:72:23","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1200,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:23","nodeType":"FunctionDefinition","parameters":{"id":1196,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1195,"mutability":"mutable","name":"account","nameLocation":"939:7:23","nodeType":"VariableDeclaration","scope":1200,"src":"931:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1194,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:23"},"returnParameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1200,"src":"971:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1197,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:23"},"scope":1243,"src":"912:68:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1201,"nodeType":"StructuredDocumentation","src":"986:202:23","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1210,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:23","nodeType":"FunctionDefinition","parameters":{"id":1206,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1203,"mutability":"mutable","name":"to","nameLocation":"1219:2:23","nodeType":"VariableDeclaration","scope":1210,"src":"1211:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1202,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1205,"mutability":"mutable","name":"amount","nameLocation":"1231:6:23","nodeType":"VariableDeclaration","scope":1210,"src":"1223:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1204,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:23"},"returnParameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1210,"src":"1257:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1207,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:23"},"scope":1243,"src":"1193:70:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"1269:264:23","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1220,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:23","nodeType":"FunctionDefinition","parameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"owner","nameLocation":"1565:5:23","nodeType":"VariableDeclaration","scope":1220,"src":"1557:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1212,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1215,"mutability":"mutable","name":"spender","nameLocation":"1580:7:23","nodeType":"VariableDeclaration","scope":1220,"src":"1572:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:23"},"returnParameters":{"id":1219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1218,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1220,"src":"1612:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1217,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:23"},"scope":1243,"src":"1538:83:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1221,"nodeType":"StructuredDocumentation","src":"1627:642:23","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1230,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:23","nodeType":"FunctionDefinition","parameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1223,"mutability":"mutable","name":"spender","nameLocation":"2299:7:23","nodeType":"VariableDeclaration","scope":1230,"src":"2291:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1222,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1225,"mutability":"mutable","name":"amount","nameLocation":"2316:6:23","nodeType":"VariableDeclaration","scope":1230,"src":"2308:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1224,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:23"},"returnParameters":{"id":1229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1228,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1230,"src":"2342:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1227,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:23"},"scope":1243,"src":"2274:74:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1231,"nodeType":"StructuredDocumentation","src":"2354:287:23","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1242,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:23","nodeType":"FunctionDefinition","parameters":{"id":1238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1233,"mutability":"mutable","name":"from","nameLocation":"2676:4:23","nodeType":"VariableDeclaration","scope":1242,"src":"2668:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1232,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1235,"mutability":"mutable","name":"to","nameLocation":"2690:2:23","nodeType":"VariableDeclaration","scope":1242,"src":"2682:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1234,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"amount","nameLocation":"2702:6:23","nodeType":"VariableDeclaration","scope":1242,"src":"2694:14:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1236,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:23"},"returnParameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1240,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1242,"src":"2728:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1239,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:23"},"scope":1243,"src":"2646:88:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1244,"src":"202:2534:23","usedErrors":[],"usedEvents":[1177,1186]}],"src":"106:2631:23"},"id":23},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1279]},"id":1280,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1245,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1246,"nodeType":"StructuredDocumentation","src":"148:480:24","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":1279,"linearizedBaseContracts":[1279],"name":"IERC20Permit","nameLocation":"639:12:24","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"658:792:24","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":1264,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:24","nodeType":"FunctionDefinition","parameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1249,"mutability":"mutable","name":"owner","nameLocation":"1488:5:24","nodeType":"VariableDeclaration","scope":1264,"src":"1480:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1248,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1251,"mutability":"mutable","name":"spender","nameLocation":"1511:7:24","nodeType":"VariableDeclaration","scope":1264,"src":"1503:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1250,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1253,"mutability":"mutable","name":"value","nameLocation":"1536:5:24","nodeType":"VariableDeclaration","scope":1264,"src":"1528:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1252,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1255,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:24","nodeType":"VariableDeclaration","scope":1264,"src":"1551:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1254,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1257,"mutability":"mutable","name":"v","nameLocation":"1583:1:24","nodeType":"VariableDeclaration","scope":1264,"src":"1577:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1256,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:24","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1259,"mutability":"mutable","name":"r","nameLocation":"1602:1:24","nodeType":"VariableDeclaration","scope":1264,"src":"1594:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1261,"mutability":"mutable","name":"s","nameLocation":"1621:1:24","nodeType":"VariableDeclaration","scope":1264,"src":"1613:9:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:24"},"returnParameters":{"id":1263,"nodeType":"ParameterList","parameters":[],"src":"1637:0:24"},"scope":1279,"src":"1455:183:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1265,"nodeType":"StructuredDocumentation","src":"1644:294:24","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1272,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:24","nodeType":"FunctionDefinition","parameters":{"id":1268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1267,"mutability":"mutable","name":"owner","nameLocation":"1967:5:24","nodeType":"VariableDeclaration","scope":1272,"src":"1959:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1266,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:24"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1272,"src":"1997:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1269,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:24"},"scope":1279,"src":"1943:63:24","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1273,"nodeType":"StructuredDocumentation","src":"2012:128:24","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1278,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:24","nodeType":"FunctionDefinition","parameters":{"id":1274,"nodeType":"ParameterList","parameters":[],"src":"2223:2:24"},"returnParameters":{"id":1277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1276,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1278,"src":"2249:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:24"},"scope":1279,"src":"2198:60:24","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1280,"src":"629:1631:24","usedErrors":[],"usedEvents":[]}],"src":"123:2138:24"},"id":24},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[1985],"IERC20":[1243],"IERC20Permit":[1279],"SafeERC20":[1655]},"id":1656,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1281,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:25"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1282,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1656,"sourceUnit":1244,"src":"140:23:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":1283,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1656,"sourceUnit":1280,"src":"164:40:25","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1284,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1656,"sourceUnit":1986,"src":"205:36:25","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1285,"nodeType":"StructuredDocumentation","src":"243:457:25","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1655,"linearizedBaseContracts":[1655],"name":"SafeERC20","nameLocation":"709:9:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1288,"libraryName":{"id":1286,"name":"Address","nameLocations":["731:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":1985,"src":"731:7:25"},"nodeType":"UsingForDirective","src":"725:26:25","typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1311,"nodeType":"Block","src":"1013:103:25","statements":[{"expression":{"arguments":[{"id":1300,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"1043:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1303,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"1073:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:25","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1210,"src":"1073:14:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:25","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1306,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"1098:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1307,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"1102:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1301,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:25","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1299,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"1023:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1310,"nodeType":"ExpressionStatement","src":"1023:86:25"}]},"documentation":{"id":1289,"nodeType":"StructuredDocumentation","src":"757:179:25","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1312,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:25","nodeType":"FunctionDefinition","parameters":{"id":1297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"token","nameLocation":"970:5:25","nodeType":"VariableDeclaration","scope":1312,"src":"963:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1291,"nodeType":"UserDefinedTypeName","pathNode":{"id":1290,"name":"IERC20","nameLocations":["963:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"963:6:25"},"referencedDeclaration":1243,"src":"963:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1294,"mutability":"mutable","name":"to","nameLocation":"985:2:25","nodeType":"VariableDeclaration","scope":1312,"src":"977:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1293,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1296,"mutability":"mutable","name":"value","nameLocation":"997:5:25","nodeType":"VariableDeclaration","scope":1312,"src":"989:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1295,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:25"},"returnParameters":{"id":1298,"nodeType":"ParameterList","parameters":[],"src":"1013:0:25"},"scope":1655,"src":"941:175:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1338,"nodeType":"Block","src":"1445:113:25","statements":[{"expression":{"arguments":[{"id":1326,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"1475:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1329,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"1505:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:25","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1242,"src":"1505:18:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:25","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1332,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"1534:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1333,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1320,"src":"1540:2:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1334,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"1544:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1327,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:25","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1325,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"1455:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1337,"nodeType":"ExpressionStatement","src":"1455:96:25"}]},"documentation":{"id":1313,"nodeType":"StructuredDocumentation","src":"1122:228:25","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":1339,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:25","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1316,"mutability":"mutable","name":"token","nameLocation":"1388:5:25","nodeType":"VariableDeclaration","scope":1339,"src":"1381:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1315,"nodeType":"UserDefinedTypeName","pathNode":{"id":1314,"name":"IERC20","nameLocations":["1381:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"1381:6:25"},"referencedDeclaration":1243,"src":"1381:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"from","nameLocation":"1403:4:25","nodeType":"VariableDeclaration","scope":1339,"src":"1395:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1317,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1320,"mutability":"mutable","name":"to","nameLocation":"1417:2:25","nodeType":"VariableDeclaration","scope":1339,"src":"1409:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1319,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"value","nameLocation":"1429:5:25","nodeType":"VariableDeclaration","scope":1339,"src":"1421:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1321,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:25"},"returnParameters":{"id":1324,"nodeType":"ParameterList","parameters":[],"src":"1445:0:25"},"scope":1655,"src":"1355:203:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1382,"nodeType":"Block","src":"1894:497:25","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1351,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"2143:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1354,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1359,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1655","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1655","typeString":"library SafeERC20"}],"id":1358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1357,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:25","typeDescriptions":{}}},"id":1360,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1361,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"2190:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1355,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"2159:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:25","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1220,"src":"2159:15:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1365,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1350,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1369,"nodeType":"ExpressionStatement","src":"2121:163:25"},{"expression":{"arguments":[{"id":1371,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"2314:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1374,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"2344:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:25","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1230,"src":"2344:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:25","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1377,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"2368:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1347,"src":"2377:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1372,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:25","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1370,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"2294:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1381,"nodeType":"ExpressionStatement","src":"2294:90:25"}]},"documentation":{"id":1340,"nodeType":"StructuredDocumentation","src":"1564:249:25","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1383,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:25","nodeType":"FunctionDefinition","parameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1343,"mutability":"mutable","name":"token","nameLocation":"1846:5:25","nodeType":"VariableDeclaration","scope":1383,"src":"1839:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1342,"nodeType":"UserDefinedTypeName","pathNode":{"id":1341,"name":"IERC20","nameLocations":["1839:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"1839:6:25"},"referencedDeclaration":1243,"src":"1839:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1345,"mutability":"mutable","name":"spender","nameLocation":"1861:7:25","nodeType":"VariableDeclaration","scope":1383,"src":"1853:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1344,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1347,"mutability":"mutable","name":"value","nameLocation":"1878:5:25","nodeType":"VariableDeclaration","scope":1383,"src":"1870:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:25"},"returnParameters":{"id":1349,"nodeType":"ParameterList","parameters":[],"src":"1894:0:25"},"scope":1655,"src":"1818:573:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1419,"nodeType":"Block","src":"2668:194:25","statements":[{"assignments":[1395],"declarations":[{"constant":false,"id":1395,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:25","nodeType":"VariableDeclaration","scope":1419,"src":"2678:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1394,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1404,"initialValue":{"arguments":[{"arguments":[{"id":1400,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1655","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1655","typeString":"library SafeERC20"}],"id":1399,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1398,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:25","typeDescriptions":{}}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1402,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"2732:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1396,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2701:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:25","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1220,"src":"2701:15:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:25"},{"expression":{"arguments":[{"id":1406,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2770:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1409,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"2800:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:25","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1230,"src":"2800:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:25","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1412,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1389,"src":"2824:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1413,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"2833:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1414,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1391,"src":"2848:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1407,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:25","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1405,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"2750:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1418,"nodeType":"ExpressionStatement","src":"2750:105:25"}]},"documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"2397:180:25","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1420,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:25","nodeType":"FunctionDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"token","nameLocation":"2620:5:25","nodeType":"VariableDeclaration","scope":1420,"src":"2613:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1386,"nodeType":"UserDefinedTypeName","pathNode":{"id":1385,"name":"IERC20","nameLocations":["2613:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"2613:6:25"},"referencedDeclaration":1243,"src":"2613:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1389,"mutability":"mutable","name":"spender","nameLocation":"2635:7:25","nodeType":"VariableDeclaration","scope":1420,"src":"2627:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1388,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1391,"mutability":"mutable","name":"value","nameLocation":"2652:5:25","nodeType":"VariableDeclaration","scope":1420,"src":"2644:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:25"},"returnParameters":{"id":1393,"nodeType":"ParameterList","parameters":[],"src":"2668:0:25"},"scope":1655,"src":"2582:280:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1464,"nodeType":"Block","src":"3139:321:25","statements":[{"id":1463,"nodeType":"UncheckedBlock","src":"3149:305:25","statements":[{"assignments":[1432],"declarations":[{"constant":false,"id":1432,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:25","nodeType":"VariableDeclaration","scope":1463,"src":"3173:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1431,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1441,"initialValue":{"arguments":[{"arguments":[{"id":1437,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1655","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1655","typeString":"library SafeERC20"}],"id":1436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:25","typeDescriptions":{}}},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1439,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"3227:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1433,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3196:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:25","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1220,"src":"3196:15:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1443,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3257:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"3273:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1442,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1448,"nodeType":"ExpressionStatement","src":"3249:75:25"},{"expression":{"arguments":[{"id":1450,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3358:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1453,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1424,"src":"3388:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:25","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1230,"src":"3388:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:25","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1456,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"3412:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1457,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3421:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1458,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"3436:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1451,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:25","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1449,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"3338:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1462,"nodeType":"ExpressionStatement","src":"3338:105:25"}]}]},"documentation":{"id":1421,"nodeType":"StructuredDocumentation","src":"2868:180:25","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1465,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:25","nodeType":"FunctionDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"token","nameLocation":"3091:5:25","nodeType":"VariableDeclaration","scope":1465,"src":"3084:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1423,"nodeType":"UserDefinedTypeName","pathNode":{"id":1422,"name":"IERC20","nameLocations":["3084:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"3084:6:25"},"referencedDeclaration":1243,"src":"3084:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"spender","nameLocation":"3106:7:25","nodeType":"VariableDeclaration","scope":1465,"src":"3098:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1425,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"value","nameLocation":"3123:5:25","nodeType":"VariableDeclaration","scope":1465,"src":"3115:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:25"},"returnParameters":{"id":1430,"nodeType":"ParameterList","parameters":[],"src":"3139:0:25"},"scope":1655,"src":"3053:407:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1511,"nodeType":"Block","src":"3856:333:25","statements":[{"assignments":[1477],"declarations":[{"constant":false,"id":1477,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:25","nodeType":"VariableDeclaration","scope":1511,"src":"3866:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1476,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1486,"initialValue":{"arguments":[{"expression":{"expression":{"id":1480,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"3917:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:25","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1230,"src":"3917:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:25","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1483,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"3941:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"3950:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1478,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:25","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:25"},{"condition":{"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:25","subExpression":{"arguments":[{"id":1488,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"3996:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"id":1489,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"4003:12:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1487,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1654,"src":"3972:23:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1510,"nodeType":"IfStatement","src":"3967:216:25","trueBody":{"id":1509,"nodeType":"Block","src":"4018:165:25","statements":[{"expression":{"arguments":[{"id":1493,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"4052:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1496,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"4082:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:25","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1230,"src":"4082:13:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:25","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1499,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"4106:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1494,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:25","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:25","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1492,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"4032:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1503,"nodeType":"ExpressionStatement","src":"4032:86:25"},{"expression":{"arguments":[{"id":1505,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"4152:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},{"id":1506,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"4159:12:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1504,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1606,"src":"4132:19:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1243_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1508,"nodeType":"ExpressionStatement","src":"4132:40:25"}]}}]},"documentation":{"id":1466,"nodeType":"StructuredDocumentation","src":"3466:308:25","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":1512,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:25","nodeType":"FunctionDefinition","parameters":{"id":1474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1469,"mutability":"mutable","name":"token","nameLocation":"3808:5:25","nodeType":"VariableDeclaration","scope":1512,"src":"3801:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1468,"nodeType":"UserDefinedTypeName","pathNode":{"id":1467,"name":"IERC20","nameLocations":["3801:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"3801:6:25"},"referencedDeclaration":1243,"src":"3801:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"spender","nameLocation":"3823:7:25","nodeType":"VariableDeclaration","scope":1512,"src":"3815:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1470,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1473,"mutability":"mutable","name":"value","nameLocation":"3840:5:25","nodeType":"VariableDeclaration","scope":1512,"src":"3832:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1472,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:25"},"returnParameters":{"id":1475,"nodeType":"ParameterList","parameters":[],"src":"3856:0:25"},"scope":1655,"src":"3779:410:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1568,"nodeType":"Block","src":"4556:257:25","statements":[{"assignments":[1534],"declarations":[{"constant":false,"id":1534,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:25","nodeType":"VariableDeclaration","scope":1568,"src":"4566:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1533,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1539,"initialValue":{"arguments":[{"id":1537,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"4601:5:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1535,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"4588:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1279","typeString":"contract IERC20Permit"}},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:25","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1272,"src":"4588:12:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:25"},{"expression":{"arguments":[{"id":1543,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"4630:5:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1544,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1520,"src":"4637:7:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1545,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1522,"src":"4646:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1546,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"4653:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1547,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"4663:1:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1548,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"4666:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1549,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"4669:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1540,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"4617:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1279","typeString":"contract IERC20Permit"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:25","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1264,"src":"4617:12:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1551,"nodeType":"ExpressionStatement","src":"4617:54:25"},{"assignments":[1553],"declarations":[{"constant":false,"id":1553,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:25","nodeType":"VariableDeclaration","scope":1568,"src":"4681:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1552,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1558,"initialValue":{"arguments":[{"id":1556,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"4715:5:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1554,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"4702:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1279","typeString":"contract IERC20Permit"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:25","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1272,"src":"4702:12:25","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1560,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"4739:10:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1561,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"4753:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1559,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1567,"nodeType":"ExpressionStatement","src":"4731:75:25"}]},"documentation":{"id":1513,"nodeType":"StructuredDocumentation","src":"4195:141:25","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":1569,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:25","nodeType":"FunctionDefinition","parameters":{"id":1531,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"token","nameLocation":"4383:5:25","nodeType":"VariableDeclaration","scope":1569,"src":"4370:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1279","typeString":"contract IERC20Permit"},"typeName":{"id":1515,"nodeType":"UserDefinedTypeName","pathNode":{"id":1514,"name":"IERC20Permit","nameLocations":["4370:12:25"],"nodeType":"IdentifierPath","referencedDeclaration":1279,"src":"4370:12:25"},"referencedDeclaration":1279,"src":"4370:12:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1279","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1518,"mutability":"mutable","name":"owner","nameLocation":"4406:5:25","nodeType":"VariableDeclaration","scope":1569,"src":"4398:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1517,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1520,"mutability":"mutable","name":"spender","nameLocation":"4429:7:25","nodeType":"VariableDeclaration","scope":1569,"src":"4421:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1519,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1522,"mutability":"mutable","name":"value","nameLocation":"4454:5:25","nodeType":"VariableDeclaration","scope":1569,"src":"4446:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1521,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1524,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:25","nodeType":"VariableDeclaration","scope":1569,"src":"4469:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1523,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1526,"mutability":"mutable","name":"v","nameLocation":"4501:1:25","nodeType":"VariableDeclaration","scope":1569,"src":"4495:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1525,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:25","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1528,"mutability":"mutable","name":"r","nameLocation":"4520:1:25","nodeType":"VariableDeclaration","scope":1569,"src":"4512:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1527,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1530,"mutability":"mutable","name":"s","nameLocation":"4539:1:25","nodeType":"VariableDeclaration","scope":1569,"src":"4531:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:25"},"returnParameters":{"id":1532,"nodeType":"ParameterList","parameters":[],"src":"4556:0:25"},"scope":1655,"src":"4341:472:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1605,"nodeType":"Block","src":"5266:572:25","statements":[{"assignments":[1579],"declarations":[{"constant":false,"id":1579,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:25","nodeType":"VariableDeclaration","scope":1605,"src":"5615:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1578,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1588,"initialValue":{"arguments":[{"id":1585,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"5669:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1582,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"5649:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}],"id":1581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1580,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:25","typeDescriptions":{}}},"id":1583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:25","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1745,"src":"5641:27:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1590,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"5728:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:25","memberName":"length","nodeType":"MemberAccess","src":"5728:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1596,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"5765:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1597,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:25","typeDescriptions":{}}}],"id":1599,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1594,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:25","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1589,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1604,"nodeType":"ExpressionStatement","src":"5720:111:25"}]},"documentation":{"id":1570,"nodeType":"StructuredDocumentation","src":"4819:372:25","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1606,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:25","nodeType":"FunctionDefinition","parameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"token","nameLocation":"5232:5:25","nodeType":"VariableDeclaration","scope":1606,"src":"5225:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1572,"nodeType":"UserDefinedTypeName","pathNode":{"id":1571,"name":"IERC20","nameLocations":["5225:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"5225:6:25"},"referencedDeclaration":1243,"src":"5225:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"data","nameLocation":"5252:4:25","nodeType":"VariableDeclaration","scope":1606,"src":"5239:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1574,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:25"},"returnParameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"5266:0:25"},"scope":1655,"src":"5196:642:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1653,"nodeType":"Block","src":"6428:505:25","statements":[{"assignments":[1618,1620],"declarations":[{"constant":false,"id":1618,"mutability":"mutable","name":"success","nameLocation":"6729:7:25","nodeType":"VariableDeclaration","scope":1653,"src":"6724:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1617,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:25","nodeType":"VariableDeclaration","scope":1653,"src":"6738:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1619,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1628,"initialValue":{"arguments":[{"id":1626,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1612,"src":"6785:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1623,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"6773:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}],"id":1622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1621,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:25","typeDescriptions":{}}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:25","memberName":"call","nodeType":"MemberAccess","src":"6765:19:25","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:25"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1629,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"6819:7:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1630,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"6831:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:25","memberName":"length","nodeType":"MemberAccess","src":"6831:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1636,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"6868:10:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1637,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:25","typeDescriptions":{}}}],"id":1639,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1634,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:25","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1642,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":1648,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1610,"src":"6919:5:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}],"id":1647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1646,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:25","typeDescriptions":{}}},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1644,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"6892:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1985_$","typeString":"type(library Address)"}},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:25","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1673,"src":"6892:18:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1616,"id":1652,"nodeType":"Return","src":"6800:126:25"}]},"documentation":{"id":1607,"nodeType":"StructuredDocumentation","src":"5844:490:25","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":1654,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:25","nodeType":"FunctionDefinition","parameters":{"id":1613,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"token","nameLocation":"6379:5:25","nodeType":"VariableDeclaration","scope":1654,"src":"6372:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"},"typeName":{"id":1609,"nodeType":"UserDefinedTypeName","pathNode":{"id":1608,"name":"IERC20","nameLocations":["6372:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1243,"src":"6372:6:25"},"referencedDeclaration":1243,"src":"6372:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1243","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1612,"mutability":"mutable","name":"data","nameLocation":"6399:4:25","nodeType":"VariableDeclaration","scope":1654,"src":"6386:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1611,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:25"},"returnParameters":{"id":1616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1615,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1654,"src":"6422:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1614,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:25"},"scope":1655,"src":"6339:594:25","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1656,"src":"701:6234:25","usedErrors":[],"usedEvents":[]}],"src":"115:6821:25"},"id":25},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1985]},"id":1986,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1657,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1658,"nodeType":"StructuredDocumentation","src":"126:67:26","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1985,"linearizedBaseContracts":[1985],"name":"Address","nameLocation":"202:7:26","nodeType":"ContractDefinition","nodes":[{"body":{"id":1672,"nodeType":"Block","src":"1478:254:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1666,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"1702:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:26","memberName":"code","nodeType":"MemberAccess","src":"1702:12:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:26","memberName":"length","nodeType":"MemberAccess","src":"1702:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1665,"id":1671,"nodeType":"Return","src":"1695:30:26"}]},"documentation":{"id":1659,"nodeType":"StructuredDocumentation","src":"216:1191:26","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1673,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:26","nodeType":"FunctionDefinition","parameters":{"id":1662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1661,"mutability":"mutable","name":"account","nameLocation":"1440:7:26","nodeType":"VariableDeclaration","scope":1673,"src":"1432:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1660,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:26"},"returnParameters":{"id":1665,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1664,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1673,"src":"1472:4:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1663,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:26"},"scope":1985,"src":"1412:320:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1706,"nodeType":"Block","src":"2718:241:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1684,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1985","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1985","typeString":"library Address"}],"id":1683,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1682,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:26","typeDescriptions":{}}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:26","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1687,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2761:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1681,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1691,"nodeType":"ExpressionStatement","src":"2728:73:26"},{"assignments":[1693,null],"declarations":[{"constant":false,"id":1693,"mutability":"mutable","name":"success","nameLocation":"2818:7:26","nodeType":"VariableDeclaration","scope":1706,"src":"2813:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1692,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1700,"initialValue":{"arguments":[{"hexValue":"","id":1698,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1694,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1676,"src":"2831:9:26","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:26","memberName":"call","nodeType":"MemberAccess","src":"2831:14:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1696,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1678,"src":"2853:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:26"},{"expression":{"arguments":[{"id":1702,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"2882:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1701,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1705,"nodeType":"ExpressionStatement","src":"2874:78:26"}]},"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"1738:904:26","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1707,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:26","nodeType":"FunctionDefinition","parameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1676,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:26","nodeType":"VariableDeclaration","scope":1707,"src":"2666:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1675,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:26","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1678,"mutability":"mutable","name":"amount","nameLocation":"2701:6:26","nodeType":"VariableDeclaration","scope":1707,"src":"2693:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1677,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:26"},"returnParameters":{"id":1680,"nodeType":"ParameterList","parameters":[],"src":"2718:0:26"},"scope":1985,"src":"2647:312:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1724,"nodeType":"Block","src":"3790:96:26","statements":[{"expression":{"arguments":[{"id":1718,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"3829:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1719,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1712,"src":"3837:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1721,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1717,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1765,1809],"referencedDeclaration":1809,"src":"3807:21:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1716,"id":1723,"nodeType":"Return","src":"3800:79:26"}]},"documentation":{"id":1708,"nodeType":"StructuredDocumentation","src":"2965:731:26","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1725,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:26","nodeType":"FunctionDefinition","parameters":{"id":1713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1710,"mutability":"mutable","name":"target","nameLocation":"3731:6:26","nodeType":"VariableDeclaration","scope":1725,"src":"3723:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1709,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1712,"mutability":"mutable","name":"data","nameLocation":"3752:4:26","nodeType":"VariableDeclaration","scope":1725,"src":"3739:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1711,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:26"},"returnParameters":{"id":1716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1715,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1725,"src":"3776:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1714,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:26"},"scope":1985,"src":"3701:185:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1744,"nodeType":"Block","src":"4255:76:26","statements":[{"expression":{"arguments":[{"id":1738,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"4294:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1739,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"4302:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1741,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"4311:12:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1737,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1765,1809],"referencedDeclaration":1809,"src":"4272:21:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1736,"id":1743,"nodeType":"Return","src":"4265:59:26"}]},"documentation":{"id":1726,"nodeType":"StructuredDocumentation","src":"3892:211:26","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1745,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:26","nodeType":"FunctionDefinition","parameters":{"id":1733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1728,"mutability":"mutable","name":"target","nameLocation":"4147:6:26","nodeType":"VariableDeclaration","scope":1745,"src":"4139:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1727,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1730,"mutability":"mutable","name":"data","nameLocation":"4176:4:26","nodeType":"VariableDeclaration","scope":1745,"src":"4163:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1729,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1732,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:26","nodeType":"VariableDeclaration","scope":1745,"src":"4190:26:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1731,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:26"},"returnParameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1735,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1745,"src":"4241:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1734,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:26"},"scope":1985,"src":"4108:223:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1764,"nodeType":"Block","src":"4806:111:26","statements":[{"expression":{"arguments":[{"id":1758,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"4845:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1759,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"4853:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1760,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"4859:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1761,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1757,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1765,1809],"referencedDeclaration":1809,"src":"4823:21:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1756,"id":1763,"nodeType":"Return","src":"4816:94:26"}]},"documentation":{"id":1746,"nodeType":"StructuredDocumentation","src":"4337:351:26","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1765,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:26","nodeType":"FunctionDefinition","parameters":{"id":1753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1748,"mutability":"mutable","name":"target","nameLocation":"4732:6:26","nodeType":"VariableDeclaration","scope":1765,"src":"4724:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1747,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"data","nameLocation":"4753:4:26","nodeType":"VariableDeclaration","scope":1765,"src":"4740:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1749,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1752,"mutability":"mutable","name":"value","nameLocation":"4767:5:26","nodeType":"VariableDeclaration","scope":1765,"src":"4759:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1751,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:26"},"returnParameters":{"id":1756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1755,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1765,"src":"4792:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1754,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:26"},"scope":1985,"src":"4693:224:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1808,"nodeType":"Block","src":"5344:267:26","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1782,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1985","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1985","typeString":"library Address"}],"id":1781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1780,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:26","typeDescriptions":{}}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:26","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1785,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"5387:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1779,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1789,"nodeType":"ExpressionStatement","src":"5354:81:26"},{"assignments":[1791,1793],"declarations":[{"constant":false,"id":1791,"mutability":"mutable","name":"success","nameLocation":"5451:7:26","nodeType":"VariableDeclaration","scope":1808,"src":"5446:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1790,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1793,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:26","nodeType":"VariableDeclaration","scope":1808,"src":"5460:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1792,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1800,"initialValue":{"arguments":[{"id":1798,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1770,"src":"5513:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1794,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"5487:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:26","memberName":"call","nodeType":"MemberAccess","src":"5487:11:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1796,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"5506:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:26","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:26"},{"expression":{"arguments":[{"id":1802,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1768,"src":"5562:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1803,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"5570:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1804,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5579:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1805,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1774,"src":"5591:12:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1801,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"5535:26:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1778,"id":1807,"nodeType":"Return","src":"5528:76:26"}]},"documentation":{"id":1766,"nodeType":"StructuredDocumentation","src":"4923:237:26","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1809,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:26","nodeType":"FunctionDefinition","parameters":{"id":1775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1768,"mutability":"mutable","name":"target","nameLocation":"5213:6:26","nodeType":"VariableDeclaration","scope":1809,"src":"5205:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1767,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1770,"mutability":"mutable","name":"data","nameLocation":"5242:4:26","nodeType":"VariableDeclaration","scope":1809,"src":"5229:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1769,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1772,"mutability":"mutable","name":"value","nameLocation":"5264:5:26","nodeType":"VariableDeclaration","scope":1809,"src":"5256:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1774,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:26","nodeType":"VariableDeclaration","scope":1809,"src":"5279:26:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1773,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:26"},"returnParameters":{"id":1778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1777,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1809,"src":"5330:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1776,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:26"},"scope":1985,"src":"5165:446:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1825,"nodeType":"Block","src":"5888:97:26","statements":[{"expression":{"arguments":[{"id":1820,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"5924:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1821,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"5932:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1819,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1826,1855],"referencedDeclaration":1855,"src":"5905:18:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1818,"id":1824,"nodeType":"Return","src":"5898:80:26"}]},"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"5617:166:26","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1826,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:26","nodeType":"FunctionDefinition","parameters":{"id":1815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"target","nameLocation":"5824:6:26","nodeType":"VariableDeclaration","scope":1826,"src":"5816:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"data","nameLocation":"5845:4:26","nodeType":"VariableDeclaration","scope":1826,"src":"5832:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1813,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:26"},"returnParameters":{"id":1818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1826,"src":"5874:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1816,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:26"},"scope":1985,"src":"5788:197:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1854,"nodeType":"Block","src":"6327:168:26","statements":[{"assignments":[1839,1841],"declarations":[{"constant":false,"id":1839,"mutability":"mutable","name":"success","nameLocation":"6343:7:26","nodeType":"VariableDeclaration","scope":1854,"src":"6338:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1838,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1841,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:26","nodeType":"VariableDeclaration","scope":1854,"src":"6352:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1840,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1846,"initialValue":{"arguments":[{"id":1844,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1831,"src":"6397:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1842,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"6379:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:26","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:26","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:26"},{"expression":{"arguments":[{"id":1848,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1829,"src":"6446:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1849,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"6454:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1850,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"6463:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1851,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"6475:12:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1847,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"6419:26:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1837,"id":1853,"nodeType":"Return","src":"6412:76:26"}]},"documentation":{"id":1827,"nodeType":"StructuredDocumentation","src":"5991:173:26","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1855,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:26","nodeType":"FunctionDefinition","parameters":{"id":1834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1829,"mutability":"mutable","name":"target","nameLocation":"6214:6:26","nodeType":"VariableDeclaration","scope":1855,"src":"6206:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1828,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1831,"mutability":"mutable","name":"data","nameLocation":"6243:4:26","nodeType":"VariableDeclaration","scope":1855,"src":"6230:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1830,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1833,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:26","nodeType":"VariableDeclaration","scope":1855,"src":"6257:26:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1832,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:26"},"returnParameters":{"id":1837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1855,"src":"6313:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1835,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:26"},"scope":1985,"src":"6169:326:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1871,"nodeType":"Block","src":"6771:101:26","statements":[{"expression":{"arguments":[{"id":1866,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"6809:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1867,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1860,"src":"6817:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1865,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1872,1901],"referencedDeclaration":1901,"src":"6788:20:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1864,"id":1870,"nodeType":"Return","src":"6781:84:26"}]},"documentation":{"id":1856,"nodeType":"StructuredDocumentation","src":"6501:168:26","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1872,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:26","nodeType":"FunctionDefinition","parameters":{"id":1861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1858,"mutability":"mutable","name":"target","nameLocation":"6712:6:26","nodeType":"VariableDeclaration","scope":1872,"src":"6704:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1857,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1860,"mutability":"mutable","name":"data","nameLocation":"6733:4:26","nodeType":"VariableDeclaration","scope":1872,"src":"6720:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1859,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:26"},"returnParameters":{"id":1864,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1863,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1872,"src":"6757:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1862,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:26"},"scope":1985,"src":"6674:198:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1900,"nodeType":"Block","src":"7213:170:26","statements":[{"assignments":[1885,1887],"declarations":[{"constant":false,"id":1885,"mutability":"mutable","name":"success","nameLocation":"7229:7:26","nodeType":"VariableDeclaration","scope":1900,"src":"7224:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1884,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1887,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:26","nodeType":"VariableDeclaration","scope":1900,"src":"7238:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1886,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1892,"initialValue":{"arguments":[{"id":1890,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"7285:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1888,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"7265:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:26","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:26","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:26"},{"expression":{"arguments":[{"id":1894,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"7334:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1895,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"7342:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1896,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"7351:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1897,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1879,"src":"7363:12:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1893,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1940,"src":"7307:26:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1898,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1883,"id":1899,"nodeType":"Return","src":"7300:76:26"}]},"documentation":{"id":1873,"nodeType":"StructuredDocumentation","src":"6878:175:26","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1901,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:26","nodeType":"FunctionDefinition","parameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1875,"mutability":"mutable","name":"target","nameLocation":"7105:6:26","nodeType":"VariableDeclaration","scope":1901,"src":"7097:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1874,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1877,"mutability":"mutable","name":"data","nameLocation":"7134:4:26","nodeType":"VariableDeclaration","scope":1901,"src":"7121:17:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1876,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1879,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:26","nodeType":"VariableDeclaration","scope":1901,"src":"7148:26:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1878,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:26"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1901,"src":"7199:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1881,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:26"},"scope":1985,"src":"7058:325:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1939,"nodeType":"Block","src":"7865:434:26","statements":[{"condition":{"id":1915,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"7879:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1937,"nodeType":"Block","src":"8235:58:26","statements":[{"expression":{"arguments":[{"id":1933,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"8257:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1934,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1910,"src":"8269:12:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1932,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"8249:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1936,"nodeType":"ExpressionStatement","src":"8249:33:26"}]},"id":1938,"nodeType":"IfStatement","src":"7875:418:26","trueBody":{"id":1931,"nodeType":"Block","src":"7888:341:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1916,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"7906:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:26","memberName":"length","nodeType":"MemberAccess","src":"7906:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1928,"nodeType":"IfStatement","src":"7902:286:26","trueBody":{"id":1927,"nodeType":"Block","src":"7930:258:26","statements":[{"expression":{"arguments":[{"arguments":[{"id":1922,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1904,"src":"8132:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1921,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"8121:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1920,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1926,"nodeType":"ExpressionStatement","src":"8113:60:26"}]}},{"expression":{"id":1929,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"8208:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1914,"id":1930,"nodeType":"Return","src":"8201:17:26"}]}}]},"documentation":{"id":1902,"nodeType":"StructuredDocumentation","src":"7389:277:26","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1940,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:26","nodeType":"FunctionDefinition","parameters":{"id":1911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1904,"mutability":"mutable","name":"target","nameLocation":"7724:6:26","nodeType":"VariableDeclaration","scope":1940,"src":"7716:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1903,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1906,"mutability":"mutable","name":"success","nameLocation":"7745:7:26","nodeType":"VariableDeclaration","scope":1940,"src":"7740:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1905,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1908,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:26","nodeType":"VariableDeclaration","scope":1940,"src":"7762:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1907,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1910,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:26","nodeType":"VariableDeclaration","scope":1940,"src":"7795:26:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1909,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:26"},"returnParameters":{"id":1914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1940,"src":"7851:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1912,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:26"},"scope":1985,"src":"7671:628:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1963,"nodeType":"Block","src":"8680:135:26","statements":[{"condition":{"id":1952,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1943,"src":"8694:7:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1961,"nodeType":"Block","src":"8751:58:26","statements":[{"expression":{"arguments":[{"id":1957,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"8773:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1958,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"8785:12:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1956,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"8765:7:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1960,"nodeType":"ExpressionStatement","src":"8765:33:26"}]},"id":1962,"nodeType":"IfStatement","src":"8690:119:26","trueBody":{"id":1955,"nodeType":"Block","src":"8703:42:26","statements":[{"expression":{"id":1953,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1945,"src":"8724:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1951,"id":1954,"nodeType":"Return","src":"8717:17:26"}]}}]},"documentation":{"id":1941,"nodeType":"StructuredDocumentation","src":"8305:210:26","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1964,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:26","nodeType":"FunctionDefinition","parameters":{"id":1948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1943,"mutability":"mutable","name":"success","nameLocation":"8560:7:26","nodeType":"VariableDeclaration","scope":1964,"src":"8555:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1942,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1945,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:26","nodeType":"VariableDeclaration","scope":1964,"src":"8577:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1944,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1947,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:26","nodeType":"VariableDeclaration","scope":1964,"src":"8610:26:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1946,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:26"},"returnParameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1964,"src":"8666:12:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1949,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:26"},"scope":1985,"src":"8520:295:26","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1983,"nodeType":"Block","src":"8904:457:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1971,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"8980:10:26","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:26","memberName":"length","nodeType":"MemberAccess","src":"8980:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1981,"nodeType":"Block","src":"9310:45:26","statements":[{"expression":{"arguments":[{"id":1978,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"9331:12:26","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1977,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:26","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1980,"nodeType":"ExpressionStatement","src":"9324:20:26"}]},"id":1982,"nodeType":"IfStatement","src":"8976:379:26","trueBody":{"id":1976,"nodeType":"Block","src":"9003:301:26","statements":[{"AST":{"nativeSrc":"9161:133:26","nodeType":"YulBlock","src":"9161:133:26","statements":[{"nativeSrc":"9179:40:26","nodeType":"YulVariableDeclaration","src":"9179:40:26","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:26","nodeType":"YulIdentifier","src":"9208:10:26"}],"functionName":{"name":"mload","nativeSrc":"9202:5:26","nodeType":"YulIdentifier","src":"9202:5:26"},"nativeSrc":"9202:17:26","nodeType":"YulFunctionCall","src":"9202:17:26"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:26","nodeType":"YulTypedName","src":"9183:15:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:26","nodeType":"YulLiteral","src":"9247:2:26","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:26","nodeType":"YulIdentifier","src":"9251:10:26"}],"functionName":{"name":"add","nativeSrc":"9243:3:26","nodeType":"YulIdentifier","src":"9243:3:26"},"nativeSrc":"9243:19:26","nodeType":"YulFunctionCall","src":"9243:19:26"},{"name":"returndata_size","nativeSrc":"9264:15:26","nodeType":"YulIdentifier","src":"9264:15:26"}],"functionName":{"name":"revert","nativeSrc":"9236:6:26","nodeType":"YulIdentifier","src":"9236:6:26"},"nativeSrc":"9236:44:26","nodeType":"YulFunctionCall","src":"9236:44:26"},"nativeSrc":"9236:44:26","nodeType":"YulExpressionStatement","src":"9236:44:26"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":1966,"isOffset":false,"isSlot":false,"src":"9208:10:26","valueSize":1},{"declaration":1966,"isOffset":false,"isSlot":false,"src":"9251:10:26","valueSize":1}],"id":1975,"nodeType":"InlineAssembly","src":"9152:142:26"}]}}]},"id":1984,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:26","nodeType":"FunctionDefinition","parameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1966,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:26","nodeType":"VariableDeclaration","scope":1984,"src":"8838:23:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1965,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1968,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:26","nodeType":"VariableDeclaration","scope":1984,"src":"8863:26:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1967,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:26","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:26"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[],"src":"8904:0:26"},"scope":1985,"src":"8821:540:26","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1986,"src":"194:9169:26","usedErrors":[],"usedEvents":[]}],"src":"101:9263:26"},"id":26},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2007]},"id":2008,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1987,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:27"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1988,"nodeType":"StructuredDocumentation","src":"111:496:27","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2007,"linearizedBaseContracts":[2007],"name":"Context","nameLocation":"626:7:27","nodeType":"ContractDefinition","nodes":[{"body":{"id":1996,"nodeType":"Block","src":"702:34:27","statements":[{"expression":{"expression":{"id":1993,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:27","memberName":"sender","nodeType":"MemberAccess","src":"719:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1992,"id":1995,"nodeType":"Return","src":"712:17:27"}]},"id":1997,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:27","nodeType":"FunctionDefinition","parameters":{"id":1989,"nodeType":"ParameterList","parameters":[],"src":"659:2:27"},"returnParameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1997,"src":"693:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:27"},"scope":2007,"src":"640:96:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2005,"nodeType":"Block","src":"809:32:27","statements":[{"expression":{"expression":{"id":2002,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:27","memberName":"data","nodeType":"MemberAccess","src":"826:8:27","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2001,"id":2004,"nodeType":"Return","src":"819:15:27"}]},"id":2006,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:27","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[],"src":"759:2:27"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2006,"src":"793:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1999,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:27"},"scope":2007,"src":"742:99:27","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2008,"src":"608:235:27","usedErrors":[],"usedEvents":[]}],"src":"86:758:27"},"id":27},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2117]},"id":2118,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2009,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:28"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2010,"nodeType":"StructuredDocumentation","src":"218:1201:28","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":2117,"linearizedBaseContracts":[2117],"name":"StorageSlot","nameLocation":"1428:11:28","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2013,"members":[{"constant":false,"id":2012,"mutability":"mutable","name":"value","nameLocation":"1483:5:28","nodeType":"VariableDeclaration","scope":2013,"src":"1475:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2011,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:28","nodeType":"StructDefinition","scope":2117,"src":"1446:49:28","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2016,"members":[{"constant":false,"id":2015,"mutability":"mutable","name":"value","nameLocation":"1535:5:28","nodeType":"VariableDeclaration","scope":2016,"src":"1530:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2014,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:28","nodeType":"StructDefinition","scope":2117,"src":"1501:46:28","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2019,"members":[{"constant":false,"id":2018,"mutability":"mutable","name":"value","nameLocation":"1590:5:28","nodeType":"VariableDeclaration","scope":2019,"src":"1582:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2017,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:28","nodeType":"StructDefinition","scope":2117,"src":"1553:49:28","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2022,"members":[{"constant":false,"id":2021,"mutability":"mutable","name":"value","nameLocation":"1645:5:28","nodeType":"VariableDeclaration","scope":2022,"src":"1637:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2020,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:28","nodeType":"StructDefinition","scope":2117,"src":"1608:49:28","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2025,"members":[{"constant":false,"id":2024,"mutability":"mutable","name":"value","nameLocation":"1698:5:28","nodeType":"VariableDeclaration","scope":2025,"src":"1691:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2023,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:28","nodeType":"StructDefinition","scope":2117,"src":"1663:47:28","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2028,"members":[{"constant":false,"id":2027,"mutability":"mutable","name":"value","nameLocation":"1749:5:28","nodeType":"VariableDeclaration","scope":2028,"src":"1743:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2026,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:28","nodeType":"StructDefinition","scope":2117,"src":"1716:45:28","visibility":"public"},{"body":{"id":2038,"nodeType":"Block","src":"1943:106:28","statements":[{"AST":{"nativeSrc":"2005:38:28","nodeType":"YulBlock","src":"2005:38:28","statements":[{"nativeSrc":"2019:14:28","nodeType":"YulAssignment","src":"2019:14:28","value":{"name":"slot","nativeSrc":"2029:4:28","nodeType":"YulIdentifier","src":"2029:4:28"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:28","nodeType":"YulIdentifier","src":"2019:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2035,"isOffset":false,"isSlot":true,"src":"2019:6:28","suffix":"slot","valueSize":1},{"declaration":2031,"isOffset":false,"isSlot":false,"src":"2029:4:28","valueSize":1}],"id":2037,"nodeType":"InlineAssembly","src":"1996:47:28"}]},"documentation":{"id":2029,"nodeType":"StructuredDocumentation","src":"1767:87:28","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2039,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:28","nodeType":"FunctionDefinition","parameters":{"id":2032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2031,"mutability":"mutable","name":"slot","nameLocation":"1891:4:28","nodeType":"VariableDeclaration","scope":2039,"src":"1883:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2030,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:28"},"returnParameters":{"id":2036,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"r","nameLocation":"1940:1:28","nodeType":"VariableDeclaration","scope":2039,"src":"1920:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2013_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2034,"nodeType":"UserDefinedTypeName","pathNode":{"id":2033,"name":"AddressSlot","nameLocations":["1920:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2013,"src":"1920:11:28"},"referencedDeclaration":2013,"src":"1920:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2013_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:28"},"scope":2117,"src":"1859:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2049,"nodeType":"Block","src":"2231:106:28","statements":[{"AST":{"nativeSrc":"2293:38:28","nodeType":"YulBlock","src":"2293:38:28","statements":[{"nativeSrc":"2307:14:28","nodeType":"YulAssignment","src":"2307:14:28","value":{"name":"slot","nativeSrc":"2317:4:28","nodeType":"YulIdentifier","src":"2317:4:28"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:28","nodeType":"YulIdentifier","src":"2307:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2046,"isOffset":false,"isSlot":true,"src":"2307:6:28","suffix":"slot","valueSize":1},{"declaration":2042,"isOffset":false,"isSlot":false,"src":"2317:4:28","valueSize":1}],"id":2048,"nodeType":"InlineAssembly","src":"2284:47:28"}]},"documentation":{"id":2040,"nodeType":"StructuredDocumentation","src":"2055:87:28","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2050,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:28","nodeType":"FunctionDefinition","parameters":{"id":2043,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2042,"mutability":"mutable","name":"slot","nameLocation":"2179:4:28","nodeType":"VariableDeclaration","scope":2050,"src":"2171:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:28"},"returnParameters":{"id":2047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2046,"mutability":"mutable","name":"r","nameLocation":"2228:1:28","nodeType":"VariableDeclaration","scope":2050,"src":"2208:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2016_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2045,"nodeType":"UserDefinedTypeName","pathNode":{"id":2044,"name":"BooleanSlot","nameLocations":["2208:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2016,"src":"2208:11:28"},"referencedDeclaration":2016,"src":"2208:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2016_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:28"},"scope":2117,"src":"2147:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2060,"nodeType":"Block","src":"2519:106:28","statements":[{"AST":{"nativeSrc":"2581:38:28","nodeType":"YulBlock","src":"2581:38:28","statements":[{"nativeSrc":"2595:14:28","nodeType":"YulAssignment","src":"2595:14:28","value":{"name":"slot","nativeSrc":"2605:4:28","nodeType":"YulIdentifier","src":"2605:4:28"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:28","nodeType":"YulIdentifier","src":"2595:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2057,"isOffset":false,"isSlot":true,"src":"2595:6:28","suffix":"slot","valueSize":1},{"declaration":2053,"isOffset":false,"isSlot":false,"src":"2605:4:28","valueSize":1}],"id":2059,"nodeType":"InlineAssembly","src":"2572:47:28"}]},"documentation":{"id":2051,"nodeType":"StructuredDocumentation","src":"2343:87:28","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2061,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:28","nodeType":"FunctionDefinition","parameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"slot","nameLocation":"2467:4:28","nodeType":"VariableDeclaration","scope":2061,"src":"2459:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:28"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"r","nameLocation":"2516:1:28","nodeType":"VariableDeclaration","scope":2061,"src":"2496:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2019_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2056,"nodeType":"UserDefinedTypeName","pathNode":{"id":2055,"name":"Bytes32Slot","nameLocations":["2496:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2019,"src":"2496:11:28"},"referencedDeclaration":2019,"src":"2496:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2019_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:28"},"scope":2117,"src":"2435:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2071,"nodeType":"Block","src":"2807:106:28","statements":[{"AST":{"nativeSrc":"2869:38:28","nodeType":"YulBlock","src":"2869:38:28","statements":[{"nativeSrc":"2883:14:28","nodeType":"YulAssignment","src":"2883:14:28","value":{"name":"slot","nativeSrc":"2893:4:28","nodeType":"YulIdentifier","src":"2893:4:28"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:28","nodeType":"YulIdentifier","src":"2883:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2068,"isOffset":false,"isSlot":true,"src":"2883:6:28","suffix":"slot","valueSize":1},{"declaration":2064,"isOffset":false,"isSlot":false,"src":"2893:4:28","valueSize":1}],"id":2070,"nodeType":"InlineAssembly","src":"2860:47:28"}]},"documentation":{"id":2062,"nodeType":"StructuredDocumentation","src":"2631:87:28","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2072,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:28","nodeType":"FunctionDefinition","parameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"slot","nameLocation":"2755:4:28","nodeType":"VariableDeclaration","scope":2072,"src":"2747:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2063,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:28"},"returnParameters":{"id":2069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2068,"mutability":"mutable","name":"r","nameLocation":"2804:1:28","nodeType":"VariableDeclaration","scope":2072,"src":"2784:21:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2022_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2067,"nodeType":"UserDefinedTypeName","pathNode":{"id":2066,"name":"Uint256Slot","nameLocations":["2784:11:28"],"nodeType":"IdentifierPath","referencedDeclaration":2022,"src":"2784:11:28"},"referencedDeclaration":2022,"src":"2784:11:28","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2022_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:28"},"scope":2117,"src":"2723:190:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2082,"nodeType":"Block","src":"3092:106:28","statements":[{"AST":{"nativeSrc":"3154:38:28","nodeType":"YulBlock","src":"3154:38:28","statements":[{"nativeSrc":"3168:14:28","nodeType":"YulAssignment","src":"3168:14:28","value":{"name":"slot","nativeSrc":"3178:4:28","nodeType":"YulIdentifier","src":"3178:4:28"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:28","nodeType":"YulIdentifier","src":"3168:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2079,"isOffset":false,"isSlot":true,"src":"3168:6:28","suffix":"slot","valueSize":1},{"declaration":2075,"isOffset":false,"isSlot":false,"src":"3178:4:28","valueSize":1}],"id":2081,"nodeType":"InlineAssembly","src":"3145:47:28"}]},"documentation":{"id":2073,"nodeType":"StructuredDocumentation","src":"2919:86:28","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2083,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:28","nodeType":"FunctionDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2075,"mutability":"mutable","name":"slot","nameLocation":"3041:4:28","nodeType":"VariableDeclaration","scope":2083,"src":"3033:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2074,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:28"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"r","nameLocation":"3089:1:28","nodeType":"VariableDeclaration","scope":2083,"src":"3070:20:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2025_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2078,"nodeType":"UserDefinedTypeName","pathNode":{"id":2077,"name":"StringSlot","nameLocations":["3070:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":2025,"src":"3070:10:28"},"referencedDeclaration":2025,"src":"3070:10:28","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2025_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:28"},"scope":2117,"src":"3010:188:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2093,"nodeType":"Block","src":"3400:112:28","statements":[{"AST":{"nativeSrc":"3462:44:28","nodeType":"YulBlock","src":"3462:44:28","statements":[{"nativeSrc":"3476:20:28","nodeType":"YulAssignment","src":"3476:20:28","value":{"name":"store.slot","nativeSrc":"3486:10:28","nodeType":"YulIdentifier","src":"3486:10:28"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:28","nodeType":"YulIdentifier","src":"3476:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2090,"isOffset":false,"isSlot":true,"src":"3476:6:28","suffix":"slot","valueSize":1},{"declaration":2086,"isOffset":false,"isSlot":true,"src":"3486:10:28","suffix":"slot","valueSize":1}],"id":2092,"nodeType":"InlineAssembly","src":"3453:53:28"}]},"documentation":{"id":2084,"nodeType":"StructuredDocumentation","src":"3204:101:28","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2094,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:28","nodeType":"FunctionDefinition","parameters":{"id":2087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2086,"mutability":"mutable","name":"store","nameLocation":"3348:5:28","nodeType":"VariableDeclaration","scope":2094,"src":"3333:20:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2085,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:28"},"returnParameters":{"id":2091,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2090,"mutability":"mutable","name":"r","nameLocation":"3397:1:28","nodeType":"VariableDeclaration","scope":2094,"src":"3378:20:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2025_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2089,"nodeType":"UserDefinedTypeName","pathNode":{"id":2088,"name":"StringSlot","nameLocations":["3378:10:28"],"nodeType":"IdentifierPath","referencedDeclaration":2025,"src":"3378:10:28"},"referencedDeclaration":2025,"src":"3378:10:28","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2025_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:28"},"scope":2117,"src":"3310:202:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2104,"nodeType":"Block","src":"3688:106:28","statements":[{"AST":{"nativeSrc":"3750:38:28","nodeType":"YulBlock","src":"3750:38:28","statements":[{"nativeSrc":"3764:14:28","nodeType":"YulAssignment","src":"3764:14:28","value":{"name":"slot","nativeSrc":"3774:4:28","nodeType":"YulIdentifier","src":"3774:4:28"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:28","nodeType":"YulIdentifier","src":"3764:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2101,"isOffset":false,"isSlot":true,"src":"3764:6:28","suffix":"slot","valueSize":1},{"declaration":2097,"isOffset":false,"isSlot":false,"src":"3774:4:28","valueSize":1}],"id":2103,"nodeType":"InlineAssembly","src":"3741:47:28"}]},"documentation":{"id":2095,"nodeType":"StructuredDocumentation","src":"3518:85:28","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2105,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:28","nodeType":"FunctionDefinition","parameters":{"id":2098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2097,"mutability":"mutable","name":"slot","nameLocation":"3638:4:28","nodeType":"VariableDeclaration","scope":2105,"src":"3630:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:28"},"returnParameters":{"id":2102,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"r","nameLocation":"3685:1:28","nodeType":"VariableDeclaration","scope":2105,"src":"3667:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2028_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2100,"nodeType":"UserDefinedTypeName","pathNode":{"id":2099,"name":"BytesSlot","nameLocations":["3667:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":2028,"src":"3667:9:28"},"referencedDeclaration":2028,"src":"3667:9:28","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2028_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:28"},"scope":2117,"src":"3608:186:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2115,"nodeType":"Block","src":"3991:112:28","statements":[{"AST":{"nativeSrc":"4053:44:28","nodeType":"YulBlock","src":"4053:44:28","statements":[{"nativeSrc":"4067:20:28","nodeType":"YulAssignment","src":"4067:20:28","value":{"name":"store.slot","nativeSrc":"4077:10:28","nodeType":"YulIdentifier","src":"4077:10:28"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:28","nodeType":"YulIdentifier","src":"4067:6:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":2112,"isOffset":false,"isSlot":true,"src":"4067:6:28","suffix":"slot","valueSize":1},{"declaration":2108,"isOffset":false,"isSlot":true,"src":"4077:10:28","suffix":"slot","valueSize":1}],"id":2114,"nodeType":"InlineAssembly","src":"4044:53:28"}]},"documentation":{"id":2106,"nodeType":"StructuredDocumentation","src":"3800:99:28","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2116,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:28","nodeType":"FunctionDefinition","parameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"store","nameLocation":"3940:5:28","nodeType":"VariableDeclaration","scope":2116,"src":"3926:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2107,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:28"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2112,"mutability":"mutable","name":"r","nameLocation":"3988:1:28","nodeType":"VariableDeclaration","scope":2116,"src":"3970:19:28","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2028_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2111,"nodeType":"UserDefinedTypeName","pathNode":{"id":2110,"name":"BytesSlot","nameLocations":["3970:9:28"],"nodeType":"IdentifierPath","referencedDeclaration":2028,"src":"3970:9:28"},"referencedDeclaration":2028,"src":"3970:9:28","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2028_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:28"},"scope":2117,"src":"3904:199:28","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2118,"src":"1420:2685:28","usedErrors":[],"usedEvents":[]}],"src":"193:3913:28"},"id":28},"contracts/MyContract.sol":{"ast":{"absolutePath":"contracts/MyContract.sol","exportedSymbols":{"Context":[2007],"ContractOwnership":[40],"ContractOwnershipStorage":[380],"ForwarderRegistryContext":[577],"ForwarderRegistryContextBase":[697],"IForwarderRegistry":[723],"MyContract":[2245],"TokenRecovery":[820]},"id":2246,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2119,"literals":["solidity","0.8",".21"],"nodeType":"PragmaDirective","src":"32:23:29"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2121,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2246,"sourceUnit":724,"src":"57:114:29","symbolAliases":[{"foreign":{"id":2120,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"65:18:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2123,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2246,"sourceUnit":381,"src":"172:125:29","symbolAliases":[{"foreign":{"id":2122,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"180:24:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2125,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2246,"sourceUnit":41,"src":"298:101:29","symbolAliases":[{"foreign":{"id":2124,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"306:17:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","id":2127,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2246,"sourceUnit":821,"src":"400:95:29","symbolAliases":[{"foreign":{"id":2126,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"408:13:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2129,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2246,"sourceUnit":2008,"src":"496:66:29","symbolAliases":[{"foreign":{"id":2128,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"504:7:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2246,"sourceUnit":698,"src":"563:128:29","symbolAliases":[{"foreign":{"id":2130,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"571:28:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2246,"sourceUnit":578,"src":"692:115:29","symbolAliases":[{"foreign":{"id":2132,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"700:24:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2134,"name":"TokenRecovery","nameLocations":["832:13:29"],"nodeType":"IdentifierPath","referencedDeclaration":820,"src":"832:13:29"},"id":2135,"nodeType":"InheritanceSpecifier","src":"832:13:29"},{"baseName":{"id":2136,"name":"ForwarderRegistryContext","nameLocations":["847:24:29"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"847:24:29"},"id":2137,"nodeType":"InheritanceSpecifier","src":"847:24:29"}],"canonicalName":"MyContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2245,"linearizedBaseContracts":[2245,577,709,697,820,40,410,427,88,1041,2007,133,113],"name":"MyContract","nameLocation":"818:10:29","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2141,"libraryName":{"id":2138,"name":"ContractOwnershipStorage","nameLocations":["884:24:29"],"nodeType":"IdentifierPath","referencedDeclaration":380,"src":"884:24:29"},"nodeType":"UsingForDirective","src":"878:67:29","typeName":{"id":2140,"nodeType":"UserDefinedTypeName","pathNode":{"id":2139,"name":"ContractOwnershipStorage.Layout","nameLocations":["913:24:29","938:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"913:31:29"},"referencedDeclaration":157,"src":"913:31:29","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"functionSelector":"2bb14104","id":2143,"mutability":"mutable","name":"myData","nameLocation":"966:6:29","nodeType":"VariableDeclaration","scope":2245,"src":"951:21:29","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2142,"name":"address","nodeType":"ElementaryTypeName","src":"951:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec","id":2147,"name":"DataSet","nameLocation":"985:7:29","nodeType":"EventDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2145,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1001:4:29","nodeType":"VariableDeclaration","scope":2147,"src":"993:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2144,"name":"address","nodeType":"ElementaryTypeName","src":"993:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"992:14:29"},"src":"979:28:29"},{"errorSelector":"f6a5e704","id":2149,"name":"InvalidZeroData","nameLocation":"1019:15:29","nodeType":"ErrorDefinition","parameters":{"id":2148,"nodeType":"ParameterList","parameters":[],"src":"1034:2:29"},"src":"1013:24:29"},{"body":{"id":2182,"nodeType":"Block","src":"1181:116:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2164,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"1195:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1211:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2166,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1203:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2165,"name":"address","nodeType":"ElementaryTypeName","src":"1203:7:29","typeDescriptions":{}}},"id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1203:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1195:18:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2173,"nodeType":"IfStatement","src":"1191:48:29","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2170,"name":"InvalidZeroData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"1222:15:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1222:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2172,"nodeType":"RevertStatement","src":"1215:24:29"}},{"expression":{"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2174,"name":"myData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"1249:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2175,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"1258:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1249:13:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2177,"nodeType":"ExpressionStatement","src":"1249:13:29"},{"eventCall":{"arguments":[{"id":2179,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"1285:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2178,"name":"DataSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2147,"src":"1277:7:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1277:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2181,"nodeType":"EmitStatement","src":"1272:18:29"}]},"id":2183,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2157,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1125:3:29","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1129:6:29","memberName":"sender","nodeType":"MemberAccess","src":"1125:10:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2159,"kind":"baseConstructorSpecifier","modifierName":{"id":2156,"name":"ContractOwnership","nameLocations":["1107:17:29"],"nodeType":"IdentifierPath","referencedDeclaration":40,"src":"1107:17:29"},"nodeType":"ModifierInvocation","src":"1107:29:29"},{"arguments":[{"id":2161,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"1162:17:29","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}}],"id":2162,"kind":"baseConstructorSpecifier","modifierName":{"id":2160,"name":"ForwarderRegistryContext","nameLocations":["1137:24:29"],"nodeType":"IdentifierPath","referencedDeclaration":577,"src":"1137:24:29"},"nodeType":"ModifierInvocation","src":"1137:43:29"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2151,"mutability":"mutable","name":"data","nameLocation":"1063:4:29","nodeType":"VariableDeclaration","scope":2183,"src":"1055:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2150,"name":"address","nodeType":"ElementaryTypeName","src":"1055:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2154,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"1088:17:29","nodeType":"VariableDeclaration","scope":2183,"src":"1069:36:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"},"typeName":{"id":2153,"nodeType":"UserDefinedTypeName","pathNode":{"id":2152,"name":"IForwarderRegistry","nameLocations":["1069:18:29"],"nodeType":"IdentifierPath","referencedDeclaration":723,"src":"1069:18:29"},"referencedDeclaration":723,"src":"1069:18:29","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"1054:52:29"},"returnParameters":{"id":2163,"nodeType":"ParameterList","parameters":[],"src":"1181:0:29"},"scope":2245,"src":"1043:254:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2215,"nodeType":"Block","src":"1343:197:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2188,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"1357:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1373:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2190,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1365:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2189,"name":"address","nodeType":"ElementaryTypeName","src":"1365:7:29","typeDescriptions":{}}},"id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1365:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1357:18:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2197,"nodeType":"IfStatement","src":"1353:48:29","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2194,"name":"InvalidZeroData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"1384:15:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1384:17:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2196,"nodeType":"RevertStatement","src":"1377:24:29"}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2203,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2230],"referencedDeclaration":2230,"src":"1468:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1468:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2198,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1411:24:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$380_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1436:6:29","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":379,"src":"1411:31:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1411:33:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1445:22:29","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":346,"src":"1411:56:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1411:70:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2206,"nodeType":"ExpressionStatement","src":"1411:70:29"},{"expression":{"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2207,"name":"myData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2143,"src":"1492:6:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2208,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"1501:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1492:13:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2210,"nodeType":"ExpressionStatement","src":"1492:13:29"},{"eventCall":{"arguments":[{"id":2212,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"1528:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2211,"name":"DataSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2147,"src":"1520:7:29","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1520:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2214,"nodeType":"EmitStatement","src":"1515:18:29"}]},"functionSelector":"61dfdae6","id":2216,"implemented":true,"kind":"function","modifiers":[],"name":"setData","nameLocation":"1312:7:29","nodeType":"FunctionDefinition","parameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2185,"mutability":"mutable","name":"data","nameLocation":"1328:4:29","nodeType":"VariableDeclaration","scope":2216,"src":"1320:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2184,"name":"address","nodeType":"ElementaryTypeName","src":"1320:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1319:14:29"},"returnParameters":{"id":2187,"nodeType":"ParameterList","parameters":[],"src":"1343:0:29"},"scope":2245,"src":"1303:237:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[648,1997],"body":{"id":2229,"nodeType":"Block","src":"1705:65:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2225,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"1722:28:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$697_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1751:10:29","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":648,"src":"1722:39:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:41:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2224,"id":2228,"nodeType":"Return","src":"1715:48:29"}]},"documentation":{"id":2217,"nodeType":"StructuredDocumentation","src":"1546:44:29","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2230,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"1604:10:29","nodeType":"FunctionDefinition","overrides":{"id":2221,"nodeType":"OverrideSpecifier","overrides":[{"id":2219,"name":"Context","nameLocations":["1648:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":2007,"src":"1648:7:29"},{"id":2220,"name":"ForwarderRegistryContextBase","nameLocations":["1657:28:29"],"nodeType":"IdentifierPath","referencedDeclaration":697,"src":"1657:28:29"}],"src":"1639:47:29"},"parameters":{"id":2218,"nodeType":"ParameterList","parameters":[],"src":"1614:2:29"},"returnParameters":{"id":2224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2230,"src":"1696:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2222,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1695:9:29"},"scope":2245,"src":"1595:175:29","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[696,2006],"body":{"id":2243,"nodeType":"Block","src":"1940:63:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2239,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":697,"src":"1957:28:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$697_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1986:8:29","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":696,"src":"1957:37:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:39:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2238,"id":2242,"nodeType":"Return","src":"1950:46:29"}]},"documentation":{"id":2231,"nodeType":"StructuredDocumentation","src":"1776:44:29","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2244,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1834:8:29","nodeType":"FunctionDefinition","overrides":{"id":2235,"nodeType":"OverrideSpecifier","overrides":[{"id":2233,"name":"Context","nameLocations":["1876:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":2007,"src":"1876:7:29"},{"id":2234,"name":"ForwarderRegistryContextBase","nameLocations":["1885:28:29"],"nodeType":"IdentifierPath","referencedDeclaration":697,"src":"1885:28:29"}],"src":"1867:47:29"},"parameters":{"id":2232,"nodeType":"ParameterList","parameters":[],"src":"1842:2:29"},"returnParameters":{"id":2238,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2237,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2244,"src":"1924:14:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2236,"name":"bytes","nodeType":"ElementaryTypeName","src":"1924:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1923:16:29"},"scope":2245,"src":"1825:178:29","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2246,"src":"809:1196:29","usedErrors":[7,95,415,2149],"usedEvents":[112,2147]}],"src":"32:1974:29"},"id":29},"contracts/mocks/MyContractMock.sol":{"ast":{"absolutePath":"contracts/mocks/MyContractMock.sol","exportedSymbols":{"IForwarderRegistry":[723],"MyContract":[2245],"MyContractMock":[2276]},"id":2277,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2247,"literals":["solidity","0.8",".21"],"nodeType":"PragmaDirective","src":"32:23:30"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2249,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2277,"sourceUnit":724,"src":"57:114:30","symbolAliases":[{"foreign":{"id":2248,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"65:18:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/MyContract.sol","file":"./../MyContract.sol","id":2251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2277,"sourceUnit":2246,"src":"172:47:30","symbolAliases":[{"foreign":{"id":2250,"name":"MyContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2245,"src":"180:10:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2252,"name":"MyContract","nameLocations":["248:10:30"],"nodeType":"IdentifierPath","referencedDeclaration":2245,"src":"248:10:30"},"id":2253,"nodeType":"InheritanceSpecifier","src":"248:10:30"}],"canonicalName":"MyContractMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2276,"linearizedBaseContracts":[2276,2245,577,709,697,820,40,410,427,88,1041,2007,133,113],"name":"MyContractMock","nameLocation":"230:14:30","nodeType":"ContractDefinition","nodes":[{"body":{"id":2265,"nodeType":"Block","src":"365:2:30","statements":[]},"id":2266,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2261,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"340:4:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2262,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2258,"src":"346:17:30","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}}],"id":2263,"kind":"baseConstructorSpecifier","modifierName":{"id":2260,"name":"MyContract","nameLocations":["329:10:30"],"nodeType":"IdentifierPath","referencedDeclaration":2245,"src":"329:10:30"},"nodeType":"ModifierInvocation","src":"329:35:30"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2255,"mutability":"mutable","name":"data","nameLocation":"285:4:30","nodeType":"VariableDeclaration","scope":2266,"src":"277:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2254,"name":"address","nodeType":"ElementaryTypeName","src":"277:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2258,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"310:17:30","nodeType":"VariableDeclaration","scope":2266,"src":"291:36:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"},"typeName":{"id":2257,"nodeType":"UserDefinedTypeName","pathNode":{"id":2256,"name":"IForwarderRegistry","nameLocations":["291:18:30"],"nodeType":"IdentifierPath","referencedDeclaration":723,"src":"291:18:30"},"referencedDeclaration":723,"src":"291:18:30","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$723","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"276:52:30"},"returnParameters":{"id":2264,"nodeType":"ParameterList","parameters":[],"src":"365:0:30"},"scope":2276,"src":"265:102:30","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2274,"nodeType":"Block","src":"433:34:30","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2271,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[2244],"referencedDeclaration":2244,"src":"450:8:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"450:10:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2270,"id":2273,"nodeType":"Return","src":"443:17:30"}]},"functionSelector":"31e66e1e","id":2275,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"382:9:30","nodeType":"FunctionDefinition","parameters":{"id":2267,"nodeType":"ParameterList","parameters":[],"src":"391:2:30"},"returnParameters":{"id":2270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2275,"src":"417:14:30","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2268,"name":"bytes","nodeType":"ElementaryTypeName","src":"417:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"416:16:30"},"scope":2276,"src":"373:94:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2277,"src":"221:248:30","usedErrors":[7,95,415,2149],"usedEvents":[112,2147]}],"src":"32:438:30"},"id":30}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"IERC173Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{},"title":"ERC-173 Contract Ownership Standard (events)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC-173 Contract Ownership Standard (events)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":\"IERC173Events\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ccc1c87410df222989f9bf5ed61d39aca7443a1cdb23047b277c2e1fa2d8124564736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xC1 0xC8 PUSH21 0x10DF222989F9BF5ED61D39ACA7443A1CDB23047B27 PUSH29 0x2E1FA2D8124564736F6C63430008150033000000000000000000000000 ","sourceMap":"461:4580:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;461:4580:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ccc1c87410df222989f9bf5ed61d39aca7443a1cdb23047b277c2e1fa2d8124564736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xC1 0xC8 PUSH21 0x10DF222989F9BF5ED61D39ACA7443A1CDB23047B27 PUSH29 0x2E1FA2D8124564736F6C63430008150033000000000000000000000000 ","sourceMap":"461:4580:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f68009d3988b0dbf69f49a9d8b11edba6b9ee066a9164aece3d892524356ee6e64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 DUP1 MULMOD 0xD3 SWAP9 DUP12 0xD 0xBF PUSH10 0xF49A9D8B11EDBA6B9EE0 PUSH7 0xA9164AECE3D892 MSTORE NUMBER JUMP 0xEE PUSH15 0x64736F6C6343000815003300000000 ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f68009d3988b0dbf69f49a9d8b11edba6b9ee066a9164aece3d892524356ee6e64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 DUP1 MULMOD 0xD3 SWAP9 DUP12 0xD 0xBF PUSH10 0xF49A9D8B11EDBA6B9EE0 PUSH7 0xA9164AECE3D892 MSTORE NUMBER JUMP 0xEE PUSH15 0x64736F6C6343000815003300000000 ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0xc68901b6a406156255814a3eb864c25a85070de51560f21f3f62090a7ba9b342\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ba6678e14c5361206aefebd466c03bda406dc0e21716fa0db4da2c236cb9a5ea64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH7 0x78E14C5361206A 0xEF 0xEB 0xD4 PUSH7 0xC03BDA406DC0E2 OR AND STATICCALL 0xD 0xB4 0xDA 0x2C 0x23 PUSH13 0xB9A5EA64736F6C634300081500 CALLER ","sourceMap":"202:568:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ba6678e14c5361206aefebd466c03bda406dc0e21716fa0db4da2c236cb9a5ea64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH7 0x78E14C5361206A 0xEF 0xEB 0xD4 PUSH7 0xC03BDA406DC0E2 OR AND STATICCALL 0xD 0xB4 0xDA 0x2C 0x23 PUSH13 0xB9A5EA64736F6C634300081500 CALLER ","sourceMap":"202:568:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cff424eb7ed06848b3e4bbb18ffed0ad16c9a0dae98b1ad9ff0eaec7e527a77f64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF DELEGATECALL 0x24 0xEB PUSH31 0xD06848B3E4BBB18FFED0AD16C9A0DAE98B1AD9FF0EAEC7E527A77F64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"319:712:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cff424eb7ed06848b3e4bbb18ffed0ad16c9a0dae98b1ad9ff0eaec7e527a77f64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF DELEGATECALL 0x24 0xEB PUSH31 0xD06848B3E4BBB18FFED0AD16C9A0DAE98B1AD9FF0EAEC7E527A77F64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"319:712:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x9f49dec6ab95d7ad99055eee9e70ad8e4300bdabf2c85c20f9f5f0c6269a6c0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ec7061f8fcf77dc81cd485b96761e72efad45940b4c170dabc64d3b420f0412\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ec7061f8fcf77dc81cd485b96761e72efad45940b4c170dabc64d3b420f0412\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol":{"IERC721Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard events, see IERC721 for the functions.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{},"title":"ERC721 Non-Fungible Token Standard, basic interface (events).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard events, see IERC721 for the functions.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (events).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":\"IERC721Events\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220eb701b07532c7153be495dd39c7080dc1cd2c7177fa85b5cf6acb42a2714fafa64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB PUSH17 0x1B07532C7153BE495DD39C7080DC1CD2C7 OR PUSH32 0xA85B5CF6ACB42A2714FAFA64736F6C6343000815003300000000000000000000 ","sourceMap":"701:6234:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220eb701b07532c7153be495dd39c7080dc1cd2c7177fa85b5cf6acb42a2714fafa64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB PUSH17 0x1B07532C7153BE495DD39C7080DC1CD2C7 OR PUSH32 0xA85B5CF6ACB42A2714FAFA64736F6C6343000815003300000000000000000000 ","sourceMap":"701:6234:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f5c6eaf6d9fb688d94852b7bd434b9ffe0c21d350800658be86ba20f1064c82d64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 0xC6 0xEA 0xF6 0xD9 0xFB PUSH9 0x8D94852B7BD434B9FF 0xE0 0xC2 SAR CALLDATALOAD ADDMOD STOP PUSH6 0x8BE86BA20F10 PUSH5 0xC82D64736F PUSH13 0x63430008150033000000000000 ","sourceMap":"194:9169:26:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:26;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f5c6eaf6d9fb688d94852b7bd434b9ffe0c21d350800658be86ba20f1064c82d64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 0xC6 0xEA 0xF6 0xD9 0xFB PUSH9 0x8D94852B7BD434B9FF 0xE0 0xC2 SAR CALLDATALOAD ADDMOD STOP PUSH6 0x8BE86BA20F10 PUSH5 0xC82D64736F PUSH13 0x63430008150033000000000000 ","sourceMap":"194:9169:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d8bf8f813c35ea0903c2447db4998a6e0858917a9265ddb2fbc52f2ac608ee9364736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xBF DUP16 DUP2 EXTCODECOPY CALLDATALOAD 0xEA MULMOD SUB 0xC2 PREVRANDAO PUSH30 0xB4998A6E0858917A9265DDB2FBC52F2AC608EE9364736F6C634300081500 CALLER ","sourceMap":"1420:2685:28:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:28;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d8bf8f813c35ea0903c2447db4998a6e0858917a9265ddb2fbc52f2ac608ee9364736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xBF DUP16 DUP2 EXTCODECOPY CALLDATALOAD 0xEA MULMOD SUB 0xC2 PREVRANDAO PUSH30 0xB4998A6E0858917A9265DDB2FBC52F2AC608EE9364736F6C634300081500 CALLER ","sourceMap":"1420:2685:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MyContract.sol":{"MyContract":{"abi":[{"inputs":[{"internalType":"address","name":"data","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[],"name":"InvalidZeroData","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"data","type":"address"}],"name":"DataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"myData","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"data","type":"address"}],"name":"setData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2183":{"entryPoint":null,"id":2183,"parameterSlots":2,"returnSlots":0},"@_39":{"entryPoint":null,"id":39,"parameterSlots":1,"returnSlots":0},"@_551":{"entryPoint":null,"id":551,"parameterSlots":1,"returnSlots":0},"@_598":{"entryPoint":null,"id":598,"parameterSlots":1,"returnSlots":0},"@constructorInit_229":{"entryPoint":266,"id":229,"parameterSlots":2,"returnSlots":0},"@layout_379":{"entryPoint":213,"id":379,"parameterSlots":0,"returnSlots":1},"@layout_527":{"entryPoint":388,"id":527,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_481":{"entryPoint":435,"id":481,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$723_fromMemory":{"entryPoint":551,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":612,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":527,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1001:31","nodeType":"YulBlock","src":"0:1001:31","statements":[{"nativeSrc":"6:3:31","nodeType":"YulBlock","src":"6:3:31","statements":[]},{"body":{"nativeSrc":"59:86:31","nodeType":"YulBlock","src":"59:86:31","statements":[{"body":{"nativeSrc":"123:16:31","nodeType":"YulBlock","src":"123:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:31","nodeType":"YulLiteral","src":"132:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:31","nodeType":"YulLiteral","src":"135:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:31","nodeType":"YulIdentifier","src":"125:6:31"},"nativeSrc":"125:12:31","nodeType":"YulFunctionCall","src":"125:12:31"},"nativeSrc":"125:12:31","nodeType":"YulExpressionStatement","src":"125:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:31","nodeType":"YulIdentifier","src":"82:5:31"},{"arguments":[{"name":"value","nativeSrc":"93:5:31","nodeType":"YulIdentifier","src":"93:5:31"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:31","nodeType":"YulLiteral","src":"108:3:31","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:31","nodeType":"YulLiteral","src":"113:1:31","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:31","nodeType":"YulIdentifier","src":"104:3:31"},"nativeSrc":"104:11:31","nodeType":"YulFunctionCall","src":"104:11:31"},{"kind":"number","nativeSrc":"117:1:31","nodeType":"YulLiteral","src":"117:1:31","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:31","nodeType":"YulIdentifier","src":"100:3:31"},"nativeSrc":"100:19:31","nodeType":"YulFunctionCall","src":"100:19:31"}],"functionName":{"name":"and","nativeSrc":"89:3:31","nodeType":"YulIdentifier","src":"89:3:31"},"nativeSrc":"89:31:31","nodeType":"YulFunctionCall","src":"89:31:31"}],"functionName":{"name":"eq","nativeSrc":"79:2:31","nodeType":"YulIdentifier","src":"79:2:31"},"nativeSrc":"79:42:31","nodeType":"YulFunctionCall","src":"79:42:31"}],"functionName":{"name":"iszero","nativeSrc":"72:6:31","nodeType":"YulIdentifier","src":"72:6:31"},"nativeSrc":"72:50:31","nodeType":"YulFunctionCall","src":"72:50:31"},"nativeSrc":"69:70:31","nodeType":"YulIf","src":"69:70:31"}]},"name":"validator_revert_address","nativeSrc":"14:131:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:31","nodeType":"YulTypedName","src":"48:5:31","type":""}],"src":"14:131:31"},{"body":{"nativeSrc":"274:287:31","nodeType":"YulBlock","src":"274:287:31","statements":[{"body":{"nativeSrc":"320:16:31","nodeType":"YulBlock","src":"320:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"329:1:31","nodeType":"YulLiteral","src":"329:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"332:1:31","nodeType":"YulLiteral","src":"332:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"322:6:31","nodeType":"YulIdentifier","src":"322:6:31"},"nativeSrc":"322:12:31","nodeType":"YulFunctionCall","src":"322:12:31"},"nativeSrc":"322:12:31","nodeType":"YulExpressionStatement","src":"322:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"295:7:31","nodeType":"YulIdentifier","src":"295:7:31"},{"name":"headStart","nativeSrc":"304:9:31","nodeType":"YulIdentifier","src":"304:9:31"}],"functionName":{"name":"sub","nativeSrc":"291:3:31","nodeType":"YulIdentifier","src":"291:3:31"},"nativeSrc":"291:23:31","nodeType":"YulFunctionCall","src":"291:23:31"},{"kind":"number","nativeSrc":"316:2:31","nodeType":"YulLiteral","src":"316:2:31","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"287:3:31","nodeType":"YulIdentifier","src":"287:3:31"},"nativeSrc":"287:32:31","nodeType":"YulFunctionCall","src":"287:32:31"},"nativeSrc":"284:52:31","nodeType":"YulIf","src":"284:52:31"},{"nativeSrc":"345:29:31","nodeType":"YulVariableDeclaration","src":"345:29:31","value":{"arguments":[{"name":"headStart","nativeSrc":"364:9:31","nodeType":"YulIdentifier","src":"364:9:31"}],"functionName":{"name":"mload","nativeSrc":"358:5:31","nodeType":"YulIdentifier","src":"358:5:31"},"nativeSrc":"358:16:31","nodeType":"YulFunctionCall","src":"358:16:31"},"variables":[{"name":"value","nativeSrc":"349:5:31","nodeType":"YulTypedName","src":"349:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"408:5:31","nodeType":"YulIdentifier","src":"408:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"383:24:31","nodeType":"YulIdentifier","src":"383:24:31"},"nativeSrc":"383:31:31","nodeType":"YulFunctionCall","src":"383:31:31"},"nativeSrc":"383:31:31","nodeType":"YulExpressionStatement","src":"383:31:31"},{"nativeSrc":"423:15:31","nodeType":"YulAssignment","src":"423:15:31","value":{"name":"value","nativeSrc":"433:5:31","nodeType":"YulIdentifier","src":"433:5:31"},"variableNames":[{"name":"value0","nativeSrc":"423:6:31","nodeType":"YulIdentifier","src":"423:6:31"}]},{"nativeSrc":"447:40:31","nodeType":"YulVariableDeclaration","src":"447:40:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"472:9:31","nodeType":"YulIdentifier","src":"472:9:31"},{"kind":"number","nativeSrc":"483:2:31","nodeType":"YulLiteral","src":"483:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"468:3:31","nodeType":"YulIdentifier","src":"468:3:31"},"nativeSrc":"468:18:31","nodeType":"YulFunctionCall","src":"468:18:31"}],"functionName":{"name":"mload","nativeSrc":"462:5:31","nodeType":"YulIdentifier","src":"462:5:31"},"nativeSrc":"462:25:31","nodeType":"YulFunctionCall","src":"462:25:31"},"variables":[{"name":"value_1","nativeSrc":"451:7:31","nodeType":"YulTypedName","src":"451:7:31","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"521:7:31","nodeType":"YulIdentifier","src":"521:7:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"496:24:31","nodeType":"YulIdentifier","src":"496:24:31"},"nativeSrc":"496:33:31","nodeType":"YulFunctionCall","src":"496:33:31"},"nativeSrc":"496:33:31","nodeType":"YulExpressionStatement","src":"496:33:31"},{"nativeSrc":"538:17:31","nodeType":"YulAssignment","src":"538:17:31","value":{"name":"value_1","nativeSrc":"548:7:31","nodeType":"YulIdentifier","src":"548:7:31"},"variableNames":[{"name":"value1","nativeSrc":"538:6:31","nodeType":"YulIdentifier","src":"538:6:31"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$723_fromMemory","nativeSrc":"150:411:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"232:9:31","nodeType":"YulTypedName","src":"232:9:31","type":""},{"name":"dataEnd","nativeSrc":"243:7:31","nodeType":"YulTypedName","src":"243:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"255:6:31","nodeType":"YulTypedName","src":"255:6:31","type":""},{"name":"value1","nativeSrc":"263:6:31","nodeType":"YulTypedName","src":"263:6:31","type":""}],"src":"150:411:31"},{"body":{"nativeSrc":"667:102:31","nodeType":"YulBlock","src":"667:102:31","statements":[{"nativeSrc":"677:26:31","nodeType":"YulAssignment","src":"677:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"689:9:31","nodeType":"YulIdentifier","src":"689:9:31"},{"kind":"number","nativeSrc":"700:2:31","nodeType":"YulLiteral","src":"700:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"685:3:31","nodeType":"YulIdentifier","src":"685:3:31"},"nativeSrc":"685:18:31","nodeType":"YulFunctionCall","src":"685:18:31"},"variableNames":[{"name":"tail","nativeSrc":"677:4:31","nodeType":"YulIdentifier","src":"677:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"719:9:31","nodeType":"YulIdentifier","src":"719:9:31"},{"arguments":[{"name":"value0","nativeSrc":"734:6:31","nodeType":"YulIdentifier","src":"734:6:31"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"750:3:31","nodeType":"YulLiteral","src":"750:3:31","type":"","value":"160"},{"kind":"number","nativeSrc":"755:1:31","nodeType":"YulLiteral","src":"755:1:31","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"746:3:31","nodeType":"YulIdentifier","src":"746:3:31"},"nativeSrc":"746:11:31","nodeType":"YulFunctionCall","src":"746:11:31"},{"kind":"number","nativeSrc":"759:1:31","nodeType":"YulLiteral","src":"759:1:31","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"742:3:31","nodeType":"YulIdentifier","src":"742:3:31"},"nativeSrc":"742:19:31","nodeType":"YulFunctionCall","src":"742:19:31"}],"functionName":{"name":"and","nativeSrc":"730:3:31","nodeType":"YulIdentifier","src":"730:3:31"},"nativeSrc":"730:32:31","nodeType":"YulFunctionCall","src":"730:32:31"}],"functionName":{"name":"mstore","nativeSrc":"712:6:31","nodeType":"YulIdentifier","src":"712:6:31"},"nativeSrc":"712:51:31","nodeType":"YulFunctionCall","src":"712:51:31"},"nativeSrc":"712:51:31","nodeType":"YulExpressionStatement","src":"712:51:31"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"566:203:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"636:9:31","nodeType":"YulTypedName","src":"636:9:31","type":""},{"name":"value0","nativeSrc":"647:6:31","nodeType":"YulTypedName","src":"647:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"658:4:31","nodeType":"YulTypedName","src":"658:4:31","type":""}],"src":"566:203:31"},{"body":{"nativeSrc":"823:176:31","nodeType":"YulBlock","src":"823:176:31","statements":[{"nativeSrc":"833:17:31","nodeType":"YulAssignment","src":"833:17:31","value":{"arguments":[{"name":"x","nativeSrc":"845:1:31","nodeType":"YulIdentifier","src":"845:1:31"},{"name":"y","nativeSrc":"848:1:31","nodeType":"YulIdentifier","src":"848:1:31"}],"functionName":{"name":"sub","nativeSrc":"841:3:31","nodeType":"YulIdentifier","src":"841:3:31"},"nativeSrc":"841:9:31","nodeType":"YulFunctionCall","src":"841:9:31"},"variableNames":[{"name":"diff","nativeSrc":"833:4:31","nodeType":"YulIdentifier","src":"833:4:31"}]},{"body":{"nativeSrc":"882:111:31","nodeType":"YulBlock","src":"882:111:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:31","nodeType":"YulLiteral","src":"903:1:31","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"910:3:31","nodeType":"YulLiteral","src":"910:3:31","type":"","value":"224"},{"kind":"number","nativeSrc":"915:10:31","nodeType":"YulLiteral","src":"915:10:31","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"906:3:31","nodeType":"YulIdentifier","src":"906:3:31"},"nativeSrc":"906:20:31","nodeType":"YulFunctionCall","src":"906:20:31"}],"functionName":{"name":"mstore","nativeSrc":"896:6:31","nodeType":"YulIdentifier","src":"896:6:31"},"nativeSrc":"896:31:31","nodeType":"YulFunctionCall","src":"896:31:31"},"nativeSrc":"896:31:31","nodeType":"YulExpressionStatement","src":"896:31:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"947:1:31","nodeType":"YulLiteral","src":"947:1:31","type":"","value":"4"},{"kind":"number","nativeSrc":"950:4:31","nodeType":"YulLiteral","src":"950:4:31","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"940:6:31","nodeType":"YulIdentifier","src":"940:6:31"},"nativeSrc":"940:15:31","nodeType":"YulFunctionCall","src":"940:15:31"},"nativeSrc":"940:15:31","nodeType":"YulExpressionStatement","src":"940:15:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"975:1:31","nodeType":"YulLiteral","src":"975:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"978:4:31","nodeType":"YulLiteral","src":"978:4:31","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"968:6:31","nodeType":"YulIdentifier","src":"968:6:31"},"nativeSrc":"968:15:31","nodeType":"YulFunctionCall","src":"968:15:31"},"nativeSrc":"968:15:31","nodeType":"YulExpressionStatement","src":"968:15:31"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"865:4:31","nodeType":"YulIdentifier","src":"865:4:31"},{"name":"x","nativeSrc":"871:1:31","nodeType":"YulIdentifier","src":"871:1:31"}],"functionName":{"name":"gt","nativeSrc":"862:2:31","nodeType":"YulIdentifier","src":"862:2:31"},"nativeSrc":"862:11:31","nodeType":"YulFunctionCall","src":"862:11:31"},"nativeSrc":"859:134:31","nodeType":"YulIf","src":"859:134:31"}]},"name":"checked_sub_t_uint256","nativeSrc":"774:225:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"805:1:31","nodeType":"YulTypedName","src":"805:1:31","type":""},{"name":"y","nativeSrc":"808:1:31","nodeType":"YulTypedName","src":"808:1:31","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"814:4:31","nodeType":"YulTypedName","src":"814:4:31","type":""}],"src":"774:225:31"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$723_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":31,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801562000010575f80fd5b506040516200152338038062001523833981016040819052620000339162000227565b8080336200004c8162000045620000d5565b906200010a565b506001600160a01b03908116608052831690506200007d57604051633da979c160e21b815260040160405180910390fd5b5f80546001600160a01b0319166001600160a01b0384169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a1505062000284565b5f806200010460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000264565b92915050565b6001600160a01b03811615620001605781546001600160a01b0319166001600160a01b03821690811783556040515f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001806307f5828d60e41b60016200017862000184565b9190620001b3565b5050565b5f806200010460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000264565b600160e01b6001600160e01b0319831601620001e2576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b0319919091165f9081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b038116811462000224575f80fd5b50565b5f806040838503121562000239575f80fd5b825162000246816200020f565b602084015190925062000259816200020f565b809150509250929050565b818103818111156200010457634e487b7160e01b5f52601160045260245ffd5b608051611272620002b15f395f818160e70152818161015b01528181610b4f0152610bd701526112725ff3fe608060405234801561000f575f80fd5b50600436106100b9575f3560e01c806373c8a95811610072578063c3666c3611610058578063c3666c36146101c8578063f2fde38b146101db578063f7ba94bd146101ee575f80fd5b806373c8a958146101ad5780638da5cb5b146101c0575f80fd5b80632bb14104116100a25780632bb141041461012c578063572b6c051461014b57806361dfdae614610198575f80fd5b806301ffc9a7146100bd5780632b4c9f16146100e5575b5f80fd5b6100d06100cb366004610f67565b610201565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100dc565b5f546101079073ffffffffffffffffffffffffffffffffffffffff1681565b6100d0610159366004610fce565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101ab6101a6366004610fce565b61021a565b005b6101ab6101bb366004611031565b6102f8565b6101076103ec565b6101ab6101d6366004611031565b610417565b6101ab6101e9366004610fce565b610588565b6101ab6101fc3660046110c4565b6105a6565b5f6102148261020e610663565b90610690565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116610267576040517ff6a5e70400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610280610272610767565b61027a610770565b9061079d565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150565b610303610272610767565b8483811415806103135750808214155b1561034a576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181146103e2576103da8888838181106103685761036861112b565b905060200201602081019061037d9190610fce565b85858481811061038f5761038f61112b565b905060200201358888858181106103a8576103a861112b565b90506020020160208101906103bd9190610fce565b73ffffffffffffffffffffffffffffffffffffffff169190610811565b60010161034c565b5050505050505050565b5f6104126103f8610770565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610422610272610767565b8483811415806104325750808214155b15610469576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181146103e2578585828181106104845761048461112b565b90506020020160208101906104999190610fce565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106104c7576104c761112b565b90506020020160208101906104dc9190610fce565b8787868181106104ee576104ee61112b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b158015610567575f80fd5b505af1158015610579573d5f803e3d5ffd5b5050505080600101905061046b565b6105a3610593610767565b8261059c610770565b91906108a3565b50565b6105b1610272610767565b828181146105eb576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b81811461065b576106538484838181106106095761060961112b565b905060200201358787848181106106225761062261112b565b90506020020160208101906106379190610fce565b73ffffffffffffffffffffffffffffffffffffffff16906109b7565b6001016105ed565b505050505050565b5f8061021460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611158565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016106de57505f610214565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161072f57506001610214565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b5f610412610b0d565b5f8061021460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611158565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461080d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261089e908490610c51565b505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610910576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610804565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109b15783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35b50505050565b80471015610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610804565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114610a77576040519150601f19603f3d011682016040523d82523d5f602084013e610a7c565b606091505b505090508061089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610804565b5f33321480610b1c5750601836105b15610b2657503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610c4057506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610c1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c409190611190565b15610c4a57919050565b3391505090565b5f610cb2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d5e9092919063ffffffff16565b905080515f1480610cd2575080806020019051810190610cd29190611190565b61089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610804565b6060610d6c84845f85610d74565b949350505050565b606082471015610e06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610804565b5f808673ffffffffffffffffffffffffffffffffffffffff168587604051610e2e91906111d1565b5f6040518083038185875af1925050503d805f8114610e68576040519150601f19603f3d011682016040523d82523d5f602084013e610e6d565b606091505b5091509150610e7e87838387610e89565b979650505050505050565b60608315610f1e5782515f03610f175773ffffffffffffffffffffffffffffffffffffffff85163b610f17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610804565b5081610d6c565b610d6c8383815115610f335781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080491906111ec565b5f60208284031215610f77575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fa6575f80fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146105a3575f80fd5b5f60208284031215610fde575f80fd5b8135610fa681610fad565b5f8083601f840112610ff9575f80fd5b50813567ffffffffffffffff811115611010575f80fd5b6020830191508360208260051b850101111561102a575f80fd5b9250929050565b5f805f805f8060608789031215611046575f80fd5b863567ffffffffffffffff8082111561105d575f80fd5b6110698a838b01610fe9565b90985096506020890135915080821115611081575f80fd5b61108d8a838b01610fe9565b909650945060408901359150808211156110a5575f80fd5b506110b289828a01610fe9565b979a9699509497509295939492505050565b5f805f80604085870312156110d7575f80fd5b843567ffffffffffffffff808211156110ee575f80fd5b6110fa88838901610fe9565b90965094506020870135915080821115611112575f80fd5b5061111f87828801610fe9565b95989497509550505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b81810381811115610214577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f602082840312156111a0575f80fd5b81518015158114610fa6575f80fd5b5f5b838110156111c95781810151838201526020016111b1565b50505f910152565b5f82516111e28184602087016111af565b9190910192915050565b602081525f825180602084015261120a8160408501602087016111af565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122036d8bad4db7edb2d806dfcc295e967d09ae3fdcbadec5fd61e270f0a5d85653464736f6c63430008150033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1523 CODESIZE SUB DUP1 PUSH3 0x1523 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x33 SWAP2 PUSH3 0x227 JUMP JUMPDEST DUP1 DUP1 CALLER PUSH3 0x4C DUP2 PUSH3 0x45 PUSH3 0xD5 JUMP JUMPDEST SWAP1 PUSH3 0x10A JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP4 AND SWAP1 POP PUSH3 0x7D JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DA979C1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH3 0x284 JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x104 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x264 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x160 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x180 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x178 PUSH3 0x184 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1B3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x104 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x224 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x239 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x246 DUP2 PUSH3 0x20F JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x259 DUP2 PUSH3 0x20F JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x104 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1272 PUSH3 0x2B1 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH1 0xE7 ADD MSTORE DUP2 DUP2 PUSH2 0x15B ADD MSTORE DUP2 DUP2 PUSH2 0xB4F ADD MSTORE PUSH2 0xBD7 ADD MSTORE PUSH2 0x1272 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB9 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x72 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x1EE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x198 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xE5 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xD0 PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0xF67 JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDC JUMP JUMPDEST PUSH0 SLOAD PUSH2 0x107 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCE JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x21A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AB PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x3EC JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x417 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x5A6 JUMP JUMPDEST PUSH0 PUSH2 0x214 DUP3 PUSH2 0x20E PUSH2 0x663 JUMP JUMPDEST SWAP1 PUSH2 0x690 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x267 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x280 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x770 JUMP JUMPDEST SWAP1 PUSH2 0x79D JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x303 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x313 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3E2 JUMPI PUSH2 0x3DA DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x368 JUMPI PUSH2 0x368 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x38F JUMPI PUSH2 0x38F PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x3A8 JUMPI PUSH2 0x3A8 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x811 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x34C JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x412 PUSH2 0x3F8 PUSH2 0x770 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x422 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x432 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x469 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3E2 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x484 JUMPI PUSH2 0x484 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x499 SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x4C7 JUMPI PUSH2 0x4C7 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4DC SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x4EE JUMPI PUSH2 0x4EE PUSH2 0x112B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x567 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x579 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x46B JUMP JUMPDEST PUSH2 0x5A3 PUSH2 0x593 PUSH2 0x767 JUMP JUMPDEST DUP3 PUSH2 0x59C PUSH2 0x770 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8A3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5B1 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x65B JUMPI PUSH2 0x653 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x609 JUMPI PUSH2 0x609 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x622 JUMPI PUSH2 0x622 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x637 SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5ED JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x214 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1158 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x6DE JUMPI POP PUSH0 PUSH2 0x214 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x72F JUMPI POP PUSH1 0x1 PUSH2 0x214 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x412 PUSH2 0xB0D JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x214 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1158 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x80D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x89E SWAP1 DUP5 SWAP1 PUSH2 0xC51 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x804 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B1 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xA21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x804 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0xA77 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA7C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x804 JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0xB1C JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB26 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC40 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC1C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC40 SWAP2 SWAP1 PUSH2 0x1190 JUMP JUMPDEST ISZERO PUSH2 0xC4A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xCB2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD5E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0xCD2 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xCD2 SWAP2 SWAP1 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x804 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD6C DUP5 DUP5 PUSH0 DUP6 PUSH2 0xD74 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xE06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x804 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE2E SWAP2 SWAP1 PUSH2 0x11D1 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0xE68 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE6D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xE7E DUP8 DUP4 DUP4 DUP8 PUSH2 0xE89 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xF1E JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0xF17 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0xF17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x804 JUMP JUMPDEST POP DUP2 PUSH2 0xD6C JUMP JUMPDEST PUSH2 0xD6C DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xF33 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x804 SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xFA6 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5A3 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFDE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFA6 DUP2 PUSH2 0xFAD JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xFF9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1010 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x102A JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1046 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x105D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1069 DUP11 DUP4 DUP12 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1081 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x108D DUP11 DUP4 DUP12 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10A5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B2 DUP10 DUP3 DUP11 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x10D7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x10EE JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x10FA DUP9 DUP4 DUP10 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1112 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x111F DUP8 DUP3 DUP9 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x214 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xFA6 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11C9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x11B1 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x11E2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x11AF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x120A DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x11AF JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xD8 0xBA 0xD4 0xDB PUSH31 0xDB2D806DFCC295E967D09AE3FDCBADEC5FD61E270F0A5D85653464736F6C63 NUMBER STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"809:1196:29:-:0;;;1043:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1162:17;;1125:10;1008:63:1;1125:10:29;1008:33:1;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:12;;;;;1195:18:29;::::2;::::0;-1:-1:-1;1191:48:29::2;;1222:17;;-1:-1:-1::0;;;1222:17:29::2;;;;;;;;;;;1191:48;1249:6;:13:::0;;-1:-1:-1;;;;;;1249:13:29::2;-1:-1:-1::0;;;;;1249:13:29;::::2;::::0;;::::2;::::0;;;1277::::2;::::0;712:51:31;;;1277:13:29::2;::::0;700:2:31;685:18;1277:13:29::2;;;;;;;1043:254:::0;;809:1196;;4865:174:6;4906:16;;761:71;831:1;769:58;761:71;:::i;:::-;753:80;4865:174;-1:-1:-1;;4865:174:6:o;1402:355::-;-1:-1:-1;;;;;1490:26:6;;;1486:166;;1532:30;;-1:-1:-1;;;;;;1532:30:6;-1:-1:-1;;;;;1532:30:6;;;;;;;1581:60;;-1:-1:-1;;1581:60:6;;-1:-1:-1;;1581:60:6;1486:166;1661:89;-1:-1:-1;;;1745:4:6;1661:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1402:355;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:131:31:-;-1:-1:-1;;;;;89:31:31;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:411::-;255:6;263;316:2;304:9;295:7;291:23;287:32;284:52;;;332:1;329;322:12;284:52;364:9;358:16;383:31;408:5;383:31;:::i;:::-;483:2;468:18;;462:25;433:5;;-1:-1:-1;496:33:31;462:25;496:33;:::i;:::-;548:7;538:17;;;150:411;;;;;:::o;774:225::-;841:9;;;862:11;;;859:134;;;915:10;910:3;906:20;903:1;896:31;950:4;947:1;940:15;978:4;975:1;968:15;774:225;809:1196:29;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_1606":{"entryPoint":3153,"id":1606,"parameterSlots":2,"returnSlots":0},"@_msgSender_2230":{"entryPoint":1895,"id":2230,"parameterSlots":0,"returnSlots":1},"@_msgSender_648":{"entryPoint":2829,"id":648,"parameterSlots":0,"returnSlots":1},"@_revert_1984":{"entryPoint":null,"id":1984,"parameterSlots":2,"returnSlots":0},"@enforceIsContractOwner_346":{"entryPoint":1949,"id":346,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_560":{"entryPoint":null,"id":560,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_1809":{"entryPoint":3444,"id":1809,"parameterSlots":4,"returnSlots":1},"@functionCall_1745":{"entryPoint":3422,"id":1745,"parameterSlots":3,"returnSlots":1},"@isContract_1673":{"entryPoint":null,"id":1673,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_576":{"entryPoint":null,"id":576,"parameterSlots":1,"returnSlots":1},"@layout_379":{"entryPoint":1904,"id":379,"parameterSlots":0,"returnSlots":1},"@layout_527":{"entryPoint":1635,"id":527,"parameterSlots":0,"returnSlots":1},"@msgSender_734":{"entryPoint":null,"id":734,"parameterSlots":0,"returnSlots":1},"@myData_2143":{"entryPoint":null,"id":2143,"parameterSlots":0,"returnSlots":0},"@owner_308":{"entryPoint":null,"id":308,"parameterSlots":1,"returnSlots":1},"@owner_70":{"entryPoint":1004,"id":70,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_970":{"entryPoint":760,"id":970,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1040":{"entryPoint":1047,"id":1040,"parameterSlots":6,"returnSlots":0},"@recoverETH_904":{"entryPoint":1446,"id":904,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1312":{"entryPoint":2065,"id":1312,"parameterSlots":3,"returnSlots":0},"@sendValue_1707":{"entryPoint":2487,"id":1707,"parameterSlots":2,"returnSlots":0},"@setData_2216":{"entryPoint":538,"id":2216,"parameterSlots":1,"returnSlots":0},"@supportsInterface_409":{"entryPoint":513,"id":409,"parameterSlots":1,"returnSlots":1},"@supportsInterface_515":{"entryPoint":1680,"id":515,"parameterSlots":2,"returnSlots":1},"@transferOwnership_295":{"entryPoint":2211,"id":295,"parameterSlots":3,"returnSlots":0},"@transferOwnership_87":{"entryPoint":1416,"id":87,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1940":{"entryPoint":3721,"id":1940,"parameterSlots":4,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":4073,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4046,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4145,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4292,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4496,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":3943,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1243":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1162":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4561,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$723__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":4588,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4440,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":4527,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x32":{"entryPoint":4395,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":4013,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:10582:31","nodeType":"YulBlock","src":"0:10582:31","statements":[{"nativeSrc":"6:3:31","nodeType":"YulBlock","src":"6:3:31","statements":[]},{"body":{"nativeSrc":"83:263:31","nodeType":"YulBlock","src":"83:263:31","statements":[{"body":{"nativeSrc":"129:16:31","nodeType":"YulBlock","src":"129:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:31","nodeType":"YulLiteral","src":"138:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:31","nodeType":"YulLiteral","src":"141:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:31","nodeType":"YulIdentifier","src":"131:6:31"},"nativeSrc":"131:12:31","nodeType":"YulFunctionCall","src":"131:12:31"},"nativeSrc":"131:12:31","nodeType":"YulExpressionStatement","src":"131:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:31","nodeType":"YulIdentifier","src":"104:7:31"},{"name":"headStart","nativeSrc":"113:9:31","nodeType":"YulIdentifier","src":"113:9:31"}],"functionName":{"name":"sub","nativeSrc":"100:3:31","nodeType":"YulIdentifier","src":"100:3:31"},"nativeSrc":"100:23:31","nodeType":"YulFunctionCall","src":"100:23:31"},{"kind":"number","nativeSrc":"125:2:31","nodeType":"YulLiteral","src":"125:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:31","nodeType":"YulIdentifier","src":"96:3:31"},"nativeSrc":"96:32:31","nodeType":"YulFunctionCall","src":"96:32:31"},"nativeSrc":"93:52:31","nodeType":"YulIf","src":"93:52:31"},{"nativeSrc":"154:36:31","nodeType":"YulVariableDeclaration","src":"154:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:31","nodeType":"YulIdentifier","src":"180:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:31","nodeType":"YulIdentifier","src":"167:12:31"},"nativeSrc":"167:23:31","nodeType":"YulFunctionCall","src":"167:23:31"},"variables":[{"name":"value","nativeSrc":"158:5:31","nodeType":"YulTypedName","src":"158:5:31","type":""}]},{"body":{"nativeSrc":"300:16:31","nodeType":"YulBlock","src":"300:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:31","nodeType":"YulLiteral","src":"309:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:31","nodeType":"YulLiteral","src":"312:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:31","nodeType":"YulIdentifier","src":"302:6:31"},"nativeSrc":"302:12:31","nodeType":"YulFunctionCall","src":"302:12:31"},"nativeSrc":"302:12:31","nodeType":"YulExpressionStatement","src":"302:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:31","nodeType":"YulIdentifier","src":"212:5:31"},{"arguments":[{"name":"value","nativeSrc":"223:5:31","nodeType":"YulIdentifier","src":"223:5:31"},{"kind":"number","nativeSrc":"230:66:31","nodeType":"YulLiteral","src":"230:66:31","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:31","nodeType":"YulIdentifier","src":"219:3:31"},"nativeSrc":"219:78:31","nodeType":"YulFunctionCall","src":"219:78:31"}],"functionName":{"name":"eq","nativeSrc":"209:2:31","nodeType":"YulIdentifier","src":"209:2:31"},"nativeSrc":"209:89:31","nodeType":"YulFunctionCall","src":"209:89:31"}],"functionName":{"name":"iszero","nativeSrc":"202:6:31","nodeType":"YulIdentifier","src":"202:6:31"},"nativeSrc":"202:97:31","nodeType":"YulFunctionCall","src":"202:97:31"},"nativeSrc":"199:117:31","nodeType":"YulIf","src":"199:117:31"},{"nativeSrc":"325:15:31","nodeType":"YulAssignment","src":"325:15:31","value":{"name":"value","nativeSrc":"335:5:31","nodeType":"YulIdentifier","src":"335:5:31"},"variableNames":[{"name":"value0","nativeSrc":"325:6:31","nodeType":"YulIdentifier","src":"325:6:31"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:31","nodeType":"YulTypedName","src":"49:9:31","type":""},{"name":"dataEnd","nativeSrc":"60:7:31","nodeType":"YulTypedName","src":"60:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:31","nodeType":"YulTypedName","src":"72:6:31","type":""}],"src":"14:332:31"},{"body":{"nativeSrc":"446:92:31","nodeType":"YulBlock","src":"446:92:31","statements":[{"nativeSrc":"456:26:31","nodeType":"YulAssignment","src":"456:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:31","nodeType":"YulIdentifier","src":"468:9:31"},{"kind":"number","nativeSrc":"479:2:31","nodeType":"YulLiteral","src":"479:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:31","nodeType":"YulIdentifier","src":"464:3:31"},"nativeSrc":"464:18:31","nodeType":"YulFunctionCall","src":"464:18:31"},"variableNames":[{"name":"tail","nativeSrc":"456:4:31","nodeType":"YulIdentifier","src":"456:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:31","nodeType":"YulIdentifier","src":"498:9:31"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:31","nodeType":"YulIdentifier","src":"523:6:31"}],"functionName":{"name":"iszero","nativeSrc":"516:6:31","nodeType":"YulIdentifier","src":"516:6:31"},"nativeSrc":"516:14:31","nodeType":"YulFunctionCall","src":"516:14:31"}],"functionName":{"name":"iszero","nativeSrc":"509:6:31","nodeType":"YulIdentifier","src":"509:6:31"},"nativeSrc":"509:22:31","nodeType":"YulFunctionCall","src":"509:22:31"}],"functionName":{"name":"mstore","nativeSrc":"491:6:31","nodeType":"YulIdentifier","src":"491:6:31"},"nativeSrc":"491:41:31","nodeType":"YulFunctionCall","src":"491:41:31"},"nativeSrc":"491:41:31","nodeType":"YulExpressionStatement","src":"491:41:31"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:31","nodeType":"YulTypedName","src":"415:9:31","type":""},{"name":"value0","nativeSrc":"426:6:31","nodeType":"YulTypedName","src":"426:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:31","nodeType":"YulTypedName","src":"437:4:31","type":""}],"src":"351:187:31"},{"body":{"nativeSrc":"670:125:31","nodeType":"YulBlock","src":"670:125:31","statements":[{"nativeSrc":"680:26:31","nodeType":"YulAssignment","src":"680:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"692:9:31","nodeType":"YulIdentifier","src":"692:9:31"},{"kind":"number","nativeSrc":"703:2:31","nodeType":"YulLiteral","src":"703:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"688:3:31","nodeType":"YulIdentifier","src":"688:3:31"},"nativeSrc":"688:18:31","nodeType":"YulFunctionCall","src":"688:18:31"},"variableNames":[{"name":"tail","nativeSrc":"680:4:31","nodeType":"YulIdentifier","src":"680:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"722:9:31","nodeType":"YulIdentifier","src":"722:9:31"},{"arguments":[{"name":"value0","nativeSrc":"737:6:31","nodeType":"YulIdentifier","src":"737:6:31"},{"kind":"number","nativeSrc":"745:42:31","nodeType":"YulLiteral","src":"745:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"733:3:31","nodeType":"YulIdentifier","src":"733:3:31"},"nativeSrc":"733:55:31","nodeType":"YulFunctionCall","src":"733:55:31"}],"functionName":{"name":"mstore","nativeSrc":"715:6:31","nodeType":"YulIdentifier","src":"715:6:31"},"nativeSrc":"715:74:31","nodeType":"YulFunctionCall","src":"715:74:31"},"nativeSrc":"715:74:31","nodeType":"YulExpressionStatement","src":"715:74:31"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$723__to_t_address__fromStack_reversed","nativeSrc":"543:252:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"639:9:31","nodeType":"YulTypedName","src":"639:9:31","type":""},{"name":"value0","nativeSrc":"650:6:31","nodeType":"YulTypedName","src":"650:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"661:4:31","nodeType":"YulTypedName","src":"661:4:31","type":""}],"src":"543:252:31"},{"body":{"nativeSrc":"901:125:31","nodeType":"YulBlock","src":"901:125:31","statements":[{"nativeSrc":"911:26:31","nodeType":"YulAssignment","src":"911:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"923:9:31","nodeType":"YulIdentifier","src":"923:9:31"},{"kind":"number","nativeSrc":"934:2:31","nodeType":"YulLiteral","src":"934:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"919:3:31","nodeType":"YulIdentifier","src":"919:3:31"},"nativeSrc":"919:18:31","nodeType":"YulFunctionCall","src":"919:18:31"},"variableNames":[{"name":"tail","nativeSrc":"911:4:31","nodeType":"YulIdentifier","src":"911:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"953:9:31","nodeType":"YulIdentifier","src":"953:9:31"},{"arguments":[{"name":"value0","nativeSrc":"968:6:31","nodeType":"YulIdentifier","src":"968:6:31"},{"kind":"number","nativeSrc":"976:42:31","nodeType":"YulLiteral","src":"976:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"964:3:31","nodeType":"YulIdentifier","src":"964:3:31"},"nativeSrc":"964:55:31","nodeType":"YulFunctionCall","src":"964:55:31"}],"functionName":{"name":"mstore","nativeSrc":"946:6:31","nodeType":"YulIdentifier","src":"946:6:31"},"nativeSrc":"946:74:31","nodeType":"YulFunctionCall","src":"946:74:31"},"nativeSrc":"946:74:31","nodeType":"YulExpressionStatement","src":"946:74:31"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"800:226:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"870:9:31","nodeType":"YulTypedName","src":"870:9:31","type":""},{"name":"value0","nativeSrc":"881:6:31","nodeType":"YulTypedName","src":"881:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"892:4:31","nodeType":"YulTypedName","src":"892:4:31","type":""}],"src":"800:226:31"},{"body":{"nativeSrc":"1076:109:31","nodeType":"YulBlock","src":"1076:109:31","statements":[{"body":{"nativeSrc":"1163:16:31","nodeType":"YulBlock","src":"1163:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1172:1:31","nodeType":"YulLiteral","src":"1172:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"1175:1:31","nodeType":"YulLiteral","src":"1175:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1165:6:31","nodeType":"YulIdentifier","src":"1165:6:31"},"nativeSrc":"1165:12:31","nodeType":"YulFunctionCall","src":"1165:12:31"},"nativeSrc":"1165:12:31","nodeType":"YulExpressionStatement","src":"1165:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1099:5:31","nodeType":"YulIdentifier","src":"1099:5:31"},{"arguments":[{"name":"value","nativeSrc":"1110:5:31","nodeType":"YulIdentifier","src":"1110:5:31"},{"kind":"number","nativeSrc":"1117:42:31","nodeType":"YulLiteral","src":"1117:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1106:3:31","nodeType":"YulIdentifier","src":"1106:3:31"},"nativeSrc":"1106:54:31","nodeType":"YulFunctionCall","src":"1106:54:31"}],"functionName":{"name":"eq","nativeSrc":"1096:2:31","nodeType":"YulIdentifier","src":"1096:2:31"},"nativeSrc":"1096:65:31","nodeType":"YulFunctionCall","src":"1096:65:31"}],"functionName":{"name":"iszero","nativeSrc":"1089:6:31","nodeType":"YulIdentifier","src":"1089:6:31"},"nativeSrc":"1089:73:31","nodeType":"YulFunctionCall","src":"1089:73:31"},"nativeSrc":"1086:93:31","nodeType":"YulIf","src":"1086:93:31"}]},"name":"validator_revert_address","nativeSrc":"1031:154:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1065:5:31","nodeType":"YulTypedName","src":"1065:5:31","type":""}],"src":"1031:154:31"},{"body":{"nativeSrc":"1260:177:31","nodeType":"YulBlock","src":"1260:177:31","statements":[{"body":{"nativeSrc":"1306:16:31","nodeType":"YulBlock","src":"1306:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1315:1:31","nodeType":"YulLiteral","src":"1315:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"1318:1:31","nodeType":"YulLiteral","src":"1318:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1308:6:31","nodeType":"YulIdentifier","src":"1308:6:31"},"nativeSrc":"1308:12:31","nodeType":"YulFunctionCall","src":"1308:12:31"},"nativeSrc":"1308:12:31","nodeType":"YulExpressionStatement","src":"1308:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1281:7:31","nodeType":"YulIdentifier","src":"1281:7:31"},{"name":"headStart","nativeSrc":"1290:9:31","nodeType":"YulIdentifier","src":"1290:9:31"}],"functionName":{"name":"sub","nativeSrc":"1277:3:31","nodeType":"YulIdentifier","src":"1277:3:31"},"nativeSrc":"1277:23:31","nodeType":"YulFunctionCall","src":"1277:23:31"},{"kind":"number","nativeSrc":"1302:2:31","nodeType":"YulLiteral","src":"1302:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1273:3:31","nodeType":"YulIdentifier","src":"1273:3:31"},"nativeSrc":"1273:32:31","nodeType":"YulFunctionCall","src":"1273:32:31"},"nativeSrc":"1270:52:31","nodeType":"YulIf","src":"1270:52:31"},{"nativeSrc":"1331:36:31","nodeType":"YulVariableDeclaration","src":"1331:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"1357:9:31","nodeType":"YulIdentifier","src":"1357:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"1344:12:31","nodeType":"YulIdentifier","src":"1344:12:31"},"nativeSrc":"1344:23:31","nodeType":"YulFunctionCall","src":"1344:23:31"},"variables":[{"name":"value","nativeSrc":"1335:5:31","nodeType":"YulTypedName","src":"1335:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1401:5:31","nodeType":"YulIdentifier","src":"1401:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1376:24:31","nodeType":"YulIdentifier","src":"1376:24:31"},"nativeSrc":"1376:31:31","nodeType":"YulFunctionCall","src":"1376:31:31"},"nativeSrc":"1376:31:31","nodeType":"YulExpressionStatement","src":"1376:31:31"},{"nativeSrc":"1416:15:31","nodeType":"YulAssignment","src":"1416:15:31","value":{"name":"value","nativeSrc":"1426:5:31","nodeType":"YulIdentifier","src":"1426:5:31"},"variableNames":[{"name":"value0","nativeSrc":"1416:6:31","nodeType":"YulIdentifier","src":"1416:6:31"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1190:247:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1226:9:31","nodeType":"YulTypedName","src":"1226:9:31","type":""},{"name":"dataEnd","nativeSrc":"1237:7:31","nodeType":"YulTypedName","src":"1237:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1249:6:31","nodeType":"YulTypedName","src":"1249:6:31","type":""}],"src":"1190:247:31"},{"body":{"nativeSrc":"1526:283:31","nodeType":"YulBlock","src":"1526:283:31","statements":[{"body":{"nativeSrc":"1575:16:31","nodeType":"YulBlock","src":"1575:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1584:1:31","nodeType":"YulLiteral","src":"1584:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"1587:1:31","nodeType":"YulLiteral","src":"1587:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1577:6:31","nodeType":"YulIdentifier","src":"1577:6:31"},"nativeSrc":"1577:12:31","nodeType":"YulFunctionCall","src":"1577:12:31"},"nativeSrc":"1577:12:31","nodeType":"YulExpressionStatement","src":"1577:12:31"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1554:6:31","nodeType":"YulIdentifier","src":"1554:6:31"},{"kind":"number","nativeSrc":"1562:4:31","nodeType":"YulLiteral","src":"1562:4:31","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1550:3:31","nodeType":"YulIdentifier","src":"1550:3:31"},"nativeSrc":"1550:17:31","nodeType":"YulFunctionCall","src":"1550:17:31"},{"name":"end","nativeSrc":"1569:3:31","nodeType":"YulIdentifier","src":"1569:3:31"}],"functionName":{"name":"slt","nativeSrc":"1546:3:31","nodeType":"YulIdentifier","src":"1546:3:31"},"nativeSrc":"1546:27:31","nodeType":"YulFunctionCall","src":"1546:27:31"}],"functionName":{"name":"iszero","nativeSrc":"1539:6:31","nodeType":"YulIdentifier","src":"1539:6:31"},"nativeSrc":"1539:35:31","nodeType":"YulFunctionCall","src":"1539:35:31"},"nativeSrc":"1536:55:31","nodeType":"YulIf","src":"1536:55:31"},{"nativeSrc":"1600:30:31","nodeType":"YulAssignment","src":"1600:30:31","value":{"arguments":[{"name":"offset","nativeSrc":"1623:6:31","nodeType":"YulIdentifier","src":"1623:6:31"}],"functionName":{"name":"calldataload","nativeSrc":"1610:12:31","nodeType":"YulIdentifier","src":"1610:12:31"},"nativeSrc":"1610:20:31","nodeType":"YulFunctionCall","src":"1610:20:31"},"variableNames":[{"name":"length","nativeSrc":"1600:6:31","nodeType":"YulIdentifier","src":"1600:6:31"}]},{"body":{"nativeSrc":"1673:16:31","nodeType":"YulBlock","src":"1673:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1682:1:31","nodeType":"YulLiteral","src":"1682:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"1685:1:31","nodeType":"YulLiteral","src":"1685:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1675:6:31","nodeType":"YulIdentifier","src":"1675:6:31"},"nativeSrc":"1675:12:31","nodeType":"YulFunctionCall","src":"1675:12:31"},"nativeSrc":"1675:12:31","nodeType":"YulExpressionStatement","src":"1675:12:31"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1645:6:31","nodeType":"YulIdentifier","src":"1645:6:31"},{"kind":"number","nativeSrc":"1653:18:31","nodeType":"YulLiteral","src":"1653:18:31","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1642:2:31","nodeType":"YulIdentifier","src":"1642:2:31"},"nativeSrc":"1642:30:31","nodeType":"YulFunctionCall","src":"1642:30:31"},"nativeSrc":"1639:50:31","nodeType":"YulIf","src":"1639:50:31"},{"nativeSrc":"1698:29:31","nodeType":"YulAssignment","src":"1698:29:31","value":{"arguments":[{"name":"offset","nativeSrc":"1714:6:31","nodeType":"YulIdentifier","src":"1714:6:31"},{"kind":"number","nativeSrc":"1722:4:31","nodeType":"YulLiteral","src":"1722:4:31","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1710:3:31","nodeType":"YulIdentifier","src":"1710:3:31"},"nativeSrc":"1710:17:31","nodeType":"YulFunctionCall","src":"1710:17:31"},"variableNames":[{"name":"arrayPos","nativeSrc":"1698:8:31","nodeType":"YulIdentifier","src":"1698:8:31"}]},{"body":{"nativeSrc":"1787:16:31","nodeType":"YulBlock","src":"1787:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1796:1:31","nodeType":"YulLiteral","src":"1796:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"1799:1:31","nodeType":"YulLiteral","src":"1799:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1789:6:31","nodeType":"YulIdentifier","src":"1789:6:31"},"nativeSrc":"1789:12:31","nodeType":"YulFunctionCall","src":"1789:12:31"},"nativeSrc":"1789:12:31","nodeType":"YulExpressionStatement","src":"1789:12:31"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1750:6:31","nodeType":"YulIdentifier","src":"1750:6:31"},{"arguments":[{"kind":"number","nativeSrc":"1762:1:31","nodeType":"YulLiteral","src":"1762:1:31","type":"","value":"5"},{"name":"length","nativeSrc":"1765:6:31","nodeType":"YulIdentifier","src":"1765:6:31"}],"functionName":{"name":"shl","nativeSrc":"1758:3:31","nodeType":"YulIdentifier","src":"1758:3:31"},"nativeSrc":"1758:14:31","nodeType":"YulFunctionCall","src":"1758:14:31"}],"functionName":{"name":"add","nativeSrc":"1746:3:31","nodeType":"YulIdentifier","src":"1746:3:31"},"nativeSrc":"1746:27:31","nodeType":"YulFunctionCall","src":"1746:27:31"},{"kind":"number","nativeSrc":"1775:4:31","nodeType":"YulLiteral","src":"1775:4:31","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1742:3:31","nodeType":"YulIdentifier","src":"1742:3:31"},"nativeSrc":"1742:38:31","nodeType":"YulFunctionCall","src":"1742:38:31"},{"name":"end","nativeSrc":"1782:3:31","nodeType":"YulIdentifier","src":"1782:3:31"}],"functionName":{"name":"gt","nativeSrc":"1739:2:31","nodeType":"YulIdentifier","src":"1739:2:31"},"nativeSrc":"1739:47:31","nodeType":"YulFunctionCall","src":"1739:47:31"},"nativeSrc":"1736:67:31","nodeType":"YulIf","src":"1736:67:31"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1442:367:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1489:6:31","nodeType":"YulTypedName","src":"1489:6:31","type":""},{"name":"end","nativeSrc":"1497:3:31","nodeType":"YulTypedName","src":"1497:3:31","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1505:8:31","nodeType":"YulTypedName","src":"1505:8:31","type":""},{"name":"length","nativeSrc":"1515:6:31","nodeType":"YulTypedName","src":"1515:6:31","type":""}],"src":"1442:367:31"},{"body":{"nativeSrc":"2038:879:31","nodeType":"YulBlock","src":"2038:879:31","statements":[{"body":{"nativeSrc":"2084:16:31","nodeType":"YulBlock","src":"2084:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2093:1:31","nodeType":"YulLiteral","src":"2093:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2096:1:31","nodeType":"YulLiteral","src":"2096:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2086:6:31","nodeType":"YulIdentifier","src":"2086:6:31"},"nativeSrc":"2086:12:31","nodeType":"YulFunctionCall","src":"2086:12:31"},"nativeSrc":"2086:12:31","nodeType":"YulExpressionStatement","src":"2086:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2059:7:31","nodeType":"YulIdentifier","src":"2059:7:31"},{"name":"headStart","nativeSrc":"2068:9:31","nodeType":"YulIdentifier","src":"2068:9:31"}],"functionName":{"name":"sub","nativeSrc":"2055:3:31","nodeType":"YulIdentifier","src":"2055:3:31"},"nativeSrc":"2055:23:31","nodeType":"YulFunctionCall","src":"2055:23:31"},{"kind":"number","nativeSrc":"2080:2:31","nodeType":"YulLiteral","src":"2080:2:31","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2051:3:31","nodeType":"YulIdentifier","src":"2051:3:31"},"nativeSrc":"2051:32:31","nodeType":"YulFunctionCall","src":"2051:32:31"},"nativeSrc":"2048:52:31","nodeType":"YulIf","src":"2048:52:31"},{"nativeSrc":"2109:37:31","nodeType":"YulVariableDeclaration","src":"2109:37:31","value":{"arguments":[{"name":"headStart","nativeSrc":"2136:9:31","nodeType":"YulIdentifier","src":"2136:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"2123:12:31","nodeType":"YulIdentifier","src":"2123:12:31"},"nativeSrc":"2123:23:31","nodeType":"YulFunctionCall","src":"2123:23:31"},"variables":[{"name":"offset","nativeSrc":"2113:6:31","nodeType":"YulTypedName","src":"2113:6:31","type":""}]},{"nativeSrc":"2155:28:31","nodeType":"YulVariableDeclaration","src":"2155:28:31","value":{"kind":"number","nativeSrc":"2165:18:31","nodeType":"YulLiteral","src":"2165:18:31","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2159:2:31","nodeType":"YulTypedName","src":"2159:2:31","type":""}]},{"body":{"nativeSrc":"2210:16:31","nodeType":"YulBlock","src":"2210:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2219:1:31","nodeType":"YulLiteral","src":"2219:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2222:1:31","nodeType":"YulLiteral","src":"2222:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2212:6:31","nodeType":"YulIdentifier","src":"2212:6:31"},"nativeSrc":"2212:12:31","nodeType":"YulFunctionCall","src":"2212:12:31"},"nativeSrc":"2212:12:31","nodeType":"YulExpressionStatement","src":"2212:12:31"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2198:6:31","nodeType":"YulIdentifier","src":"2198:6:31"},{"name":"_1","nativeSrc":"2206:2:31","nodeType":"YulIdentifier","src":"2206:2:31"}],"functionName":{"name":"gt","nativeSrc":"2195:2:31","nodeType":"YulIdentifier","src":"2195:2:31"},"nativeSrc":"2195:14:31","nodeType":"YulFunctionCall","src":"2195:14:31"},"nativeSrc":"2192:34:31","nodeType":"YulIf","src":"2192:34:31"},{"nativeSrc":"2235:96:31","nodeType":"YulVariableDeclaration","src":"2235:96:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2303:9:31","nodeType":"YulIdentifier","src":"2303:9:31"},{"name":"offset","nativeSrc":"2314:6:31","nodeType":"YulIdentifier","src":"2314:6:31"}],"functionName":{"name":"add","nativeSrc":"2299:3:31","nodeType":"YulIdentifier","src":"2299:3:31"},"nativeSrc":"2299:22:31","nodeType":"YulFunctionCall","src":"2299:22:31"},{"name":"dataEnd","nativeSrc":"2323:7:31","nodeType":"YulIdentifier","src":"2323:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2261:37:31","nodeType":"YulIdentifier","src":"2261:37:31"},"nativeSrc":"2261:70:31","nodeType":"YulFunctionCall","src":"2261:70:31"},"variables":[{"name":"value0_1","nativeSrc":"2239:8:31","nodeType":"YulTypedName","src":"2239:8:31","type":""},{"name":"value1_1","nativeSrc":"2249:8:31","nodeType":"YulTypedName","src":"2249:8:31","type":""}]},{"nativeSrc":"2340:18:31","nodeType":"YulAssignment","src":"2340:18:31","value":{"name":"value0_1","nativeSrc":"2350:8:31","nodeType":"YulIdentifier","src":"2350:8:31"},"variableNames":[{"name":"value0","nativeSrc":"2340:6:31","nodeType":"YulIdentifier","src":"2340:6:31"}]},{"nativeSrc":"2367:18:31","nodeType":"YulAssignment","src":"2367:18:31","value":{"name":"value1_1","nativeSrc":"2377:8:31","nodeType":"YulIdentifier","src":"2377:8:31"},"variableNames":[{"name":"value1","nativeSrc":"2367:6:31","nodeType":"YulIdentifier","src":"2367:6:31"}]},{"nativeSrc":"2394:48:31","nodeType":"YulVariableDeclaration","src":"2394:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2427:9:31","nodeType":"YulIdentifier","src":"2427:9:31"},{"kind":"number","nativeSrc":"2438:2:31","nodeType":"YulLiteral","src":"2438:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2423:3:31","nodeType":"YulIdentifier","src":"2423:3:31"},"nativeSrc":"2423:18:31","nodeType":"YulFunctionCall","src":"2423:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"2410:12:31","nodeType":"YulIdentifier","src":"2410:12:31"},"nativeSrc":"2410:32:31","nodeType":"YulFunctionCall","src":"2410:32:31"},"variables":[{"name":"offset_1","nativeSrc":"2398:8:31","nodeType":"YulTypedName","src":"2398:8:31","type":""}]},{"body":{"nativeSrc":"2471:16:31","nodeType":"YulBlock","src":"2471:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2480:1:31","nodeType":"YulLiteral","src":"2480:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2483:1:31","nodeType":"YulLiteral","src":"2483:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2473:6:31","nodeType":"YulIdentifier","src":"2473:6:31"},"nativeSrc":"2473:12:31","nodeType":"YulFunctionCall","src":"2473:12:31"},"nativeSrc":"2473:12:31","nodeType":"YulExpressionStatement","src":"2473:12:31"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2457:8:31","nodeType":"YulIdentifier","src":"2457:8:31"},{"name":"_1","nativeSrc":"2467:2:31","nodeType":"YulIdentifier","src":"2467:2:31"}],"functionName":{"name":"gt","nativeSrc":"2454:2:31","nodeType":"YulIdentifier","src":"2454:2:31"},"nativeSrc":"2454:16:31","nodeType":"YulFunctionCall","src":"2454:16:31"},"nativeSrc":"2451:36:31","nodeType":"YulIf","src":"2451:36:31"},{"nativeSrc":"2496:98:31","nodeType":"YulVariableDeclaration","src":"2496:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2564:9:31","nodeType":"YulIdentifier","src":"2564:9:31"},{"name":"offset_1","nativeSrc":"2575:8:31","nodeType":"YulIdentifier","src":"2575:8:31"}],"functionName":{"name":"add","nativeSrc":"2560:3:31","nodeType":"YulIdentifier","src":"2560:3:31"},"nativeSrc":"2560:24:31","nodeType":"YulFunctionCall","src":"2560:24:31"},{"name":"dataEnd","nativeSrc":"2586:7:31","nodeType":"YulIdentifier","src":"2586:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2522:37:31","nodeType":"YulIdentifier","src":"2522:37:31"},"nativeSrc":"2522:72:31","nodeType":"YulFunctionCall","src":"2522:72:31"},"variables":[{"name":"value2_1","nativeSrc":"2500:8:31","nodeType":"YulTypedName","src":"2500:8:31","type":""},{"name":"value3_1","nativeSrc":"2510:8:31","nodeType":"YulTypedName","src":"2510:8:31","type":""}]},{"nativeSrc":"2603:18:31","nodeType":"YulAssignment","src":"2603:18:31","value":{"name":"value2_1","nativeSrc":"2613:8:31","nodeType":"YulIdentifier","src":"2613:8:31"},"variableNames":[{"name":"value2","nativeSrc":"2603:6:31","nodeType":"YulIdentifier","src":"2603:6:31"}]},{"nativeSrc":"2630:18:31","nodeType":"YulAssignment","src":"2630:18:31","value":{"name":"value3_1","nativeSrc":"2640:8:31","nodeType":"YulIdentifier","src":"2640:8:31"},"variableNames":[{"name":"value3","nativeSrc":"2630:6:31","nodeType":"YulIdentifier","src":"2630:6:31"}]},{"nativeSrc":"2657:48:31","nodeType":"YulVariableDeclaration","src":"2657:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2690:9:31","nodeType":"YulIdentifier","src":"2690:9:31"},{"kind":"number","nativeSrc":"2701:2:31","nodeType":"YulLiteral","src":"2701:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2686:3:31","nodeType":"YulIdentifier","src":"2686:3:31"},"nativeSrc":"2686:18:31","nodeType":"YulFunctionCall","src":"2686:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"2673:12:31","nodeType":"YulIdentifier","src":"2673:12:31"},"nativeSrc":"2673:32:31","nodeType":"YulFunctionCall","src":"2673:32:31"},"variables":[{"name":"offset_2","nativeSrc":"2661:8:31","nodeType":"YulTypedName","src":"2661:8:31","type":""}]},{"body":{"nativeSrc":"2734:16:31","nodeType":"YulBlock","src":"2734:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2743:1:31","nodeType":"YulLiteral","src":"2743:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2746:1:31","nodeType":"YulLiteral","src":"2746:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2736:6:31","nodeType":"YulIdentifier","src":"2736:6:31"},"nativeSrc":"2736:12:31","nodeType":"YulFunctionCall","src":"2736:12:31"},"nativeSrc":"2736:12:31","nodeType":"YulExpressionStatement","src":"2736:12:31"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"2720:8:31","nodeType":"YulIdentifier","src":"2720:8:31"},{"name":"_1","nativeSrc":"2730:2:31","nodeType":"YulIdentifier","src":"2730:2:31"}],"functionName":{"name":"gt","nativeSrc":"2717:2:31","nodeType":"YulIdentifier","src":"2717:2:31"},"nativeSrc":"2717:16:31","nodeType":"YulFunctionCall","src":"2717:16:31"},"nativeSrc":"2714:36:31","nodeType":"YulIf","src":"2714:36:31"},{"nativeSrc":"2759:98:31","nodeType":"YulVariableDeclaration","src":"2759:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2827:9:31","nodeType":"YulIdentifier","src":"2827:9:31"},{"name":"offset_2","nativeSrc":"2838:8:31","nodeType":"YulIdentifier","src":"2838:8:31"}],"functionName":{"name":"add","nativeSrc":"2823:3:31","nodeType":"YulIdentifier","src":"2823:3:31"},"nativeSrc":"2823:24:31","nodeType":"YulFunctionCall","src":"2823:24:31"},{"name":"dataEnd","nativeSrc":"2849:7:31","nodeType":"YulIdentifier","src":"2849:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2785:37:31","nodeType":"YulIdentifier","src":"2785:37:31"},"nativeSrc":"2785:72:31","nodeType":"YulFunctionCall","src":"2785:72:31"},"variables":[{"name":"value4_1","nativeSrc":"2763:8:31","nodeType":"YulTypedName","src":"2763:8:31","type":""},{"name":"value5_1","nativeSrc":"2773:8:31","nodeType":"YulTypedName","src":"2773:8:31","type":""}]},{"nativeSrc":"2866:18:31","nodeType":"YulAssignment","src":"2866:18:31","value":{"name":"value4_1","nativeSrc":"2876:8:31","nodeType":"YulIdentifier","src":"2876:8:31"},"variableNames":[{"name":"value4","nativeSrc":"2866:6:31","nodeType":"YulIdentifier","src":"2866:6:31"}]},{"nativeSrc":"2893:18:31","nodeType":"YulAssignment","src":"2893:18:31","value":{"name":"value5_1","nativeSrc":"2903:8:31","nodeType":"YulIdentifier","src":"2903:8:31"},"variableNames":[{"name":"value5","nativeSrc":"2893:6:31","nodeType":"YulIdentifier","src":"2893:6:31"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"1814:1103:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1964:9:31","nodeType":"YulTypedName","src":"1964:9:31","type":""},{"name":"dataEnd","nativeSrc":"1975:7:31","nodeType":"YulTypedName","src":"1975:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1987:6:31","nodeType":"YulTypedName","src":"1987:6:31","type":""},{"name":"value1","nativeSrc":"1995:6:31","nodeType":"YulTypedName","src":"1995:6:31","type":""},{"name":"value2","nativeSrc":"2003:6:31","nodeType":"YulTypedName","src":"2003:6:31","type":""},{"name":"value3","nativeSrc":"2011:6:31","nodeType":"YulTypedName","src":"2011:6:31","type":""},{"name":"value4","nativeSrc":"2019:6:31","nodeType":"YulTypedName","src":"2019:6:31","type":""},{"name":"value5","nativeSrc":"2027:6:31","nodeType":"YulTypedName","src":"2027:6:31","type":""}],"src":"1814:1103:31"},{"body":{"nativeSrc":"3147:879:31","nodeType":"YulBlock","src":"3147:879:31","statements":[{"body":{"nativeSrc":"3193:16:31","nodeType":"YulBlock","src":"3193:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3202:1:31","nodeType":"YulLiteral","src":"3202:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"3205:1:31","nodeType":"YulLiteral","src":"3205:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3195:6:31","nodeType":"YulIdentifier","src":"3195:6:31"},"nativeSrc":"3195:12:31","nodeType":"YulFunctionCall","src":"3195:12:31"},"nativeSrc":"3195:12:31","nodeType":"YulExpressionStatement","src":"3195:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3168:7:31","nodeType":"YulIdentifier","src":"3168:7:31"},{"name":"headStart","nativeSrc":"3177:9:31","nodeType":"YulIdentifier","src":"3177:9:31"}],"functionName":{"name":"sub","nativeSrc":"3164:3:31","nodeType":"YulIdentifier","src":"3164:3:31"},"nativeSrc":"3164:23:31","nodeType":"YulFunctionCall","src":"3164:23:31"},{"kind":"number","nativeSrc":"3189:2:31","nodeType":"YulLiteral","src":"3189:2:31","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3160:3:31","nodeType":"YulIdentifier","src":"3160:3:31"},"nativeSrc":"3160:32:31","nodeType":"YulFunctionCall","src":"3160:32:31"},"nativeSrc":"3157:52:31","nodeType":"YulIf","src":"3157:52:31"},{"nativeSrc":"3218:37:31","nodeType":"YulVariableDeclaration","src":"3218:37:31","value":{"arguments":[{"name":"headStart","nativeSrc":"3245:9:31","nodeType":"YulIdentifier","src":"3245:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"3232:12:31","nodeType":"YulIdentifier","src":"3232:12:31"},"nativeSrc":"3232:23:31","nodeType":"YulFunctionCall","src":"3232:23:31"},"variables":[{"name":"offset","nativeSrc":"3222:6:31","nodeType":"YulTypedName","src":"3222:6:31","type":""}]},{"nativeSrc":"3264:28:31","nodeType":"YulVariableDeclaration","src":"3264:28:31","value":{"kind":"number","nativeSrc":"3274:18:31","nodeType":"YulLiteral","src":"3274:18:31","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3268:2:31","nodeType":"YulTypedName","src":"3268:2:31","type":""}]},{"body":{"nativeSrc":"3319:16:31","nodeType":"YulBlock","src":"3319:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3328:1:31","nodeType":"YulLiteral","src":"3328:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"3331:1:31","nodeType":"YulLiteral","src":"3331:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3321:6:31","nodeType":"YulIdentifier","src":"3321:6:31"},"nativeSrc":"3321:12:31","nodeType":"YulFunctionCall","src":"3321:12:31"},"nativeSrc":"3321:12:31","nodeType":"YulExpressionStatement","src":"3321:12:31"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3307:6:31","nodeType":"YulIdentifier","src":"3307:6:31"},{"name":"_1","nativeSrc":"3315:2:31","nodeType":"YulIdentifier","src":"3315:2:31"}],"functionName":{"name":"gt","nativeSrc":"3304:2:31","nodeType":"YulIdentifier","src":"3304:2:31"},"nativeSrc":"3304:14:31","nodeType":"YulFunctionCall","src":"3304:14:31"},"nativeSrc":"3301:34:31","nodeType":"YulIf","src":"3301:34:31"},{"nativeSrc":"3344:96:31","nodeType":"YulVariableDeclaration","src":"3344:96:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3412:9:31","nodeType":"YulIdentifier","src":"3412:9:31"},{"name":"offset","nativeSrc":"3423:6:31","nodeType":"YulIdentifier","src":"3423:6:31"}],"functionName":{"name":"add","nativeSrc":"3408:3:31","nodeType":"YulIdentifier","src":"3408:3:31"},"nativeSrc":"3408:22:31","nodeType":"YulFunctionCall","src":"3408:22:31"},{"name":"dataEnd","nativeSrc":"3432:7:31","nodeType":"YulIdentifier","src":"3432:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3370:37:31","nodeType":"YulIdentifier","src":"3370:37:31"},"nativeSrc":"3370:70:31","nodeType":"YulFunctionCall","src":"3370:70:31"},"variables":[{"name":"value0_1","nativeSrc":"3348:8:31","nodeType":"YulTypedName","src":"3348:8:31","type":""},{"name":"value1_1","nativeSrc":"3358:8:31","nodeType":"YulTypedName","src":"3358:8:31","type":""}]},{"nativeSrc":"3449:18:31","nodeType":"YulAssignment","src":"3449:18:31","value":{"name":"value0_1","nativeSrc":"3459:8:31","nodeType":"YulIdentifier","src":"3459:8:31"},"variableNames":[{"name":"value0","nativeSrc":"3449:6:31","nodeType":"YulIdentifier","src":"3449:6:31"}]},{"nativeSrc":"3476:18:31","nodeType":"YulAssignment","src":"3476:18:31","value":{"name":"value1_1","nativeSrc":"3486:8:31","nodeType":"YulIdentifier","src":"3486:8:31"},"variableNames":[{"name":"value1","nativeSrc":"3476:6:31","nodeType":"YulIdentifier","src":"3476:6:31"}]},{"nativeSrc":"3503:48:31","nodeType":"YulVariableDeclaration","src":"3503:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3536:9:31","nodeType":"YulIdentifier","src":"3536:9:31"},{"kind":"number","nativeSrc":"3547:2:31","nodeType":"YulLiteral","src":"3547:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3532:3:31","nodeType":"YulIdentifier","src":"3532:3:31"},"nativeSrc":"3532:18:31","nodeType":"YulFunctionCall","src":"3532:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"3519:12:31","nodeType":"YulIdentifier","src":"3519:12:31"},"nativeSrc":"3519:32:31","nodeType":"YulFunctionCall","src":"3519:32:31"},"variables":[{"name":"offset_1","nativeSrc":"3507:8:31","nodeType":"YulTypedName","src":"3507:8:31","type":""}]},{"body":{"nativeSrc":"3580:16:31","nodeType":"YulBlock","src":"3580:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3589:1:31","nodeType":"YulLiteral","src":"3589:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"3592:1:31","nodeType":"YulLiteral","src":"3592:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3582:6:31","nodeType":"YulIdentifier","src":"3582:6:31"},"nativeSrc":"3582:12:31","nodeType":"YulFunctionCall","src":"3582:12:31"},"nativeSrc":"3582:12:31","nodeType":"YulExpressionStatement","src":"3582:12:31"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3566:8:31","nodeType":"YulIdentifier","src":"3566:8:31"},{"name":"_1","nativeSrc":"3576:2:31","nodeType":"YulIdentifier","src":"3576:2:31"}],"functionName":{"name":"gt","nativeSrc":"3563:2:31","nodeType":"YulIdentifier","src":"3563:2:31"},"nativeSrc":"3563:16:31","nodeType":"YulFunctionCall","src":"3563:16:31"},"nativeSrc":"3560:36:31","nodeType":"YulIf","src":"3560:36:31"},{"nativeSrc":"3605:98:31","nodeType":"YulVariableDeclaration","src":"3605:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3673:9:31","nodeType":"YulIdentifier","src":"3673:9:31"},{"name":"offset_1","nativeSrc":"3684:8:31","nodeType":"YulIdentifier","src":"3684:8:31"}],"functionName":{"name":"add","nativeSrc":"3669:3:31","nodeType":"YulIdentifier","src":"3669:3:31"},"nativeSrc":"3669:24:31","nodeType":"YulFunctionCall","src":"3669:24:31"},{"name":"dataEnd","nativeSrc":"3695:7:31","nodeType":"YulIdentifier","src":"3695:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3631:37:31","nodeType":"YulIdentifier","src":"3631:37:31"},"nativeSrc":"3631:72:31","nodeType":"YulFunctionCall","src":"3631:72:31"},"variables":[{"name":"value2_1","nativeSrc":"3609:8:31","nodeType":"YulTypedName","src":"3609:8:31","type":""},{"name":"value3_1","nativeSrc":"3619:8:31","nodeType":"YulTypedName","src":"3619:8:31","type":""}]},{"nativeSrc":"3712:18:31","nodeType":"YulAssignment","src":"3712:18:31","value":{"name":"value2_1","nativeSrc":"3722:8:31","nodeType":"YulIdentifier","src":"3722:8:31"},"variableNames":[{"name":"value2","nativeSrc":"3712:6:31","nodeType":"YulIdentifier","src":"3712:6:31"}]},{"nativeSrc":"3739:18:31","nodeType":"YulAssignment","src":"3739:18:31","value":{"name":"value3_1","nativeSrc":"3749:8:31","nodeType":"YulIdentifier","src":"3749:8:31"},"variableNames":[{"name":"value3","nativeSrc":"3739:6:31","nodeType":"YulIdentifier","src":"3739:6:31"}]},{"nativeSrc":"3766:48:31","nodeType":"YulVariableDeclaration","src":"3766:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3799:9:31","nodeType":"YulIdentifier","src":"3799:9:31"},{"kind":"number","nativeSrc":"3810:2:31","nodeType":"YulLiteral","src":"3810:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3795:3:31","nodeType":"YulIdentifier","src":"3795:3:31"},"nativeSrc":"3795:18:31","nodeType":"YulFunctionCall","src":"3795:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"3782:12:31","nodeType":"YulIdentifier","src":"3782:12:31"},"nativeSrc":"3782:32:31","nodeType":"YulFunctionCall","src":"3782:32:31"},"variables":[{"name":"offset_2","nativeSrc":"3770:8:31","nodeType":"YulTypedName","src":"3770:8:31","type":""}]},{"body":{"nativeSrc":"3843:16:31","nodeType":"YulBlock","src":"3843:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3852:1:31","nodeType":"YulLiteral","src":"3852:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"3855:1:31","nodeType":"YulLiteral","src":"3855:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3845:6:31","nodeType":"YulIdentifier","src":"3845:6:31"},"nativeSrc":"3845:12:31","nodeType":"YulFunctionCall","src":"3845:12:31"},"nativeSrc":"3845:12:31","nodeType":"YulExpressionStatement","src":"3845:12:31"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"3829:8:31","nodeType":"YulIdentifier","src":"3829:8:31"},{"name":"_1","nativeSrc":"3839:2:31","nodeType":"YulIdentifier","src":"3839:2:31"}],"functionName":{"name":"gt","nativeSrc":"3826:2:31","nodeType":"YulIdentifier","src":"3826:2:31"},"nativeSrc":"3826:16:31","nodeType":"YulFunctionCall","src":"3826:16:31"},"nativeSrc":"3823:36:31","nodeType":"YulIf","src":"3823:36:31"},{"nativeSrc":"3868:98:31","nodeType":"YulVariableDeclaration","src":"3868:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3936:9:31","nodeType":"YulIdentifier","src":"3936:9:31"},{"name":"offset_2","nativeSrc":"3947:8:31","nodeType":"YulIdentifier","src":"3947:8:31"}],"functionName":{"name":"add","nativeSrc":"3932:3:31","nodeType":"YulIdentifier","src":"3932:3:31"},"nativeSrc":"3932:24:31","nodeType":"YulFunctionCall","src":"3932:24:31"},{"name":"dataEnd","nativeSrc":"3958:7:31","nodeType":"YulIdentifier","src":"3958:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3894:37:31","nodeType":"YulIdentifier","src":"3894:37:31"},"nativeSrc":"3894:72:31","nodeType":"YulFunctionCall","src":"3894:72:31"},"variables":[{"name":"value4_1","nativeSrc":"3872:8:31","nodeType":"YulTypedName","src":"3872:8:31","type":""},{"name":"value5_1","nativeSrc":"3882:8:31","nodeType":"YulTypedName","src":"3882:8:31","type":""}]},{"nativeSrc":"3975:18:31","nodeType":"YulAssignment","src":"3975:18:31","value":{"name":"value4_1","nativeSrc":"3985:8:31","nodeType":"YulIdentifier","src":"3985:8:31"},"variableNames":[{"name":"value4","nativeSrc":"3975:6:31","nodeType":"YulIdentifier","src":"3975:6:31"}]},{"nativeSrc":"4002:18:31","nodeType":"YulAssignment","src":"4002:18:31","value":{"name":"value5_1","nativeSrc":"4012:8:31","nodeType":"YulIdentifier","src":"4012:8:31"},"variableNames":[{"name":"value5","nativeSrc":"4002:6:31","nodeType":"YulIdentifier","src":"4002:6:31"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"2922:1104:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3073:9:31","nodeType":"YulTypedName","src":"3073:9:31","type":""},{"name":"dataEnd","nativeSrc":"3084:7:31","nodeType":"YulTypedName","src":"3084:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3096:6:31","nodeType":"YulTypedName","src":"3096:6:31","type":""},{"name":"value1","nativeSrc":"3104:6:31","nodeType":"YulTypedName","src":"3104:6:31","type":""},{"name":"value2","nativeSrc":"3112:6:31","nodeType":"YulTypedName","src":"3112:6:31","type":""},{"name":"value3","nativeSrc":"3120:6:31","nodeType":"YulTypedName","src":"3120:6:31","type":""},{"name":"value4","nativeSrc":"3128:6:31","nodeType":"YulTypedName","src":"3128:6:31","type":""},{"name":"value5","nativeSrc":"3136:6:31","nodeType":"YulTypedName","src":"3136:6:31","type":""}],"src":"2922:1104:31"},{"body":{"nativeSrc":"4196:616:31","nodeType":"YulBlock","src":"4196:616:31","statements":[{"body":{"nativeSrc":"4242:16:31","nodeType":"YulBlock","src":"4242:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4251:1:31","nodeType":"YulLiteral","src":"4251:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4254:1:31","nodeType":"YulLiteral","src":"4254:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4244:6:31","nodeType":"YulIdentifier","src":"4244:6:31"},"nativeSrc":"4244:12:31","nodeType":"YulFunctionCall","src":"4244:12:31"},"nativeSrc":"4244:12:31","nodeType":"YulExpressionStatement","src":"4244:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4217:7:31","nodeType":"YulIdentifier","src":"4217:7:31"},{"name":"headStart","nativeSrc":"4226:9:31","nodeType":"YulIdentifier","src":"4226:9:31"}],"functionName":{"name":"sub","nativeSrc":"4213:3:31","nodeType":"YulIdentifier","src":"4213:3:31"},"nativeSrc":"4213:23:31","nodeType":"YulFunctionCall","src":"4213:23:31"},{"kind":"number","nativeSrc":"4238:2:31","nodeType":"YulLiteral","src":"4238:2:31","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4209:3:31","nodeType":"YulIdentifier","src":"4209:3:31"},"nativeSrc":"4209:32:31","nodeType":"YulFunctionCall","src":"4209:32:31"},"nativeSrc":"4206:52:31","nodeType":"YulIf","src":"4206:52:31"},{"nativeSrc":"4267:37:31","nodeType":"YulVariableDeclaration","src":"4267:37:31","value":{"arguments":[{"name":"headStart","nativeSrc":"4294:9:31","nodeType":"YulIdentifier","src":"4294:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"4281:12:31","nodeType":"YulIdentifier","src":"4281:12:31"},"nativeSrc":"4281:23:31","nodeType":"YulFunctionCall","src":"4281:23:31"},"variables":[{"name":"offset","nativeSrc":"4271:6:31","nodeType":"YulTypedName","src":"4271:6:31","type":""}]},{"nativeSrc":"4313:28:31","nodeType":"YulVariableDeclaration","src":"4313:28:31","value":{"kind":"number","nativeSrc":"4323:18:31","nodeType":"YulLiteral","src":"4323:18:31","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4317:2:31","nodeType":"YulTypedName","src":"4317:2:31","type":""}]},{"body":{"nativeSrc":"4368:16:31","nodeType":"YulBlock","src":"4368:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4377:1:31","nodeType":"YulLiteral","src":"4377:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4380:1:31","nodeType":"YulLiteral","src":"4380:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4370:6:31","nodeType":"YulIdentifier","src":"4370:6:31"},"nativeSrc":"4370:12:31","nodeType":"YulFunctionCall","src":"4370:12:31"},"nativeSrc":"4370:12:31","nodeType":"YulExpressionStatement","src":"4370:12:31"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4356:6:31","nodeType":"YulIdentifier","src":"4356:6:31"},{"name":"_1","nativeSrc":"4364:2:31","nodeType":"YulIdentifier","src":"4364:2:31"}],"functionName":{"name":"gt","nativeSrc":"4353:2:31","nodeType":"YulIdentifier","src":"4353:2:31"},"nativeSrc":"4353:14:31","nodeType":"YulFunctionCall","src":"4353:14:31"},"nativeSrc":"4350:34:31","nodeType":"YulIf","src":"4350:34:31"},{"nativeSrc":"4393:96:31","nodeType":"YulVariableDeclaration","src":"4393:96:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4461:9:31","nodeType":"YulIdentifier","src":"4461:9:31"},{"name":"offset","nativeSrc":"4472:6:31","nodeType":"YulIdentifier","src":"4472:6:31"}],"functionName":{"name":"add","nativeSrc":"4457:3:31","nodeType":"YulIdentifier","src":"4457:3:31"},"nativeSrc":"4457:22:31","nodeType":"YulFunctionCall","src":"4457:22:31"},{"name":"dataEnd","nativeSrc":"4481:7:31","nodeType":"YulIdentifier","src":"4481:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4419:37:31","nodeType":"YulIdentifier","src":"4419:37:31"},"nativeSrc":"4419:70:31","nodeType":"YulFunctionCall","src":"4419:70:31"},"variables":[{"name":"value0_1","nativeSrc":"4397:8:31","nodeType":"YulTypedName","src":"4397:8:31","type":""},{"name":"value1_1","nativeSrc":"4407:8:31","nodeType":"YulTypedName","src":"4407:8:31","type":""}]},{"nativeSrc":"4498:18:31","nodeType":"YulAssignment","src":"4498:18:31","value":{"name":"value0_1","nativeSrc":"4508:8:31","nodeType":"YulIdentifier","src":"4508:8:31"},"variableNames":[{"name":"value0","nativeSrc":"4498:6:31","nodeType":"YulIdentifier","src":"4498:6:31"}]},{"nativeSrc":"4525:18:31","nodeType":"YulAssignment","src":"4525:18:31","value":{"name":"value1_1","nativeSrc":"4535:8:31","nodeType":"YulIdentifier","src":"4535:8:31"},"variableNames":[{"name":"value1","nativeSrc":"4525:6:31","nodeType":"YulIdentifier","src":"4525:6:31"}]},{"nativeSrc":"4552:48:31","nodeType":"YulVariableDeclaration","src":"4552:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4585:9:31","nodeType":"YulIdentifier","src":"4585:9:31"},{"kind":"number","nativeSrc":"4596:2:31","nodeType":"YulLiteral","src":"4596:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4581:3:31","nodeType":"YulIdentifier","src":"4581:3:31"},"nativeSrc":"4581:18:31","nodeType":"YulFunctionCall","src":"4581:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"4568:12:31","nodeType":"YulIdentifier","src":"4568:12:31"},"nativeSrc":"4568:32:31","nodeType":"YulFunctionCall","src":"4568:32:31"},"variables":[{"name":"offset_1","nativeSrc":"4556:8:31","nodeType":"YulTypedName","src":"4556:8:31","type":""}]},{"body":{"nativeSrc":"4629:16:31","nodeType":"YulBlock","src":"4629:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4638:1:31","nodeType":"YulLiteral","src":"4638:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4641:1:31","nodeType":"YulLiteral","src":"4641:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4631:6:31","nodeType":"YulIdentifier","src":"4631:6:31"},"nativeSrc":"4631:12:31","nodeType":"YulFunctionCall","src":"4631:12:31"},"nativeSrc":"4631:12:31","nodeType":"YulExpressionStatement","src":"4631:12:31"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4615:8:31","nodeType":"YulIdentifier","src":"4615:8:31"},{"name":"_1","nativeSrc":"4625:2:31","nodeType":"YulIdentifier","src":"4625:2:31"}],"functionName":{"name":"gt","nativeSrc":"4612:2:31","nodeType":"YulIdentifier","src":"4612:2:31"},"nativeSrc":"4612:16:31","nodeType":"YulFunctionCall","src":"4612:16:31"},"nativeSrc":"4609:36:31","nodeType":"YulIf","src":"4609:36:31"},{"nativeSrc":"4654:98:31","nodeType":"YulVariableDeclaration","src":"4654:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4722:9:31","nodeType":"YulIdentifier","src":"4722:9:31"},{"name":"offset_1","nativeSrc":"4733:8:31","nodeType":"YulIdentifier","src":"4733:8:31"}],"functionName":{"name":"add","nativeSrc":"4718:3:31","nodeType":"YulIdentifier","src":"4718:3:31"},"nativeSrc":"4718:24:31","nodeType":"YulFunctionCall","src":"4718:24:31"},{"name":"dataEnd","nativeSrc":"4744:7:31","nodeType":"YulIdentifier","src":"4744:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4680:37:31","nodeType":"YulIdentifier","src":"4680:37:31"},"nativeSrc":"4680:72:31","nodeType":"YulFunctionCall","src":"4680:72:31"},"variables":[{"name":"value2_1","nativeSrc":"4658:8:31","nodeType":"YulTypedName","src":"4658:8:31","type":""},{"name":"value3_1","nativeSrc":"4668:8:31","nodeType":"YulTypedName","src":"4668:8:31","type":""}]},{"nativeSrc":"4761:18:31","nodeType":"YulAssignment","src":"4761:18:31","value":{"name":"value2_1","nativeSrc":"4771:8:31","nodeType":"YulIdentifier","src":"4771:8:31"},"variableNames":[{"name":"value2","nativeSrc":"4761:6:31","nodeType":"YulIdentifier","src":"4761:6:31"}]},{"nativeSrc":"4788:18:31","nodeType":"YulAssignment","src":"4788:18:31","value":{"name":"value3_1","nativeSrc":"4798:8:31","nodeType":"YulIdentifier","src":"4798:8:31"},"variableNames":[{"name":"value3","nativeSrc":"4788:6:31","nodeType":"YulIdentifier","src":"4788:6:31"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4031:781:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4138:9:31","nodeType":"YulTypedName","src":"4138:9:31","type":""},{"name":"dataEnd","nativeSrc":"4149:7:31","nodeType":"YulTypedName","src":"4149:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4161:6:31","nodeType":"YulTypedName","src":"4161:6:31","type":""},{"name":"value1","nativeSrc":"4169:6:31","nodeType":"YulTypedName","src":"4169:6:31","type":""},{"name":"value2","nativeSrc":"4177:6:31","nodeType":"YulTypedName","src":"4177:6:31","type":""},{"name":"value3","nativeSrc":"4185:6:31","nodeType":"YulTypedName","src":"4185:6:31","type":""}],"src":"4031:781:31"},{"body":{"nativeSrc":"4849:152:31","nodeType":"YulBlock","src":"4849:152:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4866:1:31","nodeType":"YulLiteral","src":"4866:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4869:77:31","nodeType":"YulLiteral","src":"4869:77:31","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4859:6:31","nodeType":"YulIdentifier","src":"4859:6:31"},"nativeSrc":"4859:88:31","nodeType":"YulFunctionCall","src":"4859:88:31"},"nativeSrc":"4859:88:31","nodeType":"YulExpressionStatement","src":"4859:88:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4963:1:31","nodeType":"YulLiteral","src":"4963:1:31","type":"","value":"4"},{"kind":"number","nativeSrc":"4966:4:31","nodeType":"YulLiteral","src":"4966:4:31","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"4956:6:31","nodeType":"YulIdentifier","src":"4956:6:31"},"nativeSrc":"4956:15:31","nodeType":"YulFunctionCall","src":"4956:15:31"},"nativeSrc":"4956:15:31","nodeType":"YulExpressionStatement","src":"4956:15:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4987:1:31","nodeType":"YulLiteral","src":"4987:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4990:4:31","nodeType":"YulLiteral","src":"4990:4:31","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4980:6:31","nodeType":"YulIdentifier","src":"4980:6:31"},"nativeSrc":"4980:15:31","nodeType":"YulFunctionCall","src":"4980:15:31"},"nativeSrc":"4980:15:31","nodeType":"YulExpressionStatement","src":"4980:15:31"}]},"name":"panic_error_0x32","nativeSrc":"4817:184:31","nodeType":"YulFunctionDefinition","src":"4817:184:31"},{"body":{"nativeSrc":"5091:177:31","nodeType":"YulBlock","src":"5091:177:31","statements":[{"body":{"nativeSrc":"5137:16:31","nodeType":"YulBlock","src":"5137:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5146:1:31","nodeType":"YulLiteral","src":"5146:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"5149:1:31","nodeType":"YulLiteral","src":"5149:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5139:6:31","nodeType":"YulIdentifier","src":"5139:6:31"},"nativeSrc":"5139:12:31","nodeType":"YulFunctionCall","src":"5139:12:31"},"nativeSrc":"5139:12:31","nodeType":"YulExpressionStatement","src":"5139:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5112:7:31","nodeType":"YulIdentifier","src":"5112:7:31"},{"name":"headStart","nativeSrc":"5121:9:31","nodeType":"YulIdentifier","src":"5121:9:31"}],"functionName":{"name":"sub","nativeSrc":"5108:3:31","nodeType":"YulIdentifier","src":"5108:3:31"},"nativeSrc":"5108:23:31","nodeType":"YulFunctionCall","src":"5108:23:31"},{"kind":"number","nativeSrc":"5133:2:31","nodeType":"YulLiteral","src":"5133:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5104:3:31","nodeType":"YulIdentifier","src":"5104:3:31"},"nativeSrc":"5104:32:31","nodeType":"YulFunctionCall","src":"5104:32:31"},"nativeSrc":"5101:52:31","nodeType":"YulIf","src":"5101:52:31"},{"nativeSrc":"5162:36:31","nodeType":"YulVariableDeclaration","src":"5162:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"5188:9:31","nodeType":"YulIdentifier","src":"5188:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"5175:12:31","nodeType":"YulIdentifier","src":"5175:12:31"},"nativeSrc":"5175:23:31","nodeType":"YulFunctionCall","src":"5175:23:31"},"variables":[{"name":"value","nativeSrc":"5166:5:31","nodeType":"YulTypedName","src":"5166:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5232:5:31","nodeType":"YulIdentifier","src":"5232:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5207:24:31","nodeType":"YulIdentifier","src":"5207:24:31"},"nativeSrc":"5207:31:31","nodeType":"YulFunctionCall","src":"5207:31:31"},"nativeSrc":"5207:31:31","nodeType":"YulExpressionStatement","src":"5207:31:31"},{"nativeSrc":"5247:15:31","nodeType":"YulAssignment","src":"5247:15:31","value":{"name":"value","nativeSrc":"5257:5:31","nodeType":"YulIdentifier","src":"5257:5:31"},"variableNames":[{"name":"value0","nativeSrc":"5247:6:31","nodeType":"YulIdentifier","src":"5247:6:31"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1243","nativeSrc":"5006:262:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5057:9:31","nodeType":"YulTypedName","src":"5057:9:31","type":""},{"name":"dataEnd","nativeSrc":"5068:7:31","nodeType":"YulTypedName","src":"5068:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5080:6:31","nodeType":"YulTypedName","src":"5080:6:31","type":""}],"src":"5006:262:31"},{"body":{"nativeSrc":"5359:177:31","nodeType":"YulBlock","src":"5359:177:31","statements":[{"body":{"nativeSrc":"5405:16:31","nodeType":"YulBlock","src":"5405:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5414:1:31","nodeType":"YulLiteral","src":"5414:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"5417:1:31","nodeType":"YulLiteral","src":"5417:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5407:6:31","nodeType":"YulIdentifier","src":"5407:6:31"},"nativeSrc":"5407:12:31","nodeType":"YulFunctionCall","src":"5407:12:31"},"nativeSrc":"5407:12:31","nodeType":"YulExpressionStatement","src":"5407:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5380:7:31","nodeType":"YulIdentifier","src":"5380:7:31"},{"name":"headStart","nativeSrc":"5389:9:31","nodeType":"YulIdentifier","src":"5389:9:31"}],"functionName":{"name":"sub","nativeSrc":"5376:3:31","nodeType":"YulIdentifier","src":"5376:3:31"},"nativeSrc":"5376:23:31","nodeType":"YulFunctionCall","src":"5376:23:31"},{"kind":"number","nativeSrc":"5401:2:31","nodeType":"YulLiteral","src":"5401:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5372:3:31","nodeType":"YulIdentifier","src":"5372:3:31"},"nativeSrc":"5372:32:31","nodeType":"YulFunctionCall","src":"5372:32:31"},"nativeSrc":"5369:52:31","nodeType":"YulIf","src":"5369:52:31"},{"nativeSrc":"5430:36:31","nodeType":"YulVariableDeclaration","src":"5430:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"5456:9:31","nodeType":"YulIdentifier","src":"5456:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"5443:12:31","nodeType":"YulIdentifier","src":"5443:12:31"},"nativeSrc":"5443:23:31","nodeType":"YulFunctionCall","src":"5443:23:31"},"variables":[{"name":"value","nativeSrc":"5434:5:31","nodeType":"YulTypedName","src":"5434:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5500:5:31","nodeType":"YulIdentifier","src":"5500:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5475:24:31","nodeType":"YulIdentifier","src":"5475:24:31"},"nativeSrc":"5475:31:31","nodeType":"YulFunctionCall","src":"5475:31:31"},"nativeSrc":"5475:31:31","nodeType":"YulExpressionStatement","src":"5475:31:31"},{"nativeSrc":"5515:15:31","nodeType":"YulAssignment","src":"5515:15:31","value":{"name":"value","nativeSrc":"5525:5:31","nodeType":"YulIdentifier","src":"5525:5:31"},"variableNames":[{"name":"value0","nativeSrc":"5515:6:31","nodeType":"YulIdentifier","src":"5515:6:31"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1162","nativeSrc":"5273:263:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5325:9:31","nodeType":"YulTypedName","src":"5325:9:31","type":""},{"name":"dataEnd","nativeSrc":"5336:7:31","nodeType":"YulTypedName","src":"5336:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5348:6:31","nodeType":"YulTypedName","src":"5348:6:31","type":""}],"src":"5273:263:31"},{"body":{"nativeSrc":"5698:241:31","nodeType":"YulBlock","src":"5698:241:31","statements":[{"nativeSrc":"5708:26:31","nodeType":"YulAssignment","src":"5708:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"5720:9:31","nodeType":"YulIdentifier","src":"5720:9:31"},{"kind":"number","nativeSrc":"5731:2:31","nodeType":"YulLiteral","src":"5731:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5716:3:31","nodeType":"YulIdentifier","src":"5716:3:31"},"nativeSrc":"5716:18:31","nodeType":"YulFunctionCall","src":"5716:18:31"},"variableNames":[{"name":"tail","nativeSrc":"5708:4:31","nodeType":"YulIdentifier","src":"5708:4:31"}]},{"nativeSrc":"5743:52:31","nodeType":"YulVariableDeclaration","src":"5743:52:31","value":{"kind":"number","nativeSrc":"5753:42:31","nodeType":"YulLiteral","src":"5753:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5747:2:31","nodeType":"YulTypedName","src":"5747:2:31","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5811:9:31","nodeType":"YulIdentifier","src":"5811:9:31"},{"arguments":[{"name":"value0","nativeSrc":"5826:6:31","nodeType":"YulIdentifier","src":"5826:6:31"},{"name":"_1","nativeSrc":"5834:2:31","nodeType":"YulIdentifier","src":"5834:2:31"}],"functionName":{"name":"and","nativeSrc":"5822:3:31","nodeType":"YulIdentifier","src":"5822:3:31"},"nativeSrc":"5822:15:31","nodeType":"YulFunctionCall","src":"5822:15:31"}],"functionName":{"name":"mstore","nativeSrc":"5804:6:31","nodeType":"YulIdentifier","src":"5804:6:31"},"nativeSrc":"5804:34:31","nodeType":"YulFunctionCall","src":"5804:34:31"},"nativeSrc":"5804:34:31","nodeType":"YulExpressionStatement","src":"5804:34:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5858:9:31","nodeType":"YulIdentifier","src":"5858:9:31"},{"kind":"number","nativeSrc":"5869:2:31","nodeType":"YulLiteral","src":"5869:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5854:3:31","nodeType":"YulIdentifier","src":"5854:3:31"},"nativeSrc":"5854:18:31","nodeType":"YulFunctionCall","src":"5854:18:31"},{"arguments":[{"name":"value1","nativeSrc":"5878:6:31","nodeType":"YulIdentifier","src":"5878:6:31"},{"name":"_1","nativeSrc":"5886:2:31","nodeType":"YulIdentifier","src":"5886:2:31"}],"functionName":{"name":"and","nativeSrc":"5874:3:31","nodeType":"YulIdentifier","src":"5874:3:31"},"nativeSrc":"5874:15:31","nodeType":"YulFunctionCall","src":"5874:15:31"}],"functionName":{"name":"mstore","nativeSrc":"5847:6:31","nodeType":"YulIdentifier","src":"5847:6:31"},"nativeSrc":"5847:43:31","nodeType":"YulFunctionCall","src":"5847:43:31"},"nativeSrc":"5847:43:31","nodeType":"YulExpressionStatement","src":"5847:43:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5910:9:31","nodeType":"YulIdentifier","src":"5910:9:31"},{"kind":"number","nativeSrc":"5921:2:31","nodeType":"YulLiteral","src":"5921:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5906:3:31","nodeType":"YulIdentifier","src":"5906:3:31"},"nativeSrc":"5906:18:31","nodeType":"YulFunctionCall","src":"5906:18:31"},{"name":"value2","nativeSrc":"5926:6:31","nodeType":"YulIdentifier","src":"5926:6:31"}],"functionName":{"name":"mstore","nativeSrc":"5899:6:31","nodeType":"YulIdentifier","src":"5899:6:31"},"nativeSrc":"5899:34:31","nodeType":"YulFunctionCall","src":"5899:34:31"},"nativeSrc":"5899:34:31","nodeType":"YulExpressionStatement","src":"5899:34:31"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"5541:398:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5651:9:31","nodeType":"YulTypedName","src":"5651:9:31","type":""},{"name":"value2","nativeSrc":"5662:6:31","nodeType":"YulTypedName","src":"5662:6:31","type":""},{"name":"value1","nativeSrc":"5670:6:31","nodeType":"YulTypedName","src":"5670:6:31","type":""},{"name":"value0","nativeSrc":"5678:6:31","nodeType":"YulTypedName","src":"5678:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5689:4:31","nodeType":"YulTypedName","src":"5689:4:31","type":""}],"src":"5541:398:31"},{"body":{"nativeSrc":"6022:177:31","nodeType":"YulBlock","src":"6022:177:31","statements":[{"body":{"nativeSrc":"6068:16:31","nodeType":"YulBlock","src":"6068:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6077:1:31","nodeType":"YulLiteral","src":"6077:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"6080:1:31","nodeType":"YulLiteral","src":"6080:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6070:6:31","nodeType":"YulIdentifier","src":"6070:6:31"},"nativeSrc":"6070:12:31","nodeType":"YulFunctionCall","src":"6070:12:31"},"nativeSrc":"6070:12:31","nodeType":"YulExpressionStatement","src":"6070:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6043:7:31","nodeType":"YulIdentifier","src":"6043:7:31"},{"name":"headStart","nativeSrc":"6052:9:31","nodeType":"YulIdentifier","src":"6052:9:31"}],"functionName":{"name":"sub","nativeSrc":"6039:3:31","nodeType":"YulIdentifier","src":"6039:3:31"},"nativeSrc":"6039:23:31","nodeType":"YulFunctionCall","src":"6039:23:31"},{"kind":"number","nativeSrc":"6064:2:31","nodeType":"YulLiteral","src":"6064:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6035:3:31","nodeType":"YulIdentifier","src":"6035:3:31"},"nativeSrc":"6035:32:31","nodeType":"YulFunctionCall","src":"6035:32:31"},"nativeSrc":"6032:52:31","nodeType":"YulIf","src":"6032:52:31"},{"nativeSrc":"6093:36:31","nodeType":"YulVariableDeclaration","src":"6093:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"6119:9:31","nodeType":"YulIdentifier","src":"6119:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"6106:12:31","nodeType":"YulIdentifier","src":"6106:12:31"},"nativeSrc":"6106:23:31","nodeType":"YulFunctionCall","src":"6106:23:31"},"variables":[{"name":"value","nativeSrc":"6097:5:31","nodeType":"YulTypedName","src":"6097:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6163:5:31","nodeType":"YulIdentifier","src":"6163:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6138:24:31","nodeType":"YulIdentifier","src":"6138:24:31"},"nativeSrc":"6138:31:31","nodeType":"YulFunctionCall","src":"6138:31:31"},"nativeSrc":"6138:31:31","nodeType":"YulExpressionStatement","src":"6138:31:31"},{"nativeSrc":"6178:15:31","nodeType":"YulAssignment","src":"6178:15:31","value":{"name":"value","nativeSrc":"6188:5:31","nodeType":"YulIdentifier","src":"6188:5:31"},"variableNames":[{"name":"value0","nativeSrc":"6178:6:31","nodeType":"YulIdentifier","src":"6178:6:31"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"5944:255:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5988:9:31","nodeType":"YulTypedName","src":"5988:9:31","type":""},{"name":"dataEnd","nativeSrc":"5999:7:31","nodeType":"YulTypedName","src":"5999:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6011:6:31","nodeType":"YulTypedName","src":"6011:6:31","type":""}],"src":"5944:255:31"},{"body":{"nativeSrc":"6253:233:31","nodeType":"YulBlock","src":"6253:233:31","statements":[{"nativeSrc":"6263:17:31","nodeType":"YulAssignment","src":"6263:17:31","value":{"arguments":[{"name":"x","nativeSrc":"6275:1:31","nodeType":"YulIdentifier","src":"6275:1:31"},{"name":"y","nativeSrc":"6278:1:31","nodeType":"YulIdentifier","src":"6278:1:31"}],"functionName":{"name":"sub","nativeSrc":"6271:3:31","nodeType":"YulIdentifier","src":"6271:3:31"},"nativeSrc":"6271:9:31","nodeType":"YulFunctionCall","src":"6271:9:31"},"variableNames":[{"name":"diff","nativeSrc":"6263:4:31","nodeType":"YulIdentifier","src":"6263:4:31"}]},{"body":{"nativeSrc":"6312:168:31","nodeType":"YulBlock","src":"6312:168:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6333:1:31","nodeType":"YulLiteral","src":"6333:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"6336:77:31","nodeType":"YulLiteral","src":"6336:77:31","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6326:6:31","nodeType":"YulIdentifier","src":"6326:6:31"},"nativeSrc":"6326:88:31","nodeType":"YulFunctionCall","src":"6326:88:31"},"nativeSrc":"6326:88:31","nodeType":"YulExpressionStatement","src":"6326:88:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6434:1:31","nodeType":"YulLiteral","src":"6434:1:31","type":"","value":"4"},{"kind":"number","nativeSrc":"6437:4:31","nodeType":"YulLiteral","src":"6437:4:31","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"6427:6:31","nodeType":"YulIdentifier","src":"6427:6:31"},"nativeSrc":"6427:15:31","nodeType":"YulFunctionCall","src":"6427:15:31"},"nativeSrc":"6427:15:31","nodeType":"YulExpressionStatement","src":"6427:15:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6462:1:31","nodeType":"YulLiteral","src":"6462:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"6465:4:31","nodeType":"YulLiteral","src":"6465:4:31","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6455:6:31","nodeType":"YulIdentifier","src":"6455:6:31"},"nativeSrc":"6455:15:31","nodeType":"YulFunctionCall","src":"6455:15:31"},"nativeSrc":"6455:15:31","nodeType":"YulExpressionStatement","src":"6455:15:31"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6295:4:31","nodeType":"YulIdentifier","src":"6295:4:31"},{"name":"x","nativeSrc":"6301:1:31","nodeType":"YulIdentifier","src":"6301:1:31"}],"functionName":{"name":"gt","nativeSrc":"6292:2:31","nodeType":"YulIdentifier","src":"6292:2:31"},"nativeSrc":"6292:11:31","nodeType":"YulFunctionCall","src":"6292:11:31"},"nativeSrc":"6289:191:31","nodeType":"YulIf","src":"6289:191:31"}]},"name":"checked_sub_t_uint256","nativeSrc":"6204:282:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6235:1:31","nodeType":"YulTypedName","src":"6235:1:31","type":""},{"name":"y","nativeSrc":"6238:1:31","nodeType":"YulTypedName","src":"6238:1:31","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6244:4:31","nodeType":"YulTypedName","src":"6244:4:31","type":""}],"src":"6204:282:31"},{"body":{"nativeSrc":"6620:168:31","nodeType":"YulBlock","src":"6620:168:31","statements":[{"nativeSrc":"6630:26:31","nodeType":"YulAssignment","src":"6630:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"6642:9:31","nodeType":"YulIdentifier","src":"6642:9:31"},{"kind":"number","nativeSrc":"6653:2:31","nodeType":"YulLiteral","src":"6653:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6638:3:31","nodeType":"YulIdentifier","src":"6638:3:31"},"nativeSrc":"6638:18:31","nodeType":"YulFunctionCall","src":"6638:18:31"},"variableNames":[{"name":"tail","nativeSrc":"6630:4:31","nodeType":"YulIdentifier","src":"6630:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6672:9:31","nodeType":"YulIdentifier","src":"6672:9:31"},{"arguments":[{"name":"value0","nativeSrc":"6687:6:31","nodeType":"YulIdentifier","src":"6687:6:31"},{"kind":"number","nativeSrc":"6695:42:31","nodeType":"YulLiteral","src":"6695:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6683:3:31","nodeType":"YulIdentifier","src":"6683:3:31"},"nativeSrc":"6683:55:31","nodeType":"YulFunctionCall","src":"6683:55:31"}],"functionName":{"name":"mstore","nativeSrc":"6665:6:31","nodeType":"YulIdentifier","src":"6665:6:31"},"nativeSrc":"6665:74:31","nodeType":"YulFunctionCall","src":"6665:74:31"},"nativeSrc":"6665:74:31","nodeType":"YulExpressionStatement","src":"6665:74:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6759:9:31","nodeType":"YulIdentifier","src":"6759:9:31"},{"kind":"number","nativeSrc":"6770:2:31","nodeType":"YulLiteral","src":"6770:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6755:3:31","nodeType":"YulIdentifier","src":"6755:3:31"},"nativeSrc":"6755:18:31","nodeType":"YulFunctionCall","src":"6755:18:31"},{"name":"value1","nativeSrc":"6775:6:31","nodeType":"YulIdentifier","src":"6775:6:31"}],"functionName":{"name":"mstore","nativeSrc":"6748:6:31","nodeType":"YulIdentifier","src":"6748:6:31"},"nativeSrc":"6748:34:31","nodeType":"YulFunctionCall","src":"6748:34:31"},"nativeSrc":"6748:34:31","nodeType":"YulExpressionStatement","src":"6748:34:31"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"6491:297:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6581:9:31","nodeType":"YulTypedName","src":"6581:9:31","type":""},{"name":"value1","nativeSrc":"6592:6:31","nodeType":"YulTypedName","src":"6592:6:31","type":""},{"name":"value0","nativeSrc":"6600:6:31","nodeType":"YulTypedName","src":"6600:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6611:4:31","nodeType":"YulTypedName","src":"6611:4:31","type":""}],"src":"6491:297:31"},{"body":{"nativeSrc":"6967:179:31","nodeType":"YulBlock","src":"6967:179:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6984:9:31","nodeType":"YulIdentifier","src":"6984:9:31"},{"kind":"number","nativeSrc":"6995:2:31","nodeType":"YulLiteral","src":"6995:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6977:6:31","nodeType":"YulIdentifier","src":"6977:6:31"},"nativeSrc":"6977:21:31","nodeType":"YulFunctionCall","src":"6977:21:31"},"nativeSrc":"6977:21:31","nodeType":"YulExpressionStatement","src":"6977:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7018:9:31","nodeType":"YulIdentifier","src":"7018:9:31"},{"kind":"number","nativeSrc":"7029:2:31","nodeType":"YulLiteral","src":"7029:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7014:3:31","nodeType":"YulIdentifier","src":"7014:3:31"},"nativeSrc":"7014:18:31","nodeType":"YulFunctionCall","src":"7014:18:31"},{"kind":"number","nativeSrc":"7034:2:31","nodeType":"YulLiteral","src":"7034:2:31","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"7007:6:31","nodeType":"YulIdentifier","src":"7007:6:31"},"nativeSrc":"7007:30:31","nodeType":"YulFunctionCall","src":"7007:30:31"},"nativeSrc":"7007:30:31","nodeType":"YulExpressionStatement","src":"7007:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7057:9:31","nodeType":"YulIdentifier","src":"7057:9:31"},{"kind":"number","nativeSrc":"7068:2:31","nodeType":"YulLiteral","src":"7068:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7053:3:31","nodeType":"YulIdentifier","src":"7053:3:31"},"nativeSrc":"7053:18:31","nodeType":"YulFunctionCall","src":"7053:18:31"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"7073:31:31","nodeType":"YulLiteral","src":"7073:31:31","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"7046:6:31","nodeType":"YulIdentifier","src":"7046:6:31"},"nativeSrc":"7046:59:31","nodeType":"YulFunctionCall","src":"7046:59:31"},"nativeSrc":"7046:59:31","nodeType":"YulExpressionStatement","src":"7046:59:31"},{"nativeSrc":"7114:26:31","nodeType":"YulAssignment","src":"7114:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"7126:9:31","nodeType":"YulIdentifier","src":"7126:9:31"},{"kind":"number","nativeSrc":"7137:2:31","nodeType":"YulLiteral","src":"7137:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7122:3:31","nodeType":"YulIdentifier","src":"7122:3:31"},"nativeSrc":"7122:18:31","nodeType":"YulFunctionCall","src":"7122:18:31"},"variableNames":[{"name":"tail","nativeSrc":"7114:4:31","nodeType":"YulIdentifier","src":"7114:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6793:353:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6944:9:31","nodeType":"YulTypedName","src":"6944:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6958:4:31","nodeType":"YulTypedName","src":"6958:4:31","type":""}],"src":"6793:353:31"},{"body":{"nativeSrc":"7342:14:31","nodeType":"YulBlock","src":"7342:14:31","statements":[{"nativeSrc":"7344:10:31","nodeType":"YulAssignment","src":"7344:10:31","value":{"name":"pos","nativeSrc":"7351:3:31","nodeType":"YulIdentifier","src":"7351:3:31"},"variableNames":[{"name":"end","nativeSrc":"7344:3:31","nodeType":"YulIdentifier","src":"7344:3:31"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"7151:205:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"7326:3:31","nodeType":"YulTypedName","src":"7326:3:31","type":""}],"returnVariables":[{"name":"end","nativeSrc":"7334:3:31","nodeType":"YulTypedName","src":"7334:3:31","type":""}],"src":"7151:205:31"},{"body":{"nativeSrc":"7535:248:31","nodeType":"YulBlock","src":"7535:248:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7552:9:31","nodeType":"YulIdentifier","src":"7552:9:31"},{"kind":"number","nativeSrc":"7563:2:31","nodeType":"YulLiteral","src":"7563:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7545:6:31","nodeType":"YulIdentifier","src":"7545:6:31"},"nativeSrc":"7545:21:31","nodeType":"YulFunctionCall","src":"7545:21:31"},"nativeSrc":"7545:21:31","nodeType":"YulExpressionStatement","src":"7545:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7586:9:31","nodeType":"YulIdentifier","src":"7586:9:31"},{"kind":"number","nativeSrc":"7597:2:31","nodeType":"YulLiteral","src":"7597:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7582:3:31","nodeType":"YulIdentifier","src":"7582:3:31"},"nativeSrc":"7582:18:31","nodeType":"YulFunctionCall","src":"7582:18:31"},{"kind":"number","nativeSrc":"7602:2:31","nodeType":"YulLiteral","src":"7602:2:31","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"7575:6:31","nodeType":"YulIdentifier","src":"7575:6:31"},"nativeSrc":"7575:30:31","nodeType":"YulFunctionCall","src":"7575:30:31"},"nativeSrc":"7575:30:31","nodeType":"YulExpressionStatement","src":"7575:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7625:9:31","nodeType":"YulIdentifier","src":"7625:9:31"},{"kind":"number","nativeSrc":"7636:2:31","nodeType":"YulLiteral","src":"7636:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7621:3:31","nodeType":"YulIdentifier","src":"7621:3:31"},"nativeSrc":"7621:18:31","nodeType":"YulFunctionCall","src":"7621:18:31"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"7641:34:31","nodeType":"YulLiteral","src":"7641:34:31","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"7614:6:31","nodeType":"YulIdentifier","src":"7614:6:31"},"nativeSrc":"7614:62:31","nodeType":"YulFunctionCall","src":"7614:62:31"},"nativeSrc":"7614:62:31","nodeType":"YulExpressionStatement","src":"7614:62:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7696:9:31","nodeType":"YulIdentifier","src":"7696:9:31"},{"kind":"number","nativeSrc":"7707:2:31","nodeType":"YulLiteral","src":"7707:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7692:3:31","nodeType":"YulIdentifier","src":"7692:3:31"},"nativeSrc":"7692:18:31","nodeType":"YulFunctionCall","src":"7692:18:31"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"7712:28:31","nodeType":"YulLiteral","src":"7712:28:31","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"7685:6:31","nodeType":"YulIdentifier","src":"7685:6:31"},"nativeSrc":"7685:56:31","nodeType":"YulFunctionCall","src":"7685:56:31"},"nativeSrc":"7685:56:31","nodeType":"YulExpressionStatement","src":"7685:56:31"},{"nativeSrc":"7750:27:31","nodeType":"YulAssignment","src":"7750:27:31","value":{"arguments":[{"name":"headStart","nativeSrc":"7762:9:31","nodeType":"YulIdentifier","src":"7762:9:31"},{"kind":"number","nativeSrc":"7773:3:31","nodeType":"YulLiteral","src":"7773:3:31","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7758:3:31","nodeType":"YulIdentifier","src":"7758:3:31"},"nativeSrc":"7758:19:31","nodeType":"YulFunctionCall","src":"7758:19:31"},"variableNames":[{"name":"tail","nativeSrc":"7750:4:31","nodeType":"YulIdentifier","src":"7750:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7361:422:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7512:9:31","nodeType":"YulTypedName","src":"7512:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7526:4:31","nodeType":"YulTypedName","src":"7526:4:31","type":""}],"src":"7361:422:31"},{"body":{"nativeSrc":"7917:198:31","nodeType":"YulBlock","src":"7917:198:31","statements":[{"nativeSrc":"7927:26:31","nodeType":"YulAssignment","src":"7927:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"7939:9:31","nodeType":"YulIdentifier","src":"7939:9:31"},{"kind":"number","nativeSrc":"7950:2:31","nodeType":"YulLiteral","src":"7950:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7935:3:31","nodeType":"YulIdentifier","src":"7935:3:31"},"nativeSrc":"7935:18:31","nodeType":"YulFunctionCall","src":"7935:18:31"},"variableNames":[{"name":"tail","nativeSrc":"7927:4:31","nodeType":"YulIdentifier","src":"7927:4:31"}]},{"nativeSrc":"7962:52:31","nodeType":"YulVariableDeclaration","src":"7962:52:31","value":{"kind":"number","nativeSrc":"7972:42:31","nodeType":"YulLiteral","src":"7972:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7966:2:31","nodeType":"YulTypedName","src":"7966:2:31","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8030:9:31","nodeType":"YulIdentifier","src":"8030:9:31"},{"arguments":[{"name":"value0","nativeSrc":"8045:6:31","nodeType":"YulIdentifier","src":"8045:6:31"},{"name":"_1","nativeSrc":"8053:2:31","nodeType":"YulIdentifier","src":"8053:2:31"}],"functionName":{"name":"and","nativeSrc":"8041:3:31","nodeType":"YulIdentifier","src":"8041:3:31"},"nativeSrc":"8041:15:31","nodeType":"YulFunctionCall","src":"8041:15:31"}],"functionName":{"name":"mstore","nativeSrc":"8023:6:31","nodeType":"YulIdentifier","src":"8023:6:31"},"nativeSrc":"8023:34:31","nodeType":"YulFunctionCall","src":"8023:34:31"},"nativeSrc":"8023:34:31","nodeType":"YulExpressionStatement","src":"8023:34:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8077:9:31","nodeType":"YulIdentifier","src":"8077:9:31"},{"kind":"number","nativeSrc":"8088:2:31","nodeType":"YulLiteral","src":"8088:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8073:3:31","nodeType":"YulIdentifier","src":"8073:3:31"},"nativeSrc":"8073:18:31","nodeType":"YulFunctionCall","src":"8073:18:31"},{"arguments":[{"name":"value1","nativeSrc":"8097:6:31","nodeType":"YulIdentifier","src":"8097:6:31"},{"name":"_1","nativeSrc":"8105:2:31","nodeType":"YulIdentifier","src":"8105:2:31"}],"functionName":{"name":"and","nativeSrc":"8093:3:31","nodeType":"YulIdentifier","src":"8093:3:31"},"nativeSrc":"8093:15:31","nodeType":"YulFunctionCall","src":"8093:15:31"}],"functionName":{"name":"mstore","nativeSrc":"8066:6:31","nodeType":"YulIdentifier","src":"8066:6:31"},"nativeSrc":"8066:43:31","nodeType":"YulFunctionCall","src":"8066:43:31"},"nativeSrc":"8066:43:31","nodeType":"YulExpressionStatement","src":"8066:43:31"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"7788:327:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7878:9:31","nodeType":"YulTypedName","src":"7878:9:31","type":""},{"name":"value1","nativeSrc":"7889:6:31","nodeType":"YulTypedName","src":"7889:6:31","type":""},{"name":"value0","nativeSrc":"7897:6:31","nodeType":"YulTypedName","src":"7897:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7908:4:31","nodeType":"YulTypedName","src":"7908:4:31","type":""}],"src":"7788:327:31"},{"body":{"nativeSrc":"8198:199:31","nodeType":"YulBlock","src":"8198:199:31","statements":[{"body":{"nativeSrc":"8244:16:31","nodeType":"YulBlock","src":"8244:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8253:1:31","nodeType":"YulLiteral","src":"8253:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"8256:1:31","nodeType":"YulLiteral","src":"8256:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8246:6:31","nodeType":"YulIdentifier","src":"8246:6:31"},"nativeSrc":"8246:12:31","nodeType":"YulFunctionCall","src":"8246:12:31"},"nativeSrc":"8246:12:31","nodeType":"YulExpressionStatement","src":"8246:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8219:7:31","nodeType":"YulIdentifier","src":"8219:7:31"},{"name":"headStart","nativeSrc":"8228:9:31","nodeType":"YulIdentifier","src":"8228:9:31"}],"functionName":{"name":"sub","nativeSrc":"8215:3:31","nodeType":"YulIdentifier","src":"8215:3:31"},"nativeSrc":"8215:23:31","nodeType":"YulFunctionCall","src":"8215:23:31"},{"kind":"number","nativeSrc":"8240:2:31","nodeType":"YulLiteral","src":"8240:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8211:3:31","nodeType":"YulIdentifier","src":"8211:3:31"},"nativeSrc":"8211:32:31","nodeType":"YulFunctionCall","src":"8211:32:31"},"nativeSrc":"8208:52:31","nodeType":"YulIf","src":"8208:52:31"},{"nativeSrc":"8269:29:31","nodeType":"YulVariableDeclaration","src":"8269:29:31","value":{"arguments":[{"name":"headStart","nativeSrc":"8288:9:31","nodeType":"YulIdentifier","src":"8288:9:31"}],"functionName":{"name":"mload","nativeSrc":"8282:5:31","nodeType":"YulIdentifier","src":"8282:5:31"},"nativeSrc":"8282:16:31","nodeType":"YulFunctionCall","src":"8282:16:31"},"variables":[{"name":"value","nativeSrc":"8273:5:31","nodeType":"YulTypedName","src":"8273:5:31","type":""}]},{"body":{"nativeSrc":"8351:16:31","nodeType":"YulBlock","src":"8351:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8360:1:31","nodeType":"YulLiteral","src":"8360:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"8363:1:31","nodeType":"YulLiteral","src":"8363:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8353:6:31","nodeType":"YulIdentifier","src":"8353:6:31"},"nativeSrc":"8353:12:31","nodeType":"YulFunctionCall","src":"8353:12:31"},"nativeSrc":"8353:12:31","nodeType":"YulExpressionStatement","src":"8353:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8320:5:31","nodeType":"YulIdentifier","src":"8320:5:31"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8341:5:31","nodeType":"YulIdentifier","src":"8341:5:31"}],"functionName":{"name":"iszero","nativeSrc":"8334:6:31","nodeType":"YulIdentifier","src":"8334:6:31"},"nativeSrc":"8334:13:31","nodeType":"YulFunctionCall","src":"8334:13:31"}],"functionName":{"name":"iszero","nativeSrc":"8327:6:31","nodeType":"YulIdentifier","src":"8327:6:31"},"nativeSrc":"8327:21:31","nodeType":"YulFunctionCall","src":"8327:21:31"}],"functionName":{"name":"eq","nativeSrc":"8317:2:31","nodeType":"YulIdentifier","src":"8317:2:31"},"nativeSrc":"8317:32:31","nodeType":"YulFunctionCall","src":"8317:32:31"}],"functionName":{"name":"iszero","nativeSrc":"8310:6:31","nodeType":"YulIdentifier","src":"8310:6:31"},"nativeSrc":"8310:40:31","nodeType":"YulFunctionCall","src":"8310:40:31"},"nativeSrc":"8307:60:31","nodeType":"YulIf","src":"8307:60:31"},{"nativeSrc":"8376:15:31","nodeType":"YulAssignment","src":"8376:15:31","value":{"name":"value","nativeSrc":"8386:5:31","nodeType":"YulIdentifier","src":"8386:5:31"},"variableNames":[{"name":"value0","nativeSrc":"8376:6:31","nodeType":"YulIdentifier","src":"8376:6:31"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"8120:277:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8164:9:31","nodeType":"YulTypedName","src":"8164:9:31","type":""},{"name":"dataEnd","nativeSrc":"8175:7:31","nodeType":"YulTypedName","src":"8175:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8187:6:31","nodeType":"YulTypedName","src":"8187:6:31","type":""}],"src":"8120:277:31"},{"body":{"nativeSrc":"8576:232:31","nodeType":"YulBlock","src":"8576:232:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8593:9:31","nodeType":"YulIdentifier","src":"8593:9:31"},{"kind":"number","nativeSrc":"8604:2:31","nodeType":"YulLiteral","src":"8604:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"8586:6:31","nodeType":"YulIdentifier","src":"8586:6:31"},"nativeSrc":"8586:21:31","nodeType":"YulFunctionCall","src":"8586:21:31"},"nativeSrc":"8586:21:31","nodeType":"YulExpressionStatement","src":"8586:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8627:9:31","nodeType":"YulIdentifier","src":"8627:9:31"},{"kind":"number","nativeSrc":"8638:2:31","nodeType":"YulLiteral","src":"8638:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8623:3:31","nodeType":"YulIdentifier","src":"8623:3:31"},"nativeSrc":"8623:18:31","nodeType":"YulFunctionCall","src":"8623:18:31"},{"kind":"number","nativeSrc":"8643:2:31","nodeType":"YulLiteral","src":"8643:2:31","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"8616:6:31","nodeType":"YulIdentifier","src":"8616:6:31"},"nativeSrc":"8616:30:31","nodeType":"YulFunctionCall","src":"8616:30:31"},"nativeSrc":"8616:30:31","nodeType":"YulExpressionStatement","src":"8616:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8666:9:31","nodeType":"YulIdentifier","src":"8666:9:31"},{"kind":"number","nativeSrc":"8677:2:31","nodeType":"YulLiteral","src":"8677:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8662:3:31","nodeType":"YulIdentifier","src":"8662:3:31"},"nativeSrc":"8662:18:31","nodeType":"YulFunctionCall","src":"8662:18:31"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"8682:34:31","nodeType":"YulLiteral","src":"8682:34:31","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"8655:6:31","nodeType":"YulIdentifier","src":"8655:6:31"},"nativeSrc":"8655:62:31","nodeType":"YulFunctionCall","src":"8655:62:31"},"nativeSrc":"8655:62:31","nodeType":"YulExpressionStatement","src":"8655:62:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8737:9:31","nodeType":"YulIdentifier","src":"8737:9:31"},{"kind":"number","nativeSrc":"8748:2:31","nodeType":"YulLiteral","src":"8748:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8733:3:31","nodeType":"YulIdentifier","src":"8733:3:31"},"nativeSrc":"8733:18:31","nodeType":"YulFunctionCall","src":"8733:18:31"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"8753:12:31","nodeType":"YulLiteral","src":"8753:12:31","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"8726:6:31","nodeType":"YulIdentifier","src":"8726:6:31"},"nativeSrc":"8726:40:31","nodeType":"YulFunctionCall","src":"8726:40:31"},"nativeSrc":"8726:40:31","nodeType":"YulExpressionStatement","src":"8726:40:31"},{"nativeSrc":"8775:27:31","nodeType":"YulAssignment","src":"8775:27:31","value":{"arguments":[{"name":"headStart","nativeSrc":"8787:9:31","nodeType":"YulIdentifier","src":"8787:9:31"},{"kind":"number","nativeSrc":"8798:3:31","nodeType":"YulLiteral","src":"8798:3:31","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8783:3:31","nodeType":"YulIdentifier","src":"8783:3:31"},"nativeSrc":"8783:19:31","nodeType":"YulFunctionCall","src":"8783:19:31"},"variableNames":[{"name":"tail","nativeSrc":"8775:4:31","nodeType":"YulIdentifier","src":"8775:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"8402:406:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8553:9:31","nodeType":"YulTypedName","src":"8553:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8567:4:31","nodeType":"YulTypedName","src":"8567:4:31","type":""}],"src":"8402:406:31"},{"body":{"nativeSrc":"8987:228:31","nodeType":"YulBlock","src":"8987:228:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9004:9:31","nodeType":"YulIdentifier","src":"9004:9:31"},{"kind":"number","nativeSrc":"9015:2:31","nodeType":"YulLiteral","src":"9015:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"8997:6:31","nodeType":"YulIdentifier","src":"8997:6:31"},"nativeSrc":"8997:21:31","nodeType":"YulFunctionCall","src":"8997:21:31"},"nativeSrc":"8997:21:31","nodeType":"YulExpressionStatement","src":"8997:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9038:9:31","nodeType":"YulIdentifier","src":"9038:9:31"},{"kind":"number","nativeSrc":"9049:2:31","nodeType":"YulLiteral","src":"9049:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9034:3:31","nodeType":"YulIdentifier","src":"9034:3:31"},"nativeSrc":"9034:18:31","nodeType":"YulFunctionCall","src":"9034:18:31"},{"kind":"number","nativeSrc":"9054:2:31","nodeType":"YulLiteral","src":"9054:2:31","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"9027:6:31","nodeType":"YulIdentifier","src":"9027:6:31"},"nativeSrc":"9027:30:31","nodeType":"YulFunctionCall","src":"9027:30:31"},"nativeSrc":"9027:30:31","nodeType":"YulExpressionStatement","src":"9027:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9077:9:31","nodeType":"YulIdentifier","src":"9077:9:31"},{"kind":"number","nativeSrc":"9088:2:31","nodeType":"YulLiteral","src":"9088:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9073:3:31","nodeType":"YulIdentifier","src":"9073:3:31"},"nativeSrc":"9073:18:31","nodeType":"YulFunctionCall","src":"9073:18:31"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"9093:34:31","nodeType":"YulLiteral","src":"9093:34:31","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"9066:6:31","nodeType":"YulIdentifier","src":"9066:6:31"},"nativeSrc":"9066:62:31","nodeType":"YulFunctionCall","src":"9066:62:31"},"nativeSrc":"9066:62:31","nodeType":"YulExpressionStatement","src":"9066:62:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9148:9:31","nodeType":"YulIdentifier","src":"9148:9:31"},{"kind":"number","nativeSrc":"9159:2:31","nodeType":"YulLiteral","src":"9159:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9144:3:31","nodeType":"YulIdentifier","src":"9144:3:31"},"nativeSrc":"9144:18:31","nodeType":"YulFunctionCall","src":"9144:18:31"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"9164:8:31","nodeType":"YulLiteral","src":"9164:8:31","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"9137:6:31","nodeType":"YulIdentifier","src":"9137:6:31"},"nativeSrc":"9137:36:31","nodeType":"YulFunctionCall","src":"9137:36:31"},"nativeSrc":"9137:36:31","nodeType":"YulExpressionStatement","src":"9137:36:31"},{"nativeSrc":"9182:27:31","nodeType":"YulAssignment","src":"9182:27:31","value":{"arguments":[{"name":"headStart","nativeSrc":"9194:9:31","nodeType":"YulIdentifier","src":"9194:9:31"},{"kind":"number","nativeSrc":"9205:3:31","nodeType":"YulLiteral","src":"9205:3:31","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9190:3:31","nodeType":"YulIdentifier","src":"9190:3:31"},"nativeSrc":"9190:19:31","nodeType":"YulFunctionCall","src":"9190:19:31"},"variableNames":[{"name":"tail","nativeSrc":"9182:4:31","nodeType":"YulIdentifier","src":"9182:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"8813:402:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8964:9:31","nodeType":"YulTypedName","src":"8964:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8978:4:31","nodeType":"YulTypedName","src":"8978:4:31","type":""}],"src":"8813:402:31"},{"body":{"nativeSrc":"9286:184:31","nodeType":"YulBlock","src":"9286:184:31","statements":[{"nativeSrc":"9296:10:31","nodeType":"YulVariableDeclaration","src":"9296:10:31","value":{"kind":"number","nativeSrc":"9305:1:31","nodeType":"YulLiteral","src":"9305:1:31","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"9300:1:31","nodeType":"YulTypedName","src":"9300:1:31","type":""}]},{"body":{"nativeSrc":"9365:63:31","nodeType":"YulBlock","src":"9365:63:31","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"9390:3:31","nodeType":"YulIdentifier","src":"9390:3:31"},{"name":"i","nativeSrc":"9395:1:31","nodeType":"YulIdentifier","src":"9395:1:31"}],"functionName":{"name":"add","nativeSrc":"9386:3:31","nodeType":"YulIdentifier","src":"9386:3:31"},"nativeSrc":"9386:11:31","nodeType":"YulFunctionCall","src":"9386:11:31"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"9409:3:31","nodeType":"YulIdentifier","src":"9409:3:31"},{"name":"i","nativeSrc":"9414:1:31","nodeType":"YulIdentifier","src":"9414:1:31"}],"functionName":{"name":"add","nativeSrc":"9405:3:31","nodeType":"YulIdentifier","src":"9405:3:31"},"nativeSrc":"9405:11:31","nodeType":"YulFunctionCall","src":"9405:11:31"}],"functionName":{"name":"mload","nativeSrc":"9399:5:31","nodeType":"YulIdentifier","src":"9399:5:31"},"nativeSrc":"9399:18:31","nodeType":"YulFunctionCall","src":"9399:18:31"}],"functionName":{"name":"mstore","nativeSrc":"9379:6:31","nodeType":"YulIdentifier","src":"9379:6:31"},"nativeSrc":"9379:39:31","nodeType":"YulFunctionCall","src":"9379:39:31"},"nativeSrc":"9379:39:31","nodeType":"YulExpressionStatement","src":"9379:39:31"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"9326:1:31","nodeType":"YulIdentifier","src":"9326:1:31"},{"name":"length","nativeSrc":"9329:6:31","nodeType":"YulIdentifier","src":"9329:6:31"}],"functionName":{"name":"lt","nativeSrc":"9323:2:31","nodeType":"YulIdentifier","src":"9323:2:31"},"nativeSrc":"9323:13:31","nodeType":"YulFunctionCall","src":"9323:13:31"},"nativeSrc":"9315:113:31","nodeType":"YulForLoop","post":{"nativeSrc":"9337:19:31","nodeType":"YulBlock","src":"9337:19:31","statements":[{"nativeSrc":"9339:15:31","nodeType":"YulAssignment","src":"9339:15:31","value":{"arguments":[{"name":"i","nativeSrc":"9348:1:31","nodeType":"YulIdentifier","src":"9348:1:31"},{"kind":"number","nativeSrc":"9351:2:31","nodeType":"YulLiteral","src":"9351:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9344:3:31","nodeType":"YulIdentifier","src":"9344:3:31"},"nativeSrc":"9344:10:31","nodeType":"YulFunctionCall","src":"9344:10:31"},"variableNames":[{"name":"i","nativeSrc":"9339:1:31","nodeType":"YulIdentifier","src":"9339:1:31"}]}]},"pre":{"nativeSrc":"9319:3:31","nodeType":"YulBlock","src":"9319:3:31","statements":[]},"src":"9315:113:31"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"9448:3:31","nodeType":"YulIdentifier","src":"9448:3:31"},{"name":"length","nativeSrc":"9453:6:31","nodeType":"YulIdentifier","src":"9453:6:31"}],"functionName":{"name":"add","nativeSrc":"9444:3:31","nodeType":"YulIdentifier","src":"9444:3:31"},"nativeSrc":"9444:16:31","nodeType":"YulFunctionCall","src":"9444:16:31"},{"kind":"number","nativeSrc":"9462:1:31","nodeType":"YulLiteral","src":"9462:1:31","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"9437:6:31","nodeType":"YulIdentifier","src":"9437:6:31"},"nativeSrc":"9437:27:31","nodeType":"YulFunctionCall","src":"9437:27:31"},"nativeSrc":"9437:27:31","nodeType":"YulExpressionStatement","src":"9437:27:31"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"9220:250:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"9264:3:31","nodeType":"YulTypedName","src":"9264:3:31","type":""},{"name":"dst","nativeSrc":"9269:3:31","nodeType":"YulTypedName","src":"9269:3:31","type":""},{"name":"length","nativeSrc":"9274:6:31","nodeType":"YulTypedName","src":"9274:6:31","type":""}],"src":"9220:250:31"},{"body":{"nativeSrc":"9612:150:31","nodeType":"YulBlock","src":"9612:150:31","statements":[{"nativeSrc":"9622:27:31","nodeType":"YulVariableDeclaration","src":"9622:27:31","value":{"arguments":[{"name":"value0","nativeSrc":"9642:6:31","nodeType":"YulIdentifier","src":"9642:6:31"}],"functionName":{"name":"mload","nativeSrc":"9636:5:31","nodeType":"YulIdentifier","src":"9636:5:31"},"nativeSrc":"9636:13:31","nodeType":"YulFunctionCall","src":"9636:13:31"},"variables":[{"name":"length","nativeSrc":"9626:6:31","nodeType":"YulTypedName","src":"9626:6:31","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"9697:6:31","nodeType":"YulIdentifier","src":"9697:6:31"},{"kind":"number","nativeSrc":"9705:4:31","nodeType":"YulLiteral","src":"9705:4:31","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9693:3:31","nodeType":"YulIdentifier","src":"9693:3:31"},"nativeSrc":"9693:17:31","nodeType":"YulFunctionCall","src":"9693:17:31"},{"name":"pos","nativeSrc":"9712:3:31","nodeType":"YulIdentifier","src":"9712:3:31"},{"name":"length","nativeSrc":"9717:6:31","nodeType":"YulIdentifier","src":"9717:6:31"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"9658:34:31","nodeType":"YulIdentifier","src":"9658:34:31"},"nativeSrc":"9658:66:31","nodeType":"YulFunctionCall","src":"9658:66:31"},"nativeSrc":"9658:66:31","nodeType":"YulExpressionStatement","src":"9658:66:31"},{"nativeSrc":"9733:23:31","nodeType":"YulAssignment","src":"9733:23:31","value":{"arguments":[{"name":"pos","nativeSrc":"9744:3:31","nodeType":"YulIdentifier","src":"9744:3:31"},{"name":"length","nativeSrc":"9749:6:31","nodeType":"YulIdentifier","src":"9749:6:31"}],"functionName":{"name":"add","nativeSrc":"9740:3:31","nodeType":"YulIdentifier","src":"9740:3:31"},"nativeSrc":"9740:16:31","nodeType":"YulFunctionCall","src":"9740:16:31"},"variableNames":[{"name":"end","nativeSrc":"9733:3:31","nodeType":"YulIdentifier","src":"9733:3:31"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"9475:287:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9588:3:31","nodeType":"YulTypedName","src":"9588:3:31","type":""},{"name":"value0","nativeSrc":"9593:6:31","nodeType":"YulTypedName","src":"9593:6:31","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9604:3:31","nodeType":"YulTypedName","src":"9604:3:31","type":""}],"src":"9475:287:31"},{"body":{"nativeSrc":"9941:179:31","nodeType":"YulBlock","src":"9941:179:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9958:9:31","nodeType":"YulIdentifier","src":"9958:9:31"},{"kind":"number","nativeSrc":"9969:2:31","nodeType":"YulLiteral","src":"9969:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"9951:6:31","nodeType":"YulIdentifier","src":"9951:6:31"},"nativeSrc":"9951:21:31","nodeType":"YulFunctionCall","src":"9951:21:31"},"nativeSrc":"9951:21:31","nodeType":"YulExpressionStatement","src":"9951:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9992:9:31","nodeType":"YulIdentifier","src":"9992:9:31"},{"kind":"number","nativeSrc":"10003:2:31","nodeType":"YulLiteral","src":"10003:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9988:3:31","nodeType":"YulIdentifier","src":"9988:3:31"},"nativeSrc":"9988:18:31","nodeType":"YulFunctionCall","src":"9988:18:31"},{"kind":"number","nativeSrc":"10008:2:31","nodeType":"YulLiteral","src":"10008:2:31","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"9981:6:31","nodeType":"YulIdentifier","src":"9981:6:31"},"nativeSrc":"9981:30:31","nodeType":"YulFunctionCall","src":"9981:30:31"},"nativeSrc":"9981:30:31","nodeType":"YulExpressionStatement","src":"9981:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10031:9:31","nodeType":"YulIdentifier","src":"10031:9:31"},{"kind":"number","nativeSrc":"10042:2:31","nodeType":"YulLiteral","src":"10042:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10027:3:31","nodeType":"YulIdentifier","src":"10027:3:31"},"nativeSrc":"10027:18:31","nodeType":"YulFunctionCall","src":"10027:18:31"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"10047:31:31","nodeType":"YulLiteral","src":"10047:31:31","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"10020:6:31","nodeType":"YulIdentifier","src":"10020:6:31"},"nativeSrc":"10020:59:31","nodeType":"YulFunctionCall","src":"10020:59:31"},"nativeSrc":"10020:59:31","nodeType":"YulExpressionStatement","src":"10020:59:31"},{"nativeSrc":"10088:26:31","nodeType":"YulAssignment","src":"10088:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"10100:9:31","nodeType":"YulIdentifier","src":"10100:9:31"},{"kind":"number","nativeSrc":"10111:2:31","nodeType":"YulLiteral","src":"10111:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10096:3:31","nodeType":"YulIdentifier","src":"10096:3:31"},"nativeSrc":"10096:18:31","nodeType":"YulFunctionCall","src":"10096:18:31"},"variableNames":[{"name":"tail","nativeSrc":"10088:4:31","nodeType":"YulIdentifier","src":"10088:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9767:353:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9918:9:31","nodeType":"YulTypedName","src":"9918:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9932:4:31","nodeType":"YulTypedName","src":"9932:4:31","type":""}],"src":"9767:353:31"},{"body":{"nativeSrc":"10246:334:31","nodeType":"YulBlock","src":"10246:334:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10263:9:31","nodeType":"YulIdentifier","src":"10263:9:31"},{"kind":"number","nativeSrc":"10274:2:31","nodeType":"YulLiteral","src":"10274:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10256:6:31","nodeType":"YulIdentifier","src":"10256:6:31"},"nativeSrc":"10256:21:31","nodeType":"YulFunctionCall","src":"10256:21:31"},"nativeSrc":"10256:21:31","nodeType":"YulExpressionStatement","src":"10256:21:31"},{"nativeSrc":"10286:27:31","nodeType":"YulVariableDeclaration","src":"10286:27:31","value":{"arguments":[{"name":"value0","nativeSrc":"10306:6:31","nodeType":"YulIdentifier","src":"10306:6:31"}],"functionName":{"name":"mload","nativeSrc":"10300:5:31","nodeType":"YulIdentifier","src":"10300:5:31"},"nativeSrc":"10300:13:31","nodeType":"YulFunctionCall","src":"10300:13:31"},"variables":[{"name":"length","nativeSrc":"10290:6:31","nodeType":"YulTypedName","src":"10290:6:31","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10333:9:31","nodeType":"YulIdentifier","src":"10333:9:31"},{"kind":"number","nativeSrc":"10344:2:31","nodeType":"YulLiteral","src":"10344:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10329:3:31","nodeType":"YulIdentifier","src":"10329:3:31"},"nativeSrc":"10329:18:31","nodeType":"YulFunctionCall","src":"10329:18:31"},{"name":"length","nativeSrc":"10349:6:31","nodeType":"YulIdentifier","src":"10349:6:31"}],"functionName":{"name":"mstore","nativeSrc":"10322:6:31","nodeType":"YulIdentifier","src":"10322:6:31"},"nativeSrc":"10322:34:31","nodeType":"YulFunctionCall","src":"10322:34:31"},"nativeSrc":"10322:34:31","nodeType":"YulExpressionStatement","src":"10322:34:31"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"10404:6:31","nodeType":"YulIdentifier","src":"10404:6:31"},{"kind":"number","nativeSrc":"10412:2:31","nodeType":"YulLiteral","src":"10412:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10400:3:31","nodeType":"YulIdentifier","src":"10400:3:31"},"nativeSrc":"10400:15:31","nodeType":"YulFunctionCall","src":"10400:15:31"},{"arguments":[{"name":"headStart","nativeSrc":"10421:9:31","nodeType":"YulIdentifier","src":"10421:9:31"},{"kind":"number","nativeSrc":"10432:2:31","nodeType":"YulLiteral","src":"10432:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10417:3:31","nodeType":"YulIdentifier","src":"10417:3:31"},"nativeSrc":"10417:18:31","nodeType":"YulFunctionCall","src":"10417:18:31"},{"name":"length","nativeSrc":"10437:6:31","nodeType":"YulIdentifier","src":"10437:6:31"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"10365:34:31","nodeType":"YulIdentifier","src":"10365:34:31"},"nativeSrc":"10365:79:31","nodeType":"YulFunctionCall","src":"10365:79:31"},"nativeSrc":"10365:79:31","nodeType":"YulExpressionStatement","src":"10365:79:31"},{"nativeSrc":"10453:121:31","nodeType":"YulAssignment","src":"10453:121:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10469:9:31","nodeType":"YulIdentifier","src":"10469:9:31"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"10488:6:31","nodeType":"YulIdentifier","src":"10488:6:31"},{"kind":"number","nativeSrc":"10496:2:31","nodeType":"YulLiteral","src":"10496:2:31","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"10484:3:31","nodeType":"YulIdentifier","src":"10484:3:31"},"nativeSrc":"10484:15:31","nodeType":"YulFunctionCall","src":"10484:15:31"},{"kind":"number","nativeSrc":"10501:66:31","nodeType":"YulLiteral","src":"10501:66:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"10480:3:31","nodeType":"YulIdentifier","src":"10480:3:31"},"nativeSrc":"10480:88:31","nodeType":"YulFunctionCall","src":"10480:88:31"}],"functionName":{"name":"add","nativeSrc":"10465:3:31","nodeType":"YulIdentifier","src":"10465:3:31"},"nativeSrc":"10465:104:31","nodeType":"YulFunctionCall","src":"10465:104:31"},{"kind":"number","nativeSrc":"10571:2:31","nodeType":"YulLiteral","src":"10571:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10461:3:31","nodeType":"YulIdentifier","src":"10461:3:31"},"nativeSrc":"10461:113:31","nodeType":"YulFunctionCall","src":"10461:113:31"},"variableNames":[{"name":"tail","nativeSrc":"10453:4:31","nodeType":"YulIdentifier","src":"10453:4:31"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10125:455:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10215:9:31","nodeType":"YulTypedName","src":"10215:9:31","type":""},{"name":"value0","nativeSrc":"10226:6:31","nodeType":"YulTypedName","src":"10226:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10237:4:31","nodeType":"YulTypedName","src":"10237:4:31","type":""}],"src":"10125:455:31"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$723__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1243(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1162(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":31,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"587":[{"length":32,"start":231},{"length":32,"start":347},{"length":32,"start":2895},{"length":32,"start":3031}]},"linkReferences":{},"object":"608060405234801561000f575f80fd5b50600436106100b9575f3560e01c806373c8a95811610072578063c3666c3611610058578063c3666c36146101c8578063f2fde38b146101db578063f7ba94bd146101ee575f80fd5b806373c8a958146101ad5780638da5cb5b146101c0575f80fd5b80632bb14104116100a25780632bb141041461012c578063572b6c051461014b57806361dfdae614610198575f80fd5b806301ffc9a7146100bd5780632b4c9f16146100e5575b5f80fd5b6100d06100cb366004610f67565b610201565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100dc565b5f546101079073ffffffffffffffffffffffffffffffffffffffff1681565b6100d0610159366004610fce565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101ab6101a6366004610fce565b61021a565b005b6101ab6101bb366004611031565b6102f8565b6101076103ec565b6101ab6101d6366004611031565b610417565b6101ab6101e9366004610fce565b610588565b6101ab6101fc3660046110c4565b6105a6565b5f6102148261020e610663565b90610690565b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116610267576040517ff6a5e70400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610280610272610767565b61027a610770565b9061079d565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150565b610303610272610767565b8483811415806103135750808214155b1561034a576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181146103e2576103da8888838181106103685761036861112b565b905060200201602081019061037d9190610fce565b85858481811061038f5761038f61112b565b905060200201358888858181106103a8576103a861112b565b90506020020160208101906103bd9190610fce565b73ffffffffffffffffffffffffffffffffffffffff169190610811565b60010161034c565b5050505050505050565b5f6104126103f8610770565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610422610272610767565b8483811415806104325750808214155b15610469576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181146103e2578585828181106104845761048461112b565b90506020020160208101906104999190610fce565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106104c7576104c761112b565b90506020020160208101906104dc9190610fce565b8787868181106104ee576104ee61112b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b158015610567575f80fd5b505af1158015610579573d5f803e3d5ffd5b5050505080600101905061046b565b6105a3610593610767565b8261059c610770565b91906108a3565b50565b6105b1610272610767565b828181146105eb576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b81811461065b576106538484838181106106095761060961112b565b905060200201358787848181106106225761062261112b565b90506020020160208101906106379190610fce565b73ffffffffffffffffffffffffffffffffffffffff16906109b7565b6001016105ed565b505050505050565b5f8061021460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611158565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016106de57505f610214565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161072f57506001610214565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b5f610412610b0d565b5f8061021460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611158565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461080d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261089e908490610c51565b505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610910576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610804565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109b15783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35b50505050565b80471015610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610804565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114610a77576040519150601f19603f3d011682016040523d82523d5f602084013e610a7c565b606091505b505090508061089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610804565b5f33321480610b1c5750601836105b15610b2657503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610c4057506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610c1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c409190611190565b15610c4a57919050565b3391505090565b5f610cb2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610d5e9092919063ffffffff16565b905080515f1480610cd2575080806020019051810190610cd29190611190565b61089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610804565b6060610d6c84845f85610d74565b949350505050565b606082471015610e06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610804565b5f808673ffffffffffffffffffffffffffffffffffffffff168587604051610e2e91906111d1565b5f6040518083038185875af1925050503d805f8114610e68576040519150601f19603f3d011682016040523d82523d5f602084013e610e6d565b606091505b5091509150610e7e87838387610e89565b979650505050505050565b60608315610f1e5782515f03610f175773ffffffffffffffffffffffffffffffffffffffff85163b610f17576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610804565b5081610d6c565b610d6c8383815115610f335781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080491906111ec565b5f60208284031215610f77575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610fa6575f80fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146105a3575f80fd5b5f60208284031215610fde575f80fd5b8135610fa681610fad565b5f8083601f840112610ff9575f80fd5b50813567ffffffffffffffff811115611010575f80fd5b6020830191508360208260051b850101111561102a575f80fd5b9250929050565b5f805f805f8060608789031215611046575f80fd5b863567ffffffffffffffff8082111561105d575f80fd5b6110698a838b01610fe9565b90985096506020890135915080821115611081575f80fd5b61108d8a838b01610fe9565b909650945060408901359150808211156110a5575f80fd5b506110b289828a01610fe9565b979a9699509497509295939492505050565b5f805f80604085870312156110d7575f80fd5b843567ffffffffffffffff808211156110ee575f80fd5b6110fa88838901610fe9565b90965094506020870135915080821115611112575f80fd5b5061111f87828801610fe9565b95989497509550505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b81810381811115610214577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f602082840312156111a0575f80fd5b81518015158114610fa6575f80fd5b5f5b838110156111c95781810151838201526020016111b1565b50505f910152565b5f82516111e28184602087016111af565b9190910192915050565b602081525f825180602084015261120a8160408501602087016111af565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122036d8bad4db7edb2d806dfcc295e967d09ae3fdcbadec5fd61e270f0a5d85653464736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB9 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x72 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x1EE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x198 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xBD JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xE5 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xD0 PUSH2 0xCB CALLDATASIZE PUSH1 0x4 PUSH2 0xF67 JUMP JUMPDEST PUSH2 0x201 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xDC JUMP JUMPDEST PUSH0 SLOAD PUSH2 0x107 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD0 PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCE JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x21A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AB PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x107 PUSH2 0x3EC JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1031 JUMP JUMPDEST PUSH2 0x417 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1E9 CALLDATASIZE PUSH1 0x4 PUSH2 0xFCE JUMP JUMPDEST PUSH2 0x588 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x1FC CALLDATASIZE PUSH1 0x4 PUSH2 0x10C4 JUMP JUMPDEST PUSH2 0x5A6 JUMP JUMPDEST PUSH0 PUSH2 0x214 DUP3 PUSH2 0x20E PUSH2 0x663 JUMP JUMPDEST SWAP1 PUSH2 0x690 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x267 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x280 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST PUSH2 0x27A PUSH2 0x770 JUMP JUMPDEST SWAP1 PUSH2 0x79D JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x303 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x313 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x34A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3E2 JUMPI PUSH2 0x3DA DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x368 JUMPI PUSH2 0x368 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x37D SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x38F JUMPI PUSH2 0x38F PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x3A8 JUMPI PUSH2 0x3A8 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3BD SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x811 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x34C JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x412 PUSH2 0x3F8 PUSH2 0x770 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x422 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x432 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x469 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x3E2 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x484 JUMPI PUSH2 0x484 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x499 SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x4C7 JUMPI PUSH2 0x4C7 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4DC SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x4EE JUMPI PUSH2 0x4EE PUSH2 0x112B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x567 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x579 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x46B JUMP JUMPDEST PUSH2 0x5A3 PUSH2 0x593 PUSH2 0x767 JUMP JUMPDEST DUP3 PUSH2 0x59C PUSH2 0x770 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8A3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5B1 PUSH2 0x272 PUSH2 0x767 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x5EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x65B JUMPI PUSH2 0x653 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x609 JUMPI PUSH2 0x609 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x622 JUMPI PUSH2 0x622 PUSH2 0x112B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x637 SWAP2 SWAP1 PUSH2 0xFCE JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x9B7 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5ED JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x214 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1158 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x6DE JUMPI POP PUSH0 PUSH2 0x214 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x72F JUMPI POP PUSH1 0x1 PUSH2 0x214 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x412 PUSH2 0xB0D JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x214 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1158 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x80D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x89E SWAP1 DUP5 SWAP1 PUSH2 0xC51 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x910 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x804 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9B1 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xA21 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x804 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0xA77 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA7C JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x804 JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0xB1C JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB26 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC40 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC1C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC40 SWAP2 SWAP1 PUSH2 0x1190 JUMP JUMPDEST ISZERO PUSH2 0xC4A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xCB2 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD5E SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0xCD2 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xCD2 SWAP2 SWAP1 PUSH2 0x1190 JUMP JUMPDEST PUSH2 0x89E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x804 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD6C DUP5 DUP5 PUSH0 DUP6 PUSH2 0xD74 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xE06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x804 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xE2E SWAP2 SWAP1 PUSH2 0x11D1 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0xE68 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xE6D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xE7E DUP8 DUP4 DUP4 DUP8 PUSH2 0xE89 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xF1E JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0xF17 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0xF17 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x804 JUMP JUMPDEST POP DUP2 PUSH2 0xD6C JUMP JUMPDEST PUSH2 0xD6C DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0xF33 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x804 SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xFA6 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5A3 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFDE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xFA6 DUP2 PUSH2 0xFAD JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xFF9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1010 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x102A JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1046 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x105D JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1069 DUP11 DUP4 DUP12 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1081 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x108D DUP11 DUP4 DUP12 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x10A5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B2 DUP10 DUP3 DUP11 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x10D7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x10EE JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x10FA DUP9 DUP4 DUP10 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1112 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x111F DUP8 DUP3 DUP9 ADD PUSH2 0xFE9 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x214 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11A0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xFA6 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11C9 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x11B1 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x11E2 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x11AF JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x120A DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x11AF JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xD8 0xBA 0xD4 0xDB PUSH31 0xDB2D806DFCC295E967D09AE3FDCBADEC5FD61E270F0A5D85653464736F6C63 NUMBER STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"809:1196:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:31;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;728:115:11;817:19;728:115;;;745:42:31;733:55;;;715:74;;703:2;688:18;728:115:11;543:252:31;951:21:29;;;;;;;;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1303:237:29;;;;;;:::i;:::-;;:::i;:::-;;3158:509:19;;;;;;:::i;:::-;;:::i;710:120:2:-;;;:::i;4445:538:19:-;;;;;;:::i;:::-;;:::i;864:152:2:-;;;;;;:::i;:::-;;:::i;1942:447:19:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;1303:237:29:-;1357:18;;;1353:48;;1384:17;;;;;;;;;;;;;;1353:48;1411:70;1468:12;:10;:12::i;:::-;1411:33;:31;:33::i;:::-;:56;;:70::i;:::-;1492:6;:13;;;;;;;;;;;;;1520;;715:74:31;;;1520:13:29;;703:2:31;688:18;1520:13:29;;;;;;;1303:237;:::o;3158:509:19:-;3291:70;3348:12;:10;:12::i;3291:70::-;3388:8;3417:23;;;;;:51;;-1:-1:-1;3444:24:19;;;;3417:51;3413:90;;;3477:26;;;;;;;;;;;;;;3413:90;3542:9;3537:114;3558:6;3553:1;:11;3537:114;;3589:47;3612:8;;3621:1;3612:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3625:7;;3633:1;3625:10;;;;;;;:::i;:::-;;;;;;;3589:6;;3596:1;3589:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3566:3;;3537:114;;;;3281:386;3158:509;;;;;;:::o;710:120:2:-;756:7;782:41;:33;:31;:33::i;:::-;3515:15:6;;;;3419:118;782:41:2;775:48;;710:120;:::o;4445:538:19:-;4584:70;4641:12;:10;:12::i;4584:70::-;4681:8;4710:26;;;;;:55;;-1:-1:-1;4740:25:19;;;;4710:55;4706:94;;;4774:26;;;;;;;;;;;;;;4706:94;4839:9;4834:133;4855:6;4850:1;:11;4834:133;;4886:9;;4896:1;4886:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4920:4;4927:8;;4936:1;4927:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4940:8;;4949:1;4940:11;;;;;;;:::i;:::-;4886:66;;;;;;;;;;5753:42:31;5822:15;;;4886:66:19;;;5804:34:31;5874:15;;;;5854:18;;;5847:43;-1:-1:-1;4940:11:19;;;;;;5906:18:31;;;5899:34;5716:18;;4886:66:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4863:3;;;;;4834:133;;864:152:2;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1942:447:19:-;2054:70;2111:12;:10;:12::i;2054:70::-;2151:8;2180:24;;;2176:63;;2213:26;;;;;;;;;;;;;;2176:63;2278:9;2273:100;2294:6;2289:1;:11;2273:100;;2325:33;2347:7;;2355:1;2347:10;;;;;;;:::i;:::-;;;;;;;2325:8;;2334:1;2325:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2302:3;;2273:100;;;;2044:345;1942:447;;;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1595:175:29:-;1696:7;1722:41;:39;:41::i;4865:174:6:-;4906:16;;761:71;831:1;769:58;761:71;:::i;4189:162::-;4295:15;;;4284:26;;;4295:15;;4284:26;4280:64;;4319:25;;;;;745:42:31;733:55;;4319:25:6;;;715:74:31;688:18;;4319:25:6;;;;;;;;4280:64;4189:162;;:::o;941:175:25:-;1050:58;;;6695:42:31;6683:55;;1050:58:25;;;6665:74:31;6755:18;;;;6748:34;;;1050:58:25;;;;;;;;;;6638:18:31;;;;1050:58:25;;;;;;;;;;1073:23;1050:58;;;1023:86;;1043:5;;1023:19;:86::i;:::-;941:175;;;:::o;2909:383:6:-;3031:15;;;;;;;3060:23;;;;3056:60;;3092:24;;;;;745:42:31;733:55;;3092:24:6;;;715:74:31;688:18;;3092:24:6;543:252:31;3056:60:6;3147:8;3130:25;;:13;:25;;;3126:160;;3171:26;;;;;;;;;;;;;3216:59;;;;;;;;-1:-1:-1;;3216:59:6;3126:160;2997:295;2909:383;;;:::o;2647:312:26:-;2761:6;2736:21;:31;;2728:73;;;;;;;6995:2:31;2728:73:26;;;6977:21:31;7034:2;7014:18;;;7007:30;7073:31;7053:18;;;7046:59;7122:18;;2728:73:26;6793:353:31;2728:73:26;2813:12;2831:9;:14;;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;;;;7563:2:31;2874:78:26;;;7545:21:31;7602:2;7582:18;;;7575:30;7641:34;7621:18;;;7614:62;7712:28;7692:18;;;7685:56;7758:19;;2874:78:26;7361:422:31;784:745:12;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;8041:15:31;;;1396:59:12;;;8023:34:31;1444:10:12;8073:18:31;;;8066:43;1396:19:12;:39;;;;7935:18:31;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;5196:642:25:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;8604:2:31;5720:111:25;;;8586:21:31;8643:2;8623:18;;;8616:30;8682:34;8662:18;;;8655:62;8753:12;8733:18;;;8726:40;8783:19;;5720:111:25;8402:406:31;4108:223:26;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:26:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;9015:2:31;5354:81:26;;;8997:21:31;9054:2;9034:18;;;9027:30;9093:34;9073:18;;;9066:62;9164:8;9144:18;;;9137:36;9190:19;;5354:81:26;8813:402:31;5354:81:26;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:26:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;9969:2:31;8113:60:26;;;9951:21:31;10008:2;9988:18;;;9981:30;10047:31;10027:18;;;10020:59;10096:18;;8113:60:26;9767:353:31;8113:60:26;-1:-1:-1;8208:10:26;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:31:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:31:o;1031:154::-;1117:42;1110:5;1106:54;1099:5;1096:65;1086:93;;1175:1;1172;1165:12;1190:247;1249:6;1302:2;1290:9;1281:7;1277:23;1273:32;1270:52;;;1318:1;1315;1308:12;1270:52;1357:9;1344:23;1376:31;1401:5;1376:31;:::i;1442:367::-;1505:8;1515:6;1569:3;1562:4;1554:6;1550:17;1546:27;1536:55;;1587:1;1584;1577:12;1536:55;-1:-1:-1;1610:20:31;;1653:18;1642:30;;1639:50;;;1685:1;1682;1675:12;1639:50;1722:4;1714:6;1710:17;1698:29;;1782:3;1775:4;1765:6;1762:1;1758:14;1750:6;1746:27;1742:38;1739:47;1736:67;;;1799:1;1796;1789:12;1736:67;1442:367;;;;;:::o;1814:1103::-;1987:6;1995;2003;2011;2019;2027;2080:2;2068:9;2059:7;2055:23;2051:32;2048:52;;;2096:1;2093;2086:12;2048:52;2136:9;2123:23;2165:18;2206:2;2198:6;2195:14;2192:34;;;2222:1;2219;2212:12;2192:34;2261:70;2323:7;2314:6;2303:9;2299:22;2261:70;:::i;:::-;2350:8;;-1:-1:-1;2235:96:31;-1:-1:-1;2438:2:31;2423:18;;2410:32;;-1:-1:-1;2454:16:31;;;2451:36;;;2483:1;2480;2473:12;2451:36;2522:72;2586:7;2575:8;2564:9;2560:24;2522:72;:::i;:::-;2613:8;;-1:-1:-1;2496:98:31;-1:-1:-1;2701:2:31;2686:18;;2673:32;;-1:-1:-1;2717:16:31;;;2714:36;;;2746:1;2743;2736:12;2714:36;;2785:72;2849:7;2838:8;2827:9;2823:24;2785:72;:::i;:::-;1814:1103;;;;-1:-1:-1;1814:1103:31;;-1:-1:-1;1814:1103:31;;2876:8;;1814:1103;-1:-1:-1;;;1814:1103:31:o;4031:781::-;4161:6;4169;4177;4185;4238:2;4226:9;4217:7;4213:23;4209:32;4206:52;;;4254:1;4251;4244:12;4206:52;4294:9;4281:23;4323:18;4364:2;4356:6;4353:14;4350:34;;;4380:1;4377;4370:12;4350:34;4419:70;4481:7;4472:6;4461:9;4457:22;4419:70;:::i;:::-;4508:8;;-1:-1:-1;4393:96:31;-1:-1:-1;4596:2:31;4581:18;;4568:32;;-1:-1:-1;4612:16:31;;;4609:36;;;4641:1;4638;4631:12;4609:36;;4680:72;4744:7;4733:8;4722:9;4718:24;4680:72;:::i;:::-;4031:781;;;;-1:-1:-1;4771:8:31;-1:-1:-1;;;;4031:781:31:o;4817:184::-;4869:77;4866:1;4859:88;4966:4;4963:1;4956:15;4990:4;4987:1;4980:15;6204:282;6271:9;;;6292:11;;;6289:191;;;6336:77;6333:1;6326:88;6437:4;6434:1;6427:15;6465:4;6462:1;6455:15;8120:277;8187:6;8240:2;8228:9;8219:7;8215:23;8211:32;8208:52;;;8256:1;8253;8246:12;8208:52;8288:9;8282:16;8341:5;8334:13;8327:21;8320:5;8317:32;8307:60;;8363:1;8360;8353:12;9220:250;9305:1;9315:113;9329:6;9326:1;9323:13;9315:113;;;9405:11;;;9399:18;9386:11;;;9379:39;9351:2;9344:10;9315:113;;;-1:-1:-1;;9462:1:31;9444:16;;9437:27;9220:250::o;9475:287::-;9604:3;9642:6;9636:13;9658:66;9717:6;9712:3;9705:4;9697:6;9693:17;9658:66;:::i;:::-;9740:16;;;;;9475:287;-1:-1:-1;;9475:287:31:o;10125:455::-;10274:2;10263:9;10256:21;10237:4;10306:6;10300:13;10349:6;10344:2;10333:9;10329:18;10322:34;10365:79;10437:6;10432:2;10421:9;10417:18;10412:2;10404:6;10400:15;10365:79;:::i;:::-;10496:2;10484:15;10501:66;10480:88;10465:104;;;;10571:2;10461:113;;10125:455;-1:-1:-1;;10125:455:31:o"},"gasEstimates":{"creation":{"codeDepositCost":"944400","executionCost":"infinite","totalCost":"infinite"},"external":{"forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","myData()":"2334","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","setData(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","myData()":"2bb14104","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","setData(address)":"61dfdae6","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyContract.sol\":\"MyContract\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0xc68901b6a406156255814a3eb864c25a85070de51560f21f3f62090a7ba9b342\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x9f49dec6ab95d7ad99055eee9e70ad8e4300bdabf2c85c20f9f5f0c6269a6c0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ec7061f8fcf77dc81cd485b96761e72efad45940b4c170dabc64d3b420f0412\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/MyContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\ncontract MyContract is TokenRecovery, ForwarderRegistryContext {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    address public myData;\\n\\n    event DataSet(address data);\\n\\n    error InvalidZeroData();\\n\\n    constructor(address data, IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        if (data == address(0)) revert InvalidZeroData();\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    function setData(address data) external {\\n        if (data == address(0)) revert InvalidZeroData();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x0c2fd43bf8856b2510a85e18da7aac41614434ca56f738a52c139dac6370503b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2143,"contract":"contracts/MyContract.sol:MyContract","label":"myData","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/mocks/MyContractMock.sol":{"MyContractMock":{"abi":[{"inputs":[{"internalType":"address","name":"data","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[],"name":"InvalidZeroData","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"data","type":"address"}],"name":"DataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"myData","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"data","type":"address"}],"name":"setData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2183":{"entryPoint":null,"id":2183,"parameterSlots":2,"returnSlots":0},"@_2266":{"entryPoint":null,"id":2266,"parameterSlots":2,"returnSlots":0},"@_39":{"entryPoint":null,"id":39,"parameterSlots":1,"returnSlots":0},"@_551":{"entryPoint":null,"id":551,"parameterSlots":1,"returnSlots":0},"@_598":{"entryPoint":null,"id":598,"parameterSlots":1,"returnSlots":0},"@constructorInit_229":{"entryPoint":270,"id":229,"parameterSlots":2,"returnSlots":0},"@layout_379":{"entryPoint":217,"id":379,"parameterSlots":0,"returnSlots":1},"@layout_527":{"entryPoint":392,"id":527,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_481":{"entryPoint":439,"id":481,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$723_fromMemory":{"entryPoint":555,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":616,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":531,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1001:31","nodeType":"YulBlock","src":"0:1001:31","statements":[{"nativeSrc":"6:3:31","nodeType":"YulBlock","src":"6:3:31","statements":[]},{"body":{"nativeSrc":"59:86:31","nodeType":"YulBlock","src":"59:86:31","statements":[{"body":{"nativeSrc":"123:16:31","nodeType":"YulBlock","src":"123:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:31","nodeType":"YulLiteral","src":"132:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:31","nodeType":"YulLiteral","src":"135:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:31","nodeType":"YulIdentifier","src":"125:6:31"},"nativeSrc":"125:12:31","nodeType":"YulFunctionCall","src":"125:12:31"},"nativeSrc":"125:12:31","nodeType":"YulExpressionStatement","src":"125:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:31","nodeType":"YulIdentifier","src":"82:5:31"},{"arguments":[{"name":"value","nativeSrc":"93:5:31","nodeType":"YulIdentifier","src":"93:5:31"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:31","nodeType":"YulLiteral","src":"108:3:31","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:31","nodeType":"YulLiteral","src":"113:1:31","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:31","nodeType":"YulIdentifier","src":"104:3:31"},"nativeSrc":"104:11:31","nodeType":"YulFunctionCall","src":"104:11:31"},{"kind":"number","nativeSrc":"117:1:31","nodeType":"YulLiteral","src":"117:1:31","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:31","nodeType":"YulIdentifier","src":"100:3:31"},"nativeSrc":"100:19:31","nodeType":"YulFunctionCall","src":"100:19:31"}],"functionName":{"name":"and","nativeSrc":"89:3:31","nodeType":"YulIdentifier","src":"89:3:31"},"nativeSrc":"89:31:31","nodeType":"YulFunctionCall","src":"89:31:31"}],"functionName":{"name":"eq","nativeSrc":"79:2:31","nodeType":"YulIdentifier","src":"79:2:31"},"nativeSrc":"79:42:31","nodeType":"YulFunctionCall","src":"79:42:31"}],"functionName":{"name":"iszero","nativeSrc":"72:6:31","nodeType":"YulIdentifier","src":"72:6:31"},"nativeSrc":"72:50:31","nodeType":"YulFunctionCall","src":"72:50:31"},"nativeSrc":"69:70:31","nodeType":"YulIf","src":"69:70:31"}]},"name":"validator_revert_address","nativeSrc":"14:131:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:31","nodeType":"YulTypedName","src":"48:5:31","type":""}],"src":"14:131:31"},{"body":{"nativeSrc":"274:287:31","nodeType":"YulBlock","src":"274:287:31","statements":[{"body":{"nativeSrc":"320:16:31","nodeType":"YulBlock","src":"320:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"329:1:31","nodeType":"YulLiteral","src":"329:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"332:1:31","nodeType":"YulLiteral","src":"332:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"322:6:31","nodeType":"YulIdentifier","src":"322:6:31"},"nativeSrc":"322:12:31","nodeType":"YulFunctionCall","src":"322:12:31"},"nativeSrc":"322:12:31","nodeType":"YulExpressionStatement","src":"322:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"295:7:31","nodeType":"YulIdentifier","src":"295:7:31"},{"name":"headStart","nativeSrc":"304:9:31","nodeType":"YulIdentifier","src":"304:9:31"}],"functionName":{"name":"sub","nativeSrc":"291:3:31","nodeType":"YulIdentifier","src":"291:3:31"},"nativeSrc":"291:23:31","nodeType":"YulFunctionCall","src":"291:23:31"},{"kind":"number","nativeSrc":"316:2:31","nodeType":"YulLiteral","src":"316:2:31","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"287:3:31","nodeType":"YulIdentifier","src":"287:3:31"},"nativeSrc":"287:32:31","nodeType":"YulFunctionCall","src":"287:32:31"},"nativeSrc":"284:52:31","nodeType":"YulIf","src":"284:52:31"},{"nativeSrc":"345:29:31","nodeType":"YulVariableDeclaration","src":"345:29:31","value":{"arguments":[{"name":"headStart","nativeSrc":"364:9:31","nodeType":"YulIdentifier","src":"364:9:31"}],"functionName":{"name":"mload","nativeSrc":"358:5:31","nodeType":"YulIdentifier","src":"358:5:31"},"nativeSrc":"358:16:31","nodeType":"YulFunctionCall","src":"358:16:31"},"variables":[{"name":"value","nativeSrc":"349:5:31","nodeType":"YulTypedName","src":"349:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"408:5:31","nodeType":"YulIdentifier","src":"408:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"383:24:31","nodeType":"YulIdentifier","src":"383:24:31"},"nativeSrc":"383:31:31","nodeType":"YulFunctionCall","src":"383:31:31"},"nativeSrc":"383:31:31","nodeType":"YulExpressionStatement","src":"383:31:31"},{"nativeSrc":"423:15:31","nodeType":"YulAssignment","src":"423:15:31","value":{"name":"value","nativeSrc":"433:5:31","nodeType":"YulIdentifier","src":"433:5:31"},"variableNames":[{"name":"value0","nativeSrc":"423:6:31","nodeType":"YulIdentifier","src":"423:6:31"}]},{"nativeSrc":"447:40:31","nodeType":"YulVariableDeclaration","src":"447:40:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"472:9:31","nodeType":"YulIdentifier","src":"472:9:31"},{"kind":"number","nativeSrc":"483:2:31","nodeType":"YulLiteral","src":"483:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"468:3:31","nodeType":"YulIdentifier","src":"468:3:31"},"nativeSrc":"468:18:31","nodeType":"YulFunctionCall","src":"468:18:31"}],"functionName":{"name":"mload","nativeSrc":"462:5:31","nodeType":"YulIdentifier","src":"462:5:31"},"nativeSrc":"462:25:31","nodeType":"YulFunctionCall","src":"462:25:31"},"variables":[{"name":"value_1","nativeSrc":"451:7:31","nodeType":"YulTypedName","src":"451:7:31","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"521:7:31","nodeType":"YulIdentifier","src":"521:7:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"496:24:31","nodeType":"YulIdentifier","src":"496:24:31"},"nativeSrc":"496:33:31","nodeType":"YulFunctionCall","src":"496:33:31"},"nativeSrc":"496:33:31","nodeType":"YulExpressionStatement","src":"496:33:31"},{"nativeSrc":"538:17:31","nodeType":"YulAssignment","src":"538:17:31","value":{"name":"value_1","nativeSrc":"548:7:31","nodeType":"YulIdentifier","src":"548:7:31"},"variableNames":[{"name":"value1","nativeSrc":"538:6:31","nodeType":"YulIdentifier","src":"538:6:31"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$723_fromMemory","nativeSrc":"150:411:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"232:9:31","nodeType":"YulTypedName","src":"232:9:31","type":""},{"name":"dataEnd","nativeSrc":"243:7:31","nodeType":"YulTypedName","src":"243:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"255:6:31","nodeType":"YulTypedName","src":"255:6:31","type":""},{"name":"value1","nativeSrc":"263:6:31","nodeType":"YulTypedName","src":"263:6:31","type":""}],"src":"150:411:31"},{"body":{"nativeSrc":"667:102:31","nodeType":"YulBlock","src":"667:102:31","statements":[{"nativeSrc":"677:26:31","nodeType":"YulAssignment","src":"677:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"689:9:31","nodeType":"YulIdentifier","src":"689:9:31"},{"kind":"number","nativeSrc":"700:2:31","nodeType":"YulLiteral","src":"700:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"685:3:31","nodeType":"YulIdentifier","src":"685:3:31"},"nativeSrc":"685:18:31","nodeType":"YulFunctionCall","src":"685:18:31"},"variableNames":[{"name":"tail","nativeSrc":"677:4:31","nodeType":"YulIdentifier","src":"677:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"719:9:31","nodeType":"YulIdentifier","src":"719:9:31"},{"arguments":[{"name":"value0","nativeSrc":"734:6:31","nodeType":"YulIdentifier","src":"734:6:31"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"750:3:31","nodeType":"YulLiteral","src":"750:3:31","type":"","value":"160"},{"kind":"number","nativeSrc":"755:1:31","nodeType":"YulLiteral","src":"755:1:31","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"746:3:31","nodeType":"YulIdentifier","src":"746:3:31"},"nativeSrc":"746:11:31","nodeType":"YulFunctionCall","src":"746:11:31"},{"kind":"number","nativeSrc":"759:1:31","nodeType":"YulLiteral","src":"759:1:31","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"742:3:31","nodeType":"YulIdentifier","src":"742:3:31"},"nativeSrc":"742:19:31","nodeType":"YulFunctionCall","src":"742:19:31"}],"functionName":{"name":"and","nativeSrc":"730:3:31","nodeType":"YulIdentifier","src":"730:3:31"},"nativeSrc":"730:32:31","nodeType":"YulFunctionCall","src":"730:32:31"}],"functionName":{"name":"mstore","nativeSrc":"712:6:31","nodeType":"YulIdentifier","src":"712:6:31"},"nativeSrc":"712:51:31","nodeType":"YulFunctionCall","src":"712:51:31"},"nativeSrc":"712:51:31","nodeType":"YulExpressionStatement","src":"712:51:31"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"566:203:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"636:9:31","nodeType":"YulTypedName","src":"636:9:31","type":""},{"name":"value0","nativeSrc":"647:6:31","nodeType":"YulTypedName","src":"647:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"658:4:31","nodeType":"YulTypedName","src":"658:4:31","type":""}],"src":"566:203:31"},{"body":{"nativeSrc":"823:176:31","nodeType":"YulBlock","src":"823:176:31","statements":[{"nativeSrc":"833:17:31","nodeType":"YulAssignment","src":"833:17:31","value":{"arguments":[{"name":"x","nativeSrc":"845:1:31","nodeType":"YulIdentifier","src":"845:1:31"},{"name":"y","nativeSrc":"848:1:31","nodeType":"YulIdentifier","src":"848:1:31"}],"functionName":{"name":"sub","nativeSrc":"841:3:31","nodeType":"YulIdentifier","src":"841:3:31"},"nativeSrc":"841:9:31","nodeType":"YulFunctionCall","src":"841:9:31"},"variableNames":[{"name":"diff","nativeSrc":"833:4:31","nodeType":"YulIdentifier","src":"833:4:31"}]},{"body":{"nativeSrc":"882:111:31","nodeType":"YulBlock","src":"882:111:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:31","nodeType":"YulLiteral","src":"903:1:31","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"910:3:31","nodeType":"YulLiteral","src":"910:3:31","type":"","value":"224"},{"kind":"number","nativeSrc":"915:10:31","nodeType":"YulLiteral","src":"915:10:31","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"906:3:31","nodeType":"YulIdentifier","src":"906:3:31"},"nativeSrc":"906:20:31","nodeType":"YulFunctionCall","src":"906:20:31"}],"functionName":{"name":"mstore","nativeSrc":"896:6:31","nodeType":"YulIdentifier","src":"896:6:31"},"nativeSrc":"896:31:31","nodeType":"YulFunctionCall","src":"896:31:31"},"nativeSrc":"896:31:31","nodeType":"YulExpressionStatement","src":"896:31:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"947:1:31","nodeType":"YulLiteral","src":"947:1:31","type":"","value":"4"},{"kind":"number","nativeSrc":"950:4:31","nodeType":"YulLiteral","src":"950:4:31","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"940:6:31","nodeType":"YulIdentifier","src":"940:6:31"},"nativeSrc":"940:15:31","nodeType":"YulFunctionCall","src":"940:15:31"},"nativeSrc":"940:15:31","nodeType":"YulExpressionStatement","src":"940:15:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"975:1:31","nodeType":"YulLiteral","src":"975:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"978:4:31","nodeType":"YulLiteral","src":"978:4:31","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"968:6:31","nodeType":"YulIdentifier","src":"968:6:31"},"nativeSrc":"968:15:31","nodeType":"YulFunctionCall","src":"968:15:31"},"nativeSrc":"968:15:31","nodeType":"YulExpressionStatement","src":"968:15:31"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"865:4:31","nodeType":"YulIdentifier","src":"865:4:31"},{"name":"x","nativeSrc":"871:1:31","nodeType":"YulIdentifier","src":"871:1:31"}],"functionName":{"name":"gt","nativeSrc":"862:2:31","nodeType":"YulIdentifier","src":"862:2:31"},"nativeSrc":"862:11:31","nodeType":"YulFunctionCall","src":"862:11:31"},"nativeSrc":"859:134:31","nodeType":"YulIf","src":"859:134:31"}]},"name":"checked_sub_t_uint256","nativeSrc":"774:225:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"805:1:31","nodeType":"YulTypedName","src":"805:1:31","type":""},{"name":"y","nativeSrc":"808:1:31","nodeType":"YulTypedName","src":"808:1:31","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"814:4:31","nodeType":"YulTypedName","src":"814:4:31","type":""}],"src":"774:225:31"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$723_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":31,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801562000010575f80fd5b506040516200177a3803806200177a83398101604081905262000033916200022b565b81818080336200004e8162000047620000d9565b906200010e565b506001600160a01b03908116608052831690506200007f57604051633da979c160e21b815260040160405180910390fd5b5f80546001600160a01b0319166001600160a01b0384169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a15050505062000288565b5f806200010860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000268565b92915050565b6001600160a01b03811615620001645781546001600160a01b0319166001600160a01b03821690811783556040515f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001846307f5828d60e41b60016200017c62000188565b9190620001b7565b5050565b5f806200010860017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000268565b600160e01b6001600160e01b0319831601620001e6576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b0319919091165f9081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b038116811462000228575f80fd5b50565b5f80604083850312156200023d575f80fd5b82516200024a8162000213565b60208401519092506200025d8162000213565b809150509250929050565b818103818111156200010857634e487b7160e01b5f52601160045260245ffd5b6080516114b7620002c35f395f818160f20152818161017c01528181610b7f01528181610bbd01528181610cf10152610d7901526114b75ff3fe608060405234801561000f575f80fd5b50600436106100c4575f3560e01c806361dfdae61161007d578063c3666c3611610058578063c3666c36146101e9578063f2fde38b146101fc578063f7ba94bd1461020f575f80fd5b806361dfdae6146101b957806373c8a958146101ce5780638da5cb5b146101e1575f80fd5b80632bb14104116100ad5780632bb141041461013757806331e66e1e14610156578063572b6c051461016c575f80fd5b806301ffc9a7146100c85780632b4c9f16146100f0575b5f80fd5b6100db6100d6366004611139565b610222565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e7565b5f546101129073ffffffffffffffffffffffffffffffffffffffff1681565b61015e61023b565b6040516100e792919061117f565b6100db61017a3660046111ec565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101cc6101c73660046111ec565b61024d565b005b6101cc6101dc36600461124f565b61032b565b61011261041f565b6101cc6101f736600461124f565b61044a565b6101cc61020a3660046111ec565b6105bb565b6101cc61021d3660046112e2565b6105d9565b5f6102358261022f610696565b906106c3565b92915050565b365f61024561079a565b915091509091565b73ffffffffffffffffffffffffffffffffffffffff811661029a576040517ff6a5e70400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b36102a56107a4565b6102ad6107ad565b906107da565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150565b6103366102a56107a4565b8483811415806103465750808214155b1561037d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181146104155761040d88888381811061039b5761039b611349565b90506020020160208101906103b091906111ec565b8585848181106103c2576103c2611349565b905060200201358888858181106103db576103db611349565b90506020020160208101906103f091906111ec565b73ffffffffffffffffffffffffffffffffffffffff16919061084e565b60010161037f565b5050505050505050565b5f61044561042b6107ad565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6104556102a56107a4565b8483811415806104655750808214155b1561049c576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610415578585828181106104b7576104b7611349565b90506020020160208101906104cc91906111ec565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106104fa576104fa611349565b905060200201602081019061050f91906111ec565b87878681811061052157610521611349565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b15801561059a575f80fd5b505af11580156105ac573d5f803e3d5ffd5b5050505080600101905061049e565b6105d66105c66107a4565b826105cf6107ad565b91906108e0565b50565b6105e46102a56107a4565b8281811461061e576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b81811461068e5761068684848381811061063c5761063c611349565b9050602002013587878481811061065557610655611349565b905060200201602081019061066a91906111ec565b73ffffffffffffffffffffffffffffffffffffffff16906109f4565b600101610620565b505050505050565b5f8061023560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611376565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161071157505f610235565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161076257506001610235565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b365f610245610b4a565b5f610445610caf565b5f8061023560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611376565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461084a576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526108db908490610df3565b505050565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461094d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610841565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109ee5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35b50505050565b80471015610a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610841565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114610ab4576040519150601f19603f3d011682016040523d82523d5f602084013e610ab9565b606091505b50509050806108db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610841565b365f33321480610b5a5750601836105b15610b6757505f91369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610c9a575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015610c76573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9a91906113ae565b15610ca757610245610f00565b505f91369150565b5f33321480610cbe5750601836105b15610cc857503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610de257506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610dbe573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de291906113ae565b15610dec57919050565b3391505090565b5f610e54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f309092919063ffffffff16565b905080515f1480610e74575080806020019051810190610e7491906113ae565b6108db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610841565b365f6102457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec83018284816113cd565b6060610f3e84845f85610f46565b949350505050565b606082471015610fd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610841565b5f808673ffffffffffffffffffffffffffffffffffffffff1685876040516110009190611416565b5f6040518083038185875af1925050503d805f811461103a576040519150601f19603f3d011682016040523d82523d5f602084013e61103f565b606091505b50915091506110508783838761105b565b979650505050505050565b606083156110f05782515f036110e95773ffffffffffffffffffffffffffffffffffffffff85163b6110e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610841565b5081610f3e565b610f3e83838151156111055781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108419190611431565b5f60208284031215611149575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611178575f80fd5b9392505050565b60208152816020820152818360408301375f818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b73ffffffffffffffffffffffffffffffffffffffff811681146105d6575f80fd5b5f602082840312156111fc575f80fd5b8135611178816111cb565b5f8083601f840112611217575f80fd5b50813567ffffffffffffffff81111561122e575f80fd5b6020830191508360208260051b8501011115611248575f80fd5b9250929050565b5f805f805f8060608789031215611264575f80fd5b863567ffffffffffffffff8082111561127b575f80fd5b6112878a838b01611207565b9098509650602089013591508082111561129f575f80fd5b6112ab8a838b01611207565b909650945060408901359150808211156112c3575f80fd5b506112d089828a01611207565b979a9699509497509295939492505050565b5f805f80604085870312156112f5575f80fd5b843567ffffffffffffffff8082111561130c575f80fd5b61131888838901611207565b90965094506020870135915080821115611330575f80fd5b5061133d87828801611207565b95989497509550505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b81810381811115610235577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f602082840312156113be575f80fd5b81518015158114611178575f80fd5b5f80858511156113db575f80fd5b838611156113e7575f80fd5b5050820193919092039150565b5f5b8381101561140e5781810151838201526020016113f6565b50505f910152565b5f82516114278184602087016113f4565b9190910192915050565b602081525f825180602084015261144f8160408501602087016113f4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212207b53cb29681a9123eafe42ab444dba72bff4c3da1cb3f8bad5874939944652b264736f6c63430008150033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x177A CODESIZE SUB DUP1 PUSH3 0x177A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x33 SWAP2 PUSH3 0x22B JUMP JUMPDEST DUP2 DUP2 DUP1 DUP1 CALLER PUSH3 0x4E DUP2 PUSH3 0x47 PUSH3 0xD9 JUMP JUMPDEST SWAP1 PUSH3 0x10E JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP4 AND SWAP1 POP PUSH3 0x7F JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DA979C1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP PUSH3 0x288 JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x108 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x268 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x164 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x184 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x17C PUSH3 0x188 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1B7 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x108 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x268 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1E6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x228 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x23D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0x24A DUP2 PUSH3 0x213 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x25D DUP2 PUSH3 0x213 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x108 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x14B7 PUSH3 0x2C3 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH1 0xF2 ADD MSTORE DUP2 DUP2 PUSH2 0x17C ADD MSTORE DUP2 DUP2 PUSH2 0xB7F ADD MSTORE DUP2 DUP2 PUSH2 0xBBD ADD MSTORE DUP2 DUP2 PUSH2 0xCF1 ADD MSTORE PUSH2 0xD79 ADD MSTORE PUSH2 0x14B7 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61DFDAE6 GT PUSH2 0x7D JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x20F JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x16C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xDB PUSH2 0xD6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1139 JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH0 SLOAD PUSH2 0x112 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x15E PUSH2 0x23B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP3 SWAP2 SWAP1 PUSH2 0x117F JUMP JUMPDEST PUSH2 0xDB PUSH2 0x17A CALLDATASIZE PUSH1 0x4 PUSH2 0x11EC JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CC PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x112 PUSH2 0x41F JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x5BB JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x12E2 JUMP JUMPDEST PUSH2 0x5D9 JUMP JUMPDEST PUSH0 PUSH2 0x235 DUP3 PUSH2 0x22F PUSH2 0x696 JUMP JUMPDEST SWAP1 PUSH2 0x6C3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x245 PUSH2 0x79A JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x29A JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B3 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x7AD JUMP JUMPDEST SWAP1 PUSH2 0x7DA JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x336 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x346 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x37D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x415 JUMPI PUSH2 0x40D DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x39B JUMPI PUSH2 0x39B PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3B0 SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x3C2 JUMPI PUSH2 0x3C2 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x3DB JUMPI PUSH2 0x3DB PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3F0 SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x84E JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x37F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x445 PUSH2 0x42B PUSH2 0x7AD JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x455 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x465 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x49C JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x415 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x4B7 JUMPI PUSH2 0x4B7 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x4FA JUMPI PUSH2 0x4FA PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x521 JUMPI PUSH2 0x521 PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5AC JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x49E JUMP JUMPDEST PUSH2 0x5D6 PUSH2 0x5C6 PUSH2 0x7A4 JUMP JUMPDEST DUP3 PUSH2 0x5CF PUSH2 0x7AD JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8E0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5E4 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x61E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x68E JUMPI PUSH2 0x686 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x63C JUMPI PUSH2 0x63C PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x655 JUMPI PUSH2 0x655 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x66A SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x9F4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x620 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x235 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1376 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x711 JUMPI POP PUSH0 PUSH2 0x235 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x762 JUMPI POP PUSH1 0x1 PUSH2 0x235 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x245 PUSH2 0xB4A JUMP JUMPDEST PUSH0 PUSH2 0x445 PUSH2 0xCAF JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x235 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1376 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x84A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x8DB SWAP1 DUP5 SWAP1 PUSH2 0xDF3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x94D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x841 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9EE JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x841 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAB9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x841 JUMP JUMPDEST CALLDATASIZE PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0xB5A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB67 JUMPI POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xC9A JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC76 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC9A SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST ISZERO PUSH2 0xCA7 JUMPI PUSH2 0x245 PUSH2 0xF00 JUMP JUMPDEST POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0xCBE JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCC8 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xDE2 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDBE JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDE2 SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST ISZERO PUSH2 0xDEC JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xE54 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF30 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0xE74 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE74 SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x841 JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x245 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF3E DUP5 DUP5 PUSH0 DUP6 PUSH2 0xF46 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x841 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1000 SWAP2 SWAP1 PUSH2 0x1416 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x103A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x103F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1050 DUP8 DUP4 DUP4 DUP8 PUSH2 0x105B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x10F0 JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0x10E9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x10E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x841 JUMP JUMPDEST POP DUP2 PUSH2 0xF3E JUMP JUMPDEST PUSH2 0xF3E DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1105 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x841 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1149 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1178 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5D6 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11FC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1178 DUP2 PUSH2 0x11CB JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1217 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x122E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1248 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1264 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x127B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1287 DUP11 DUP4 DUP12 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x129F JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x12AB DUP11 DUP4 DUP12 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x12C3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D0 DUP10 DUP3 DUP11 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12F5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x130C JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1318 DUP9 DUP4 DUP10 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1330 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x133D DUP8 DUP3 DUP9 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x235 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13BE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1178 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x13DB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x13E7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x140E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13F6 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x1427 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x13F4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x144F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x13F4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x53CB29681A9123EAFE42AB444DBA72BFF4C3DA1CB3F8BAD587493994 CHAINID MSTORE 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"221:248:30:-:0;;;265:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;340:4;346:17;;;1125:10:29;1008:63:1;1125:10:29;1008:33:1;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:12;;;;;1195:18:29;::::2;::::0;-1:-1:-1;1191:48:29::2;;1222:17;;-1:-1:-1::0;;;1222:17:29::2;;;;;;;;;;;1191:48;1249:6;:13:::0;;-1:-1:-1;;;;;;1249:13:29::2;-1:-1:-1::0;;;;;1249:13:29;::::2;::::0;;::::2;::::0;;;1277::::2;::::0;712:51:31;;;1277:13:29::2;::::0;700:2:31;685:18;1277:13:29::2;;;;;;;1043:254:::0;;265:102:30;;221:248;;4865:174:6;4906:16;;761:71;831:1;769:58;761:71;:::i;:::-;753:80;4865:174;-1:-1:-1;;4865:174:6:o;1402:355::-;-1:-1:-1;;;;;1490:26:6;;;1486:166;;1532:30;;-1:-1:-1;;;;;;1532:30:6;-1:-1:-1;;;;;1532:30:6;;;;;;;1581:60;;-1:-1:-1;;1581:60:6;;-1:-1:-1;;1581:60:6;1486:166;1661:89;-1:-1:-1;;;1745:4:6;1661:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1402:355;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:131:31:-;-1:-1:-1;;;;;89:31:31;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:411::-;255:6;263;316:2;304:9;295:7;291:23;287:32;284:52;;;332:1;329;322:12;284:52;364:9;358:16;383:31;408:5;383:31;:::i;:::-;483:2;468:18;;462:25;433:5;;-1:-1:-1;496:33:31;462:25;496:33;:::i;:::-;548:7;538:17;;;150:411;;;;;:::o;774:225::-;841:9;;;862:11;;;859:134;;;915:10;910:3;906:20;903:1;896:31;950:4;947:1;940:15;978:4;975:1;968:15;774:225;221:248:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__msgData_2275":{"entryPoint":571,"id":2275,"parameterSlots":0,"returnSlots":2},"@_callOptionalReturn_1606":{"entryPoint":3571,"id":1606,"parameterSlots":2,"returnSlots":0},"@_msgData_2244":{"entryPoint":1946,"id":2244,"parameterSlots":0,"returnSlots":2},"@_msgData_696":{"entryPoint":2890,"id":696,"parameterSlots":0,"returnSlots":2},"@_msgSender_2230":{"entryPoint":1956,"id":2230,"parameterSlots":0,"returnSlots":1},"@_msgSender_648":{"entryPoint":3247,"id":648,"parameterSlots":0,"returnSlots":1},"@_revert_1984":{"entryPoint":null,"id":1984,"parameterSlots":2,"returnSlots":0},"@enforceIsContractOwner_346":{"entryPoint":2010,"id":346,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_560":{"entryPoint":null,"id":560,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_1809":{"entryPoint":3910,"id":1809,"parameterSlots":4,"returnSlots":1},"@functionCall_1745":{"entryPoint":3888,"id":1745,"parameterSlots":3,"returnSlots":1},"@isContract_1673":{"entryPoint":null,"id":1673,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_576":{"entryPoint":null,"id":576,"parameterSlots":1,"returnSlots":1},"@layout_379":{"entryPoint":1965,"id":379,"parameterSlots":0,"returnSlots":1},"@layout_527":{"entryPoint":1686,"id":527,"parameterSlots":0,"returnSlots":1},"@msgData_751":{"entryPoint":3840,"id":751,"parameterSlots":0,"returnSlots":2},"@msgSender_734":{"entryPoint":null,"id":734,"parameterSlots":0,"returnSlots":1},"@myData_2143":{"entryPoint":null,"id":2143,"parameterSlots":0,"returnSlots":0},"@owner_308":{"entryPoint":null,"id":308,"parameterSlots":1,"returnSlots":1},"@owner_70":{"entryPoint":1055,"id":70,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_970":{"entryPoint":811,"id":970,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1040":{"entryPoint":1098,"id":1040,"parameterSlots":6,"returnSlots":0},"@recoverETH_904":{"entryPoint":1497,"id":904,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1312":{"entryPoint":2126,"id":1312,"parameterSlots":3,"returnSlots":0},"@sendValue_1707":{"entryPoint":2548,"id":1707,"parameterSlots":2,"returnSlots":0},"@setData_2216":{"entryPoint":589,"id":2216,"parameterSlots":1,"returnSlots":0},"@supportsInterface_409":{"entryPoint":546,"id":409,"parameterSlots":1,"returnSlots":1},"@supportsInterface_515":{"entryPoint":1731,"id":515,"parameterSlots":2,"returnSlots":1},"@transferOwnership_295":{"entryPoint":2272,"id":295,"parameterSlots":3,"returnSlots":0},"@transferOwnership_87":{"entryPoint":1467,"id":87,"parameterSlots":1,"returnSlots":0},"@verifyCallResultFromTarget_1940":{"entryPoint":4187,"id":1940,"parameterSlots":4,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":4615,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4588,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4687,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4834,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":5038,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":4409,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1243":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1162":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5142,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4479,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$723__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5169,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":5069,"id":null,"parameterSlots":4,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":4982,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5108,"id":null,"parameterSlots":3,"returnSlots":0},"panic_error_0x32":{"entryPoint":4937,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":4555,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:11370:31","nodeType":"YulBlock","src":"0:11370:31","statements":[{"nativeSrc":"6:3:31","nodeType":"YulBlock","src":"6:3:31","statements":[]},{"body":{"nativeSrc":"83:263:31","nodeType":"YulBlock","src":"83:263:31","statements":[{"body":{"nativeSrc":"129:16:31","nodeType":"YulBlock","src":"129:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:31","nodeType":"YulLiteral","src":"138:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:31","nodeType":"YulLiteral","src":"141:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:31","nodeType":"YulIdentifier","src":"131:6:31"},"nativeSrc":"131:12:31","nodeType":"YulFunctionCall","src":"131:12:31"},"nativeSrc":"131:12:31","nodeType":"YulExpressionStatement","src":"131:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:31","nodeType":"YulIdentifier","src":"104:7:31"},{"name":"headStart","nativeSrc":"113:9:31","nodeType":"YulIdentifier","src":"113:9:31"}],"functionName":{"name":"sub","nativeSrc":"100:3:31","nodeType":"YulIdentifier","src":"100:3:31"},"nativeSrc":"100:23:31","nodeType":"YulFunctionCall","src":"100:23:31"},{"kind":"number","nativeSrc":"125:2:31","nodeType":"YulLiteral","src":"125:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:31","nodeType":"YulIdentifier","src":"96:3:31"},"nativeSrc":"96:32:31","nodeType":"YulFunctionCall","src":"96:32:31"},"nativeSrc":"93:52:31","nodeType":"YulIf","src":"93:52:31"},{"nativeSrc":"154:36:31","nodeType":"YulVariableDeclaration","src":"154:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:31","nodeType":"YulIdentifier","src":"180:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:31","nodeType":"YulIdentifier","src":"167:12:31"},"nativeSrc":"167:23:31","nodeType":"YulFunctionCall","src":"167:23:31"},"variables":[{"name":"value","nativeSrc":"158:5:31","nodeType":"YulTypedName","src":"158:5:31","type":""}]},{"body":{"nativeSrc":"300:16:31","nodeType":"YulBlock","src":"300:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:31","nodeType":"YulLiteral","src":"309:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:31","nodeType":"YulLiteral","src":"312:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:31","nodeType":"YulIdentifier","src":"302:6:31"},"nativeSrc":"302:12:31","nodeType":"YulFunctionCall","src":"302:12:31"},"nativeSrc":"302:12:31","nodeType":"YulExpressionStatement","src":"302:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:31","nodeType":"YulIdentifier","src":"212:5:31"},{"arguments":[{"name":"value","nativeSrc":"223:5:31","nodeType":"YulIdentifier","src":"223:5:31"},{"kind":"number","nativeSrc":"230:66:31","nodeType":"YulLiteral","src":"230:66:31","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:31","nodeType":"YulIdentifier","src":"219:3:31"},"nativeSrc":"219:78:31","nodeType":"YulFunctionCall","src":"219:78:31"}],"functionName":{"name":"eq","nativeSrc":"209:2:31","nodeType":"YulIdentifier","src":"209:2:31"},"nativeSrc":"209:89:31","nodeType":"YulFunctionCall","src":"209:89:31"}],"functionName":{"name":"iszero","nativeSrc":"202:6:31","nodeType":"YulIdentifier","src":"202:6:31"},"nativeSrc":"202:97:31","nodeType":"YulFunctionCall","src":"202:97:31"},"nativeSrc":"199:117:31","nodeType":"YulIf","src":"199:117:31"},{"nativeSrc":"325:15:31","nodeType":"YulAssignment","src":"325:15:31","value":{"name":"value","nativeSrc":"335:5:31","nodeType":"YulIdentifier","src":"335:5:31"},"variableNames":[{"name":"value0","nativeSrc":"325:6:31","nodeType":"YulIdentifier","src":"325:6:31"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:31","nodeType":"YulTypedName","src":"49:9:31","type":""},{"name":"dataEnd","nativeSrc":"60:7:31","nodeType":"YulTypedName","src":"60:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:31","nodeType":"YulTypedName","src":"72:6:31","type":""}],"src":"14:332:31"},{"body":{"nativeSrc":"446:92:31","nodeType":"YulBlock","src":"446:92:31","statements":[{"nativeSrc":"456:26:31","nodeType":"YulAssignment","src":"456:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:31","nodeType":"YulIdentifier","src":"468:9:31"},{"kind":"number","nativeSrc":"479:2:31","nodeType":"YulLiteral","src":"479:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:31","nodeType":"YulIdentifier","src":"464:3:31"},"nativeSrc":"464:18:31","nodeType":"YulFunctionCall","src":"464:18:31"},"variableNames":[{"name":"tail","nativeSrc":"456:4:31","nodeType":"YulIdentifier","src":"456:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:31","nodeType":"YulIdentifier","src":"498:9:31"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:31","nodeType":"YulIdentifier","src":"523:6:31"}],"functionName":{"name":"iszero","nativeSrc":"516:6:31","nodeType":"YulIdentifier","src":"516:6:31"},"nativeSrc":"516:14:31","nodeType":"YulFunctionCall","src":"516:14:31"}],"functionName":{"name":"iszero","nativeSrc":"509:6:31","nodeType":"YulIdentifier","src":"509:6:31"},"nativeSrc":"509:22:31","nodeType":"YulFunctionCall","src":"509:22:31"}],"functionName":{"name":"mstore","nativeSrc":"491:6:31","nodeType":"YulIdentifier","src":"491:6:31"},"nativeSrc":"491:41:31","nodeType":"YulFunctionCall","src":"491:41:31"},"nativeSrc":"491:41:31","nodeType":"YulExpressionStatement","src":"491:41:31"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:31","nodeType":"YulTypedName","src":"415:9:31","type":""},{"name":"value0","nativeSrc":"426:6:31","nodeType":"YulTypedName","src":"426:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:31","nodeType":"YulTypedName","src":"437:4:31","type":""}],"src":"351:187:31"},{"body":{"nativeSrc":"670:125:31","nodeType":"YulBlock","src":"670:125:31","statements":[{"nativeSrc":"680:26:31","nodeType":"YulAssignment","src":"680:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"692:9:31","nodeType":"YulIdentifier","src":"692:9:31"},{"kind":"number","nativeSrc":"703:2:31","nodeType":"YulLiteral","src":"703:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"688:3:31","nodeType":"YulIdentifier","src":"688:3:31"},"nativeSrc":"688:18:31","nodeType":"YulFunctionCall","src":"688:18:31"},"variableNames":[{"name":"tail","nativeSrc":"680:4:31","nodeType":"YulIdentifier","src":"680:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"722:9:31","nodeType":"YulIdentifier","src":"722:9:31"},{"arguments":[{"name":"value0","nativeSrc":"737:6:31","nodeType":"YulIdentifier","src":"737:6:31"},{"kind":"number","nativeSrc":"745:42:31","nodeType":"YulLiteral","src":"745:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"733:3:31","nodeType":"YulIdentifier","src":"733:3:31"},"nativeSrc":"733:55:31","nodeType":"YulFunctionCall","src":"733:55:31"}],"functionName":{"name":"mstore","nativeSrc":"715:6:31","nodeType":"YulIdentifier","src":"715:6:31"},"nativeSrc":"715:74:31","nodeType":"YulFunctionCall","src":"715:74:31"},"nativeSrc":"715:74:31","nodeType":"YulExpressionStatement","src":"715:74:31"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$723__to_t_address__fromStack_reversed","nativeSrc":"543:252:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"639:9:31","nodeType":"YulTypedName","src":"639:9:31","type":""},{"name":"value0","nativeSrc":"650:6:31","nodeType":"YulTypedName","src":"650:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"661:4:31","nodeType":"YulTypedName","src":"661:4:31","type":""}],"src":"543:252:31"},{"body":{"nativeSrc":"901:125:31","nodeType":"YulBlock","src":"901:125:31","statements":[{"nativeSrc":"911:26:31","nodeType":"YulAssignment","src":"911:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"923:9:31","nodeType":"YulIdentifier","src":"923:9:31"},{"kind":"number","nativeSrc":"934:2:31","nodeType":"YulLiteral","src":"934:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"919:3:31","nodeType":"YulIdentifier","src":"919:3:31"},"nativeSrc":"919:18:31","nodeType":"YulFunctionCall","src":"919:18:31"},"variableNames":[{"name":"tail","nativeSrc":"911:4:31","nodeType":"YulIdentifier","src":"911:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"953:9:31","nodeType":"YulIdentifier","src":"953:9:31"},{"arguments":[{"name":"value0","nativeSrc":"968:6:31","nodeType":"YulIdentifier","src":"968:6:31"},{"kind":"number","nativeSrc":"976:42:31","nodeType":"YulLiteral","src":"976:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"964:3:31","nodeType":"YulIdentifier","src":"964:3:31"},"nativeSrc":"964:55:31","nodeType":"YulFunctionCall","src":"964:55:31"}],"functionName":{"name":"mstore","nativeSrc":"946:6:31","nodeType":"YulIdentifier","src":"946:6:31"},"nativeSrc":"946:74:31","nodeType":"YulFunctionCall","src":"946:74:31"},"nativeSrc":"946:74:31","nodeType":"YulExpressionStatement","src":"946:74:31"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"800:226:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"870:9:31","nodeType":"YulTypedName","src":"870:9:31","type":""},{"name":"value0","nativeSrc":"881:6:31","nodeType":"YulTypedName","src":"881:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"892:4:31","nodeType":"YulTypedName","src":"892:4:31","type":""}],"src":"800:226:31"},{"body":{"nativeSrc":"1160:318:31","nodeType":"YulBlock","src":"1160:318:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1177:9:31","nodeType":"YulIdentifier","src":"1177:9:31"},{"kind":"number","nativeSrc":"1188:2:31","nodeType":"YulLiteral","src":"1188:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1170:6:31","nodeType":"YulIdentifier","src":"1170:6:31"},"nativeSrc":"1170:21:31","nodeType":"YulFunctionCall","src":"1170:21:31"},"nativeSrc":"1170:21:31","nodeType":"YulExpressionStatement","src":"1170:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1211:9:31","nodeType":"YulIdentifier","src":"1211:9:31"},{"kind":"number","nativeSrc":"1222:2:31","nodeType":"YulLiteral","src":"1222:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1207:3:31","nodeType":"YulIdentifier","src":"1207:3:31"},"nativeSrc":"1207:18:31","nodeType":"YulFunctionCall","src":"1207:18:31"},{"name":"value1","nativeSrc":"1227:6:31","nodeType":"YulIdentifier","src":"1227:6:31"}],"functionName":{"name":"mstore","nativeSrc":"1200:6:31","nodeType":"YulIdentifier","src":"1200:6:31"},"nativeSrc":"1200:34:31","nodeType":"YulFunctionCall","src":"1200:34:31"},"nativeSrc":"1200:34:31","nodeType":"YulExpressionStatement","src":"1200:34:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1260:9:31","nodeType":"YulIdentifier","src":"1260:9:31"},{"kind":"number","nativeSrc":"1271:2:31","nodeType":"YulLiteral","src":"1271:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1256:3:31","nodeType":"YulIdentifier","src":"1256:3:31"},"nativeSrc":"1256:18:31","nodeType":"YulFunctionCall","src":"1256:18:31"},{"name":"value0","nativeSrc":"1276:6:31","nodeType":"YulIdentifier","src":"1276:6:31"},{"name":"value1","nativeSrc":"1284:6:31","nodeType":"YulIdentifier","src":"1284:6:31"}],"functionName":{"name":"calldatacopy","nativeSrc":"1243:12:31","nodeType":"YulIdentifier","src":"1243:12:31"},"nativeSrc":"1243:48:31","nodeType":"YulFunctionCall","src":"1243:48:31"},"nativeSrc":"1243:48:31","nodeType":"YulExpressionStatement","src":"1243:48:31"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1315:9:31","nodeType":"YulIdentifier","src":"1315:9:31"},{"name":"value1","nativeSrc":"1326:6:31","nodeType":"YulIdentifier","src":"1326:6:31"}],"functionName":{"name":"add","nativeSrc":"1311:3:31","nodeType":"YulIdentifier","src":"1311:3:31"},"nativeSrc":"1311:22:31","nodeType":"YulFunctionCall","src":"1311:22:31"},{"kind":"number","nativeSrc":"1335:2:31","nodeType":"YulLiteral","src":"1335:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1307:3:31","nodeType":"YulIdentifier","src":"1307:3:31"},"nativeSrc":"1307:31:31","nodeType":"YulFunctionCall","src":"1307:31:31"},{"kind":"number","nativeSrc":"1340:1:31","nodeType":"YulLiteral","src":"1340:1:31","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1300:6:31","nodeType":"YulIdentifier","src":"1300:6:31"},"nativeSrc":"1300:42:31","nodeType":"YulFunctionCall","src":"1300:42:31"},"nativeSrc":"1300:42:31","nodeType":"YulExpressionStatement","src":"1300:42:31"},{"nativeSrc":"1351:121:31","nodeType":"YulAssignment","src":"1351:121:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1367:9:31","nodeType":"YulIdentifier","src":"1367:9:31"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1386:6:31","nodeType":"YulIdentifier","src":"1386:6:31"},{"kind":"number","nativeSrc":"1394:2:31","nodeType":"YulLiteral","src":"1394:2:31","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1382:3:31","nodeType":"YulIdentifier","src":"1382:3:31"},"nativeSrc":"1382:15:31","nodeType":"YulFunctionCall","src":"1382:15:31"},{"kind":"number","nativeSrc":"1399:66:31","nodeType":"YulLiteral","src":"1399:66:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1378:3:31","nodeType":"YulIdentifier","src":"1378:3:31"},"nativeSrc":"1378:88:31","nodeType":"YulFunctionCall","src":"1378:88:31"}],"functionName":{"name":"add","nativeSrc":"1363:3:31","nodeType":"YulIdentifier","src":"1363:3:31"},"nativeSrc":"1363:104:31","nodeType":"YulFunctionCall","src":"1363:104:31"},{"kind":"number","nativeSrc":"1469:2:31","nodeType":"YulLiteral","src":"1469:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1359:3:31","nodeType":"YulIdentifier","src":"1359:3:31"},"nativeSrc":"1359:113:31","nodeType":"YulFunctionCall","src":"1359:113:31"},"variableNames":[{"name":"tail","nativeSrc":"1351:4:31","nodeType":"YulIdentifier","src":"1351:4:31"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1031:447:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1121:9:31","nodeType":"YulTypedName","src":"1121:9:31","type":""},{"name":"value1","nativeSrc":"1132:6:31","nodeType":"YulTypedName","src":"1132:6:31","type":""},{"name":"value0","nativeSrc":"1140:6:31","nodeType":"YulTypedName","src":"1140:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1151:4:31","nodeType":"YulTypedName","src":"1151:4:31","type":""}],"src":"1031:447:31"},{"body":{"nativeSrc":"1528:109:31","nodeType":"YulBlock","src":"1528:109:31","statements":[{"body":{"nativeSrc":"1615:16:31","nodeType":"YulBlock","src":"1615:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1624:1:31","nodeType":"YulLiteral","src":"1624:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"1627:1:31","nodeType":"YulLiteral","src":"1627:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1617:6:31","nodeType":"YulIdentifier","src":"1617:6:31"},"nativeSrc":"1617:12:31","nodeType":"YulFunctionCall","src":"1617:12:31"},"nativeSrc":"1617:12:31","nodeType":"YulExpressionStatement","src":"1617:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1551:5:31","nodeType":"YulIdentifier","src":"1551:5:31"},{"arguments":[{"name":"value","nativeSrc":"1562:5:31","nodeType":"YulIdentifier","src":"1562:5:31"},{"kind":"number","nativeSrc":"1569:42:31","nodeType":"YulLiteral","src":"1569:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1558:3:31","nodeType":"YulIdentifier","src":"1558:3:31"},"nativeSrc":"1558:54:31","nodeType":"YulFunctionCall","src":"1558:54:31"}],"functionName":{"name":"eq","nativeSrc":"1548:2:31","nodeType":"YulIdentifier","src":"1548:2:31"},"nativeSrc":"1548:65:31","nodeType":"YulFunctionCall","src":"1548:65:31"}],"functionName":{"name":"iszero","nativeSrc":"1541:6:31","nodeType":"YulIdentifier","src":"1541:6:31"},"nativeSrc":"1541:73:31","nodeType":"YulFunctionCall","src":"1541:73:31"},"nativeSrc":"1538:93:31","nodeType":"YulIf","src":"1538:93:31"}]},"name":"validator_revert_address","nativeSrc":"1483:154:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1517:5:31","nodeType":"YulTypedName","src":"1517:5:31","type":""}],"src":"1483:154:31"},{"body":{"nativeSrc":"1712:177:31","nodeType":"YulBlock","src":"1712:177:31","statements":[{"body":{"nativeSrc":"1758:16:31","nodeType":"YulBlock","src":"1758:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1767:1:31","nodeType":"YulLiteral","src":"1767:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"1770:1:31","nodeType":"YulLiteral","src":"1770:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1760:6:31","nodeType":"YulIdentifier","src":"1760:6:31"},"nativeSrc":"1760:12:31","nodeType":"YulFunctionCall","src":"1760:12:31"},"nativeSrc":"1760:12:31","nodeType":"YulExpressionStatement","src":"1760:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1733:7:31","nodeType":"YulIdentifier","src":"1733:7:31"},{"name":"headStart","nativeSrc":"1742:9:31","nodeType":"YulIdentifier","src":"1742:9:31"}],"functionName":{"name":"sub","nativeSrc":"1729:3:31","nodeType":"YulIdentifier","src":"1729:3:31"},"nativeSrc":"1729:23:31","nodeType":"YulFunctionCall","src":"1729:23:31"},{"kind":"number","nativeSrc":"1754:2:31","nodeType":"YulLiteral","src":"1754:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1725:3:31","nodeType":"YulIdentifier","src":"1725:3:31"},"nativeSrc":"1725:32:31","nodeType":"YulFunctionCall","src":"1725:32:31"},"nativeSrc":"1722:52:31","nodeType":"YulIf","src":"1722:52:31"},{"nativeSrc":"1783:36:31","nodeType":"YulVariableDeclaration","src":"1783:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"1809:9:31","nodeType":"YulIdentifier","src":"1809:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"1796:12:31","nodeType":"YulIdentifier","src":"1796:12:31"},"nativeSrc":"1796:23:31","nodeType":"YulFunctionCall","src":"1796:23:31"},"variables":[{"name":"value","nativeSrc":"1787:5:31","nodeType":"YulTypedName","src":"1787:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1853:5:31","nodeType":"YulIdentifier","src":"1853:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1828:24:31","nodeType":"YulIdentifier","src":"1828:24:31"},"nativeSrc":"1828:31:31","nodeType":"YulFunctionCall","src":"1828:31:31"},"nativeSrc":"1828:31:31","nodeType":"YulExpressionStatement","src":"1828:31:31"},{"nativeSrc":"1868:15:31","nodeType":"YulAssignment","src":"1868:15:31","value":{"name":"value","nativeSrc":"1878:5:31","nodeType":"YulIdentifier","src":"1878:5:31"},"variableNames":[{"name":"value0","nativeSrc":"1868:6:31","nodeType":"YulIdentifier","src":"1868:6:31"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1642:247:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1678:9:31","nodeType":"YulTypedName","src":"1678:9:31","type":""},{"name":"dataEnd","nativeSrc":"1689:7:31","nodeType":"YulTypedName","src":"1689:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1701:6:31","nodeType":"YulTypedName","src":"1701:6:31","type":""}],"src":"1642:247:31"},{"body":{"nativeSrc":"1978:283:31","nodeType":"YulBlock","src":"1978:283:31","statements":[{"body":{"nativeSrc":"2027:16:31","nodeType":"YulBlock","src":"2027:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2036:1:31","nodeType":"YulLiteral","src":"2036:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2039:1:31","nodeType":"YulLiteral","src":"2039:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2029:6:31","nodeType":"YulIdentifier","src":"2029:6:31"},"nativeSrc":"2029:12:31","nodeType":"YulFunctionCall","src":"2029:12:31"},"nativeSrc":"2029:12:31","nodeType":"YulExpressionStatement","src":"2029:12:31"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2006:6:31","nodeType":"YulIdentifier","src":"2006:6:31"},{"kind":"number","nativeSrc":"2014:4:31","nodeType":"YulLiteral","src":"2014:4:31","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2002:3:31","nodeType":"YulIdentifier","src":"2002:3:31"},"nativeSrc":"2002:17:31","nodeType":"YulFunctionCall","src":"2002:17:31"},{"name":"end","nativeSrc":"2021:3:31","nodeType":"YulIdentifier","src":"2021:3:31"}],"functionName":{"name":"slt","nativeSrc":"1998:3:31","nodeType":"YulIdentifier","src":"1998:3:31"},"nativeSrc":"1998:27:31","nodeType":"YulFunctionCall","src":"1998:27:31"}],"functionName":{"name":"iszero","nativeSrc":"1991:6:31","nodeType":"YulIdentifier","src":"1991:6:31"},"nativeSrc":"1991:35:31","nodeType":"YulFunctionCall","src":"1991:35:31"},"nativeSrc":"1988:55:31","nodeType":"YulIf","src":"1988:55:31"},{"nativeSrc":"2052:30:31","nodeType":"YulAssignment","src":"2052:30:31","value":{"arguments":[{"name":"offset","nativeSrc":"2075:6:31","nodeType":"YulIdentifier","src":"2075:6:31"}],"functionName":{"name":"calldataload","nativeSrc":"2062:12:31","nodeType":"YulIdentifier","src":"2062:12:31"},"nativeSrc":"2062:20:31","nodeType":"YulFunctionCall","src":"2062:20:31"},"variableNames":[{"name":"length","nativeSrc":"2052:6:31","nodeType":"YulIdentifier","src":"2052:6:31"}]},{"body":{"nativeSrc":"2125:16:31","nodeType":"YulBlock","src":"2125:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2134:1:31","nodeType":"YulLiteral","src":"2134:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2137:1:31","nodeType":"YulLiteral","src":"2137:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2127:6:31","nodeType":"YulIdentifier","src":"2127:6:31"},"nativeSrc":"2127:12:31","nodeType":"YulFunctionCall","src":"2127:12:31"},"nativeSrc":"2127:12:31","nodeType":"YulExpressionStatement","src":"2127:12:31"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2097:6:31","nodeType":"YulIdentifier","src":"2097:6:31"},{"kind":"number","nativeSrc":"2105:18:31","nodeType":"YulLiteral","src":"2105:18:31","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2094:2:31","nodeType":"YulIdentifier","src":"2094:2:31"},"nativeSrc":"2094:30:31","nodeType":"YulFunctionCall","src":"2094:30:31"},"nativeSrc":"2091:50:31","nodeType":"YulIf","src":"2091:50:31"},{"nativeSrc":"2150:29:31","nodeType":"YulAssignment","src":"2150:29:31","value":{"arguments":[{"name":"offset","nativeSrc":"2166:6:31","nodeType":"YulIdentifier","src":"2166:6:31"},{"kind":"number","nativeSrc":"2174:4:31","nodeType":"YulLiteral","src":"2174:4:31","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2162:3:31","nodeType":"YulIdentifier","src":"2162:3:31"},"nativeSrc":"2162:17:31","nodeType":"YulFunctionCall","src":"2162:17:31"},"variableNames":[{"name":"arrayPos","nativeSrc":"2150:8:31","nodeType":"YulIdentifier","src":"2150:8:31"}]},{"body":{"nativeSrc":"2239:16:31","nodeType":"YulBlock","src":"2239:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2248:1:31","nodeType":"YulLiteral","src":"2248:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2251:1:31","nodeType":"YulLiteral","src":"2251:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2241:6:31","nodeType":"YulIdentifier","src":"2241:6:31"},"nativeSrc":"2241:12:31","nodeType":"YulFunctionCall","src":"2241:12:31"},"nativeSrc":"2241:12:31","nodeType":"YulExpressionStatement","src":"2241:12:31"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2202:6:31","nodeType":"YulIdentifier","src":"2202:6:31"},{"arguments":[{"kind":"number","nativeSrc":"2214:1:31","nodeType":"YulLiteral","src":"2214:1:31","type":"","value":"5"},{"name":"length","nativeSrc":"2217:6:31","nodeType":"YulIdentifier","src":"2217:6:31"}],"functionName":{"name":"shl","nativeSrc":"2210:3:31","nodeType":"YulIdentifier","src":"2210:3:31"},"nativeSrc":"2210:14:31","nodeType":"YulFunctionCall","src":"2210:14:31"}],"functionName":{"name":"add","nativeSrc":"2198:3:31","nodeType":"YulIdentifier","src":"2198:3:31"},"nativeSrc":"2198:27:31","nodeType":"YulFunctionCall","src":"2198:27:31"},{"kind":"number","nativeSrc":"2227:4:31","nodeType":"YulLiteral","src":"2227:4:31","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2194:3:31","nodeType":"YulIdentifier","src":"2194:3:31"},"nativeSrc":"2194:38:31","nodeType":"YulFunctionCall","src":"2194:38:31"},{"name":"end","nativeSrc":"2234:3:31","nodeType":"YulIdentifier","src":"2234:3:31"}],"functionName":{"name":"gt","nativeSrc":"2191:2:31","nodeType":"YulIdentifier","src":"2191:2:31"},"nativeSrc":"2191:47:31","nodeType":"YulFunctionCall","src":"2191:47:31"},"nativeSrc":"2188:67:31","nodeType":"YulIf","src":"2188:67:31"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1894:367:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1941:6:31","nodeType":"YulTypedName","src":"1941:6:31","type":""},{"name":"end","nativeSrc":"1949:3:31","nodeType":"YulTypedName","src":"1949:3:31","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1957:8:31","nodeType":"YulTypedName","src":"1957:8:31","type":""},{"name":"length","nativeSrc":"1967:6:31","nodeType":"YulTypedName","src":"1967:6:31","type":""}],"src":"1894:367:31"},{"body":{"nativeSrc":"2490:879:31","nodeType":"YulBlock","src":"2490:879:31","statements":[{"body":{"nativeSrc":"2536:16:31","nodeType":"YulBlock","src":"2536:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2545:1:31","nodeType":"YulLiteral","src":"2545:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2548:1:31","nodeType":"YulLiteral","src":"2548:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2538:6:31","nodeType":"YulIdentifier","src":"2538:6:31"},"nativeSrc":"2538:12:31","nodeType":"YulFunctionCall","src":"2538:12:31"},"nativeSrc":"2538:12:31","nodeType":"YulExpressionStatement","src":"2538:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2511:7:31","nodeType":"YulIdentifier","src":"2511:7:31"},{"name":"headStart","nativeSrc":"2520:9:31","nodeType":"YulIdentifier","src":"2520:9:31"}],"functionName":{"name":"sub","nativeSrc":"2507:3:31","nodeType":"YulIdentifier","src":"2507:3:31"},"nativeSrc":"2507:23:31","nodeType":"YulFunctionCall","src":"2507:23:31"},{"kind":"number","nativeSrc":"2532:2:31","nodeType":"YulLiteral","src":"2532:2:31","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2503:3:31","nodeType":"YulIdentifier","src":"2503:3:31"},"nativeSrc":"2503:32:31","nodeType":"YulFunctionCall","src":"2503:32:31"},"nativeSrc":"2500:52:31","nodeType":"YulIf","src":"2500:52:31"},{"nativeSrc":"2561:37:31","nodeType":"YulVariableDeclaration","src":"2561:37:31","value":{"arguments":[{"name":"headStart","nativeSrc":"2588:9:31","nodeType":"YulIdentifier","src":"2588:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"2575:12:31","nodeType":"YulIdentifier","src":"2575:12:31"},"nativeSrc":"2575:23:31","nodeType":"YulFunctionCall","src":"2575:23:31"},"variables":[{"name":"offset","nativeSrc":"2565:6:31","nodeType":"YulTypedName","src":"2565:6:31","type":""}]},{"nativeSrc":"2607:28:31","nodeType":"YulVariableDeclaration","src":"2607:28:31","value":{"kind":"number","nativeSrc":"2617:18:31","nodeType":"YulLiteral","src":"2617:18:31","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2611:2:31","nodeType":"YulTypedName","src":"2611:2:31","type":""}]},{"body":{"nativeSrc":"2662:16:31","nodeType":"YulBlock","src":"2662:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2671:1:31","nodeType":"YulLiteral","src":"2671:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2674:1:31","nodeType":"YulLiteral","src":"2674:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2664:6:31","nodeType":"YulIdentifier","src":"2664:6:31"},"nativeSrc":"2664:12:31","nodeType":"YulFunctionCall","src":"2664:12:31"},"nativeSrc":"2664:12:31","nodeType":"YulExpressionStatement","src":"2664:12:31"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2650:6:31","nodeType":"YulIdentifier","src":"2650:6:31"},{"name":"_1","nativeSrc":"2658:2:31","nodeType":"YulIdentifier","src":"2658:2:31"}],"functionName":{"name":"gt","nativeSrc":"2647:2:31","nodeType":"YulIdentifier","src":"2647:2:31"},"nativeSrc":"2647:14:31","nodeType":"YulFunctionCall","src":"2647:14:31"},"nativeSrc":"2644:34:31","nodeType":"YulIf","src":"2644:34:31"},{"nativeSrc":"2687:96:31","nodeType":"YulVariableDeclaration","src":"2687:96:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2755:9:31","nodeType":"YulIdentifier","src":"2755:9:31"},{"name":"offset","nativeSrc":"2766:6:31","nodeType":"YulIdentifier","src":"2766:6:31"}],"functionName":{"name":"add","nativeSrc":"2751:3:31","nodeType":"YulIdentifier","src":"2751:3:31"},"nativeSrc":"2751:22:31","nodeType":"YulFunctionCall","src":"2751:22:31"},{"name":"dataEnd","nativeSrc":"2775:7:31","nodeType":"YulIdentifier","src":"2775:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2713:37:31","nodeType":"YulIdentifier","src":"2713:37:31"},"nativeSrc":"2713:70:31","nodeType":"YulFunctionCall","src":"2713:70:31"},"variables":[{"name":"value0_1","nativeSrc":"2691:8:31","nodeType":"YulTypedName","src":"2691:8:31","type":""},{"name":"value1_1","nativeSrc":"2701:8:31","nodeType":"YulTypedName","src":"2701:8:31","type":""}]},{"nativeSrc":"2792:18:31","nodeType":"YulAssignment","src":"2792:18:31","value":{"name":"value0_1","nativeSrc":"2802:8:31","nodeType":"YulIdentifier","src":"2802:8:31"},"variableNames":[{"name":"value0","nativeSrc":"2792:6:31","nodeType":"YulIdentifier","src":"2792:6:31"}]},{"nativeSrc":"2819:18:31","nodeType":"YulAssignment","src":"2819:18:31","value":{"name":"value1_1","nativeSrc":"2829:8:31","nodeType":"YulIdentifier","src":"2829:8:31"},"variableNames":[{"name":"value1","nativeSrc":"2819:6:31","nodeType":"YulIdentifier","src":"2819:6:31"}]},{"nativeSrc":"2846:48:31","nodeType":"YulVariableDeclaration","src":"2846:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2879:9:31","nodeType":"YulIdentifier","src":"2879:9:31"},{"kind":"number","nativeSrc":"2890:2:31","nodeType":"YulLiteral","src":"2890:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2875:3:31","nodeType":"YulIdentifier","src":"2875:3:31"},"nativeSrc":"2875:18:31","nodeType":"YulFunctionCall","src":"2875:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"2862:12:31","nodeType":"YulIdentifier","src":"2862:12:31"},"nativeSrc":"2862:32:31","nodeType":"YulFunctionCall","src":"2862:32:31"},"variables":[{"name":"offset_1","nativeSrc":"2850:8:31","nodeType":"YulTypedName","src":"2850:8:31","type":""}]},{"body":{"nativeSrc":"2923:16:31","nodeType":"YulBlock","src":"2923:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2932:1:31","nodeType":"YulLiteral","src":"2932:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"2935:1:31","nodeType":"YulLiteral","src":"2935:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2925:6:31","nodeType":"YulIdentifier","src":"2925:6:31"},"nativeSrc":"2925:12:31","nodeType":"YulFunctionCall","src":"2925:12:31"},"nativeSrc":"2925:12:31","nodeType":"YulExpressionStatement","src":"2925:12:31"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2909:8:31","nodeType":"YulIdentifier","src":"2909:8:31"},{"name":"_1","nativeSrc":"2919:2:31","nodeType":"YulIdentifier","src":"2919:2:31"}],"functionName":{"name":"gt","nativeSrc":"2906:2:31","nodeType":"YulIdentifier","src":"2906:2:31"},"nativeSrc":"2906:16:31","nodeType":"YulFunctionCall","src":"2906:16:31"},"nativeSrc":"2903:36:31","nodeType":"YulIf","src":"2903:36:31"},{"nativeSrc":"2948:98:31","nodeType":"YulVariableDeclaration","src":"2948:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3016:9:31","nodeType":"YulIdentifier","src":"3016:9:31"},{"name":"offset_1","nativeSrc":"3027:8:31","nodeType":"YulIdentifier","src":"3027:8:31"}],"functionName":{"name":"add","nativeSrc":"3012:3:31","nodeType":"YulIdentifier","src":"3012:3:31"},"nativeSrc":"3012:24:31","nodeType":"YulFunctionCall","src":"3012:24:31"},{"name":"dataEnd","nativeSrc":"3038:7:31","nodeType":"YulIdentifier","src":"3038:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2974:37:31","nodeType":"YulIdentifier","src":"2974:37:31"},"nativeSrc":"2974:72:31","nodeType":"YulFunctionCall","src":"2974:72:31"},"variables":[{"name":"value2_1","nativeSrc":"2952:8:31","nodeType":"YulTypedName","src":"2952:8:31","type":""},{"name":"value3_1","nativeSrc":"2962:8:31","nodeType":"YulTypedName","src":"2962:8:31","type":""}]},{"nativeSrc":"3055:18:31","nodeType":"YulAssignment","src":"3055:18:31","value":{"name":"value2_1","nativeSrc":"3065:8:31","nodeType":"YulIdentifier","src":"3065:8:31"},"variableNames":[{"name":"value2","nativeSrc":"3055:6:31","nodeType":"YulIdentifier","src":"3055:6:31"}]},{"nativeSrc":"3082:18:31","nodeType":"YulAssignment","src":"3082:18:31","value":{"name":"value3_1","nativeSrc":"3092:8:31","nodeType":"YulIdentifier","src":"3092:8:31"},"variableNames":[{"name":"value3","nativeSrc":"3082:6:31","nodeType":"YulIdentifier","src":"3082:6:31"}]},{"nativeSrc":"3109:48:31","nodeType":"YulVariableDeclaration","src":"3109:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3142:9:31","nodeType":"YulIdentifier","src":"3142:9:31"},{"kind":"number","nativeSrc":"3153:2:31","nodeType":"YulLiteral","src":"3153:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3138:3:31","nodeType":"YulIdentifier","src":"3138:3:31"},"nativeSrc":"3138:18:31","nodeType":"YulFunctionCall","src":"3138:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"3125:12:31","nodeType":"YulIdentifier","src":"3125:12:31"},"nativeSrc":"3125:32:31","nodeType":"YulFunctionCall","src":"3125:32:31"},"variables":[{"name":"offset_2","nativeSrc":"3113:8:31","nodeType":"YulTypedName","src":"3113:8:31","type":""}]},{"body":{"nativeSrc":"3186:16:31","nodeType":"YulBlock","src":"3186:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3195:1:31","nodeType":"YulLiteral","src":"3195:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"3198:1:31","nodeType":"YulLiteral","src":"3198:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3188:6:31","nodeType":"YulIdentifier","src":"3188:6:31"},"nativeSrc":"3188:12:31","nodeType":"YulFunctionCall","src":"3188:12:31"},"nativeSrc":"3188:12:31","nodeType":"YulExpressionStatement","src":"3188:12:31"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"3172:8:31","nodeType":"YulIdentifier","src":"3172:8:31"},{"name":"_1","nativeSrc":"3182:2:31","nodeType":"YulIdentifier","src":"3182:2:31"}],"functionName":{"name":"gt","nativeSrc":"3169:2:31","nodeType":"YulIdentifier","src":"3169:2:31"},"nativeSrc":"3169:16:31","nodeType":"YulFunctionCall","src":"3169:16:31"},"nativeSrc":"3166:36:31","nodeType":"YulIf","src":"3166:36:31"},{"nativeSrc":"3211:98:31","nodeType":"YulVariableDeclaration","src":"3211:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3279:9:31","nodeType":"YulIdentifier","src":"3279:9:31"},{"name":"offset_2","nativeSrc":"3290:8:31","nodeType":"YulIdentifier","src":"3290:8:31"}],"functionName":{"name":"add","nativeSrc":"3275:3:31","nodeType":"YulIdentifier","src":"3275:3:31"},"nativeSrc":"3275:24:31","nodeType":"YulFunctionCall","src":"3275:24:31"},{"name":"dataEnd","nativeSrc":"3301:7:31","nodeType":"YulIdentifier","src":"3301:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3237:37:31","nodeType":"YulIdentifier","src":"3237:37:31"},"nativeSrc":"3237:72:31","nodeType":"YulFunctionCall","src":"3237:72:31"},"variables":[{"name":"value4_1","nativeSrc":"3215:8:31","nodeType":"YulTypedName","src":"3215:8:31","type":""},{"name":"value5_1","nativeSrc":"3225:8:31","nodeType":"YulTypedName","src":"3225:8:31","type":""}]},{"nativeSrc":"3318:18:31","nodeType":"YulAssignment","src":"3318:18:31","value":{"name":"value4_1","nativeSrc":"3328:8:31","nodeType":"YulIdentifier","src":"3328:8:31"},"variableNames":[{"name":"value4","nativeSrc":"3318:6:31","nodeType":"YulIdentifier","src":"3318:6:31"}]},{"nativeSrc":"3345:18:31","nodeType":"YulAssignment","src":"3345:18:31","value":{"name":"value5_1","nativeSrc":"3355:8:31","nodeType":"YulIdentifier","src":"3355:8:31"},"variableNames":[{"name":"value5","nativeSrc":"3345:6:31","nodeType":"YulIdentifier","src":"3345:6:31"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"2266:1103:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2416:9:31","nodeType":"YulTypedName","src":"2416:9:31","type":""},{"name":"dataEnd","nativeSrc":"2427:7:31","nodeType":"YulTypedName","src":"2427:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2439:6:31","nodeType":"YulTypedName","src":"2439:6:31","type":""},{"name":"value1","nativeSrc":"2447:6:31","nodeType":"YulTypedName","src":"2447:6:31","type":""},{"name":"value2","nativeSrc":"2455:6:31","nodeType":"YulTypedName","src":"2455:6:31","type":""},{"name":"value3","nativeSrc":"2463:6:31","nodeType":"YulTypedName","src":"2463:6:31","type":""},{"name":"value4","nativeSrc":"2471:6:31","nodeType":"YulTypedName","src":"2471:6:31","type":""},{"name":"value5","nativeSrc":"2479:6:31","nodeType":"YulTypedName","src":"2479:6:31","type":""}],"src":"2266:1103:31"},{"body":{"nativeSrc":"3599:879:31","nodeType":"YulBlock","src":"3599:879:31","statements":[{"body":{"nativeSrc":"3645:16:31","nodeType":"YulBlock","src":"3645:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3654:1:31","nodeType":"YulLiteral","src":"3654:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"3657:1:31","nodeType":"YulLiteral","src":"3657:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3647:6:31","nodeType":"YulIdentifier","src":"3647:6:31"},"nativeSrc":"3647:12:31","nodeType":"YulFunctionCall","src":"3647:12:31"},"nativeSrc":"3647:12:31","nodeType":"YulExpressionStatement","src":"3647:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3620:7:31","nodeType":"YulIdentifier","src":"3620:7:31"},{"name":"headStart","nativeSrc":"3629:9:31","nodeType":"YulIdentifier","src":"3629:9:31"}],"functionName":{"name":"sub","nativeSrc":"3616:3:31","nodeType":"YulIdentifier","src":"3616:3:31"},"nativeSrc":"3616:23:31","nodeType":"YulFunctionCall","src":"3616:23:31"},{"kind":"number","nativeSrc":"3641:2:31","nodeType":"YulLiteral","src":"3641:2:31","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3612:3:31","nodeType":"YulIdentifier","src":"3612:3:31"},"nativeSrc":"3612:32:31","nodeType":"YulFunctionCall","src":"3612:32:31"},"nativeSrc":"3609:52:31","nodeType":"YulIf","src":"3609:52:31"},{"nativeSrc":"3670:37:31","nodeType":"YulVariableDeclaration","src":"3670:37:31","value":{"arguments":[{"name":"headStart","nativeSrc":"3697:9:31","nodeType":"YulIdentifier","src":"3697:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"3684:12:31","nodeType":"YulIdentifier","src":"3684:12:31"},"nativeSrc":"3684:23:31","nodeType":"YulFunctionCall","src":"3684:23:31"},"variables":[{"name":"offset","nativeSrc":"3674:6:31","nodeType":"YulTypedName","src":"3674:6:31","type":""}]},{"nativeSrc":"3716:28:31","nodeType":"YulVariableDeclaration","src":"3716:28:31","value":{"kind":"number","nativeSrc":"3726:18:31","nodeType":"YulLiteral","src":"3726:18:31","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3720:2:31","nodeType":"YulTypedName","src":"3720:2:31","type":""}]},{"body":{"nativeSrc":"3771:16:31","nodeType":"YulBlock","src":"3771:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3780:1:31","nodeType":"YulLiteral","src":"3780:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"3783:1:31","nodeType":"YulLiteral","src":"3783:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3773:6:31","nodeType":"YulIdentifier","src":"3773:6:31"},"nativeSrc":"3773:12:31","nodeType":"YulFunctionCall","src":"3773:12:31"},"nativeSrc":"3773:12:31","nodeType":"YulExpressionStatement","src":"3773:12:31"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3759:6:31","nodeType":"YulIdentifier","src":"3759:6:31"},{"name":"_1","nativeSrc":"3767:2:31","nodeType":"YulIdentifier","src":"3767:2:31"}],"functionName":{"name":"gt","nativeSrc":"3756:2:31","nodeType":"YulIdentifier","src":"3756:2:31"},"nativeSrc":"3756:14:31","nodeType":"YulFunctionCall","src":"3756:14:31"},"nativeSrc":"3753:34:31","nodeType":"YulIf","src":"3753:34:31"},{"nativeSrc":"3796:96:31","nodeType":"YulVariableDeclaration","src":"3796:96:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3864:9:31","nodeType":"YulIdentifier","src":"3864:9:31"},{"name":"offset","nativeSrc":"3875:6:31","nodeType":"YulIdentifier","src":"3875:6:31"}],"functionName":{"name":"add","nativeSrc":"3860:3:31","nodeType":"YulIdentifier","src":"3860:3:31"},"nativeSrc":"3860:22:31","nodeType":"YulFunctionCall","src":"3860:22:31"},{"name":"dataEnd","nativeSrc":"3884:7:31","nodeType":"YulIdentifier","src":"3884:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3822:37:31","nodeType":"YulIdentifier","src":"3822:37:31"},"nativeSrc":"3822:70:31","nodeType":"YulFunctionCall","src":"3822:70:31"},"variables":[{"name":"value0_1","nativeSrc":"3800:8:31","nodeType":"YulTypedName","src":"3800:8:31","type":""},{"name":"value1_1","nativeSrc":"3810:8:31","nodeType":"YulTypedName","src":"3810:8:31","type":""}]},{"nativeSrc":"3901:18:31","nodeType":"YulAssignment","src":"3901:18:31","value":{"name":"value0_1","nativeSrc":"3911:8:31","nodeType":"YulIdentifier","src":"3911:8:31"},"variableNames":[{"name":"value0","nativeSrc":"3901:6:31","nodeType":"YulIdentifier","src":"3901:6:31"}]},{"nativeSrc":"3928:18:31","nodeType":"YulAssignment","src":"3928:18:31","value":{"name":"value1_1","nativeSrc":"3938:8:31","nodeType":"YulIdentifier","src":"3938:8:31"},"variableNames":[{"name":"value1","nativeSrc":"3928:6:31","nodeType":"YulIdentifier","src":"3928:6:31"}]},{"nativeSrc":"3955:48:31","nodeType":"YulVariableDeclaration","src":"3955:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3988:9:31","nodeType":"YulIdentifier","src":"3988:9:31"},{"kind":"number","nativeSrc":"3999:2:31","nodeType":"YulLiteral","src":"3999:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3984:3:31","nodeType":"YulIdentifier","src":"3984:3:31"},"nativeSrc":"3984:18:31","nodeType":"YulFunctionCall","src":"3984:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"3971:12:31","nodeType":"YulIdentifier","src":"3971:12:31"},"nativeSrc":"3971:32:31","nodeType":"YulFunctionCall","src":"3971:32:31"},"variables":[{"name":"offset_1","nativeSrc":"3959:8:31","nodeType":"YulTypedName","src":"3959:8:31","type":""}]},{"body":{"nativeSrc":"4032:16:31","nodeType":"YulBlock","src":"4032:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4041:1:31","nodeType":"YulLiteral","src":"4041:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4044:1:31","nodeType":"YulLiteral","src":"4044:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4034:6:31","nodeType":"YulIdentifier","src":"4034:6:31"},"nativeSrc":"4034:12:31","nodeType":"YulFunctionCall","src":"4034:12:31"},"nativeSrc":"4034:12:31","nodeType":"YulExpressionStatement","src":"4034:12:31"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4018:8:31","nodeType":"YulIdentifier","src":"4018:8:31"},{"name":"_1","nativeSrc":"4028:2:31","nodeType":"YulIdentifier","src":"4028:2:31"}],"functionName":{"name":"gt","nativeSrc":"4015:2:31","nodeType":"YulIdentifier","src":"4015:2:31"},"nativeSrc":"4015:16:31","nodeType":"YulFunctionCall","src":"4015:16:31"},"nativeSrc":"4012:36:31","nodeType":"YulIf","src":"4012:36:31"},{"nativeSrc":"4057:98:31","nodeType":"YulVariableDeclaration","src":"4057:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4125:9:31","nodeType":"YulIdentifier","src":"4125:9:31"},{"name":"offset_1","nativeSrc":"4136:8:31","nodeType":"YulIdentifier","src":"4136:8:31"}],"functionName":{"name":"add","nativeSrc":"4121:3:31","nodeType":"YulIdentifier","src":"4121:3:31"},"nativeSrc":"4121:24:31","nodeType":"YulFunctionCall","src":"4121:24:31"},{"name":"dataEnd","nativeSrc":"4147:7:31","nodeType":"YulIdentifier","src":"4147:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4083:37:31","nodeType":"YulIdentifier","src":"4083:37:31"},"nativeSrc":"4083:72:31","nodeType":"YulFunctionCall","src":"4083:72:31"},"variables":[{"name":"value2_1","nativeSrc":"4061:8:31","nodeType":"YulTypedName","src":"4061:8:31","type":""},{"name":"value3_1","nativeSrc":"4071:8:31","nodeType":"YulTypedName","src":"4071:8:31","type":""}]},{"nativeSrc":"4164:18:31","nodeType":"YulAssignment","src":"4164:18:31","value":{"name":"value2_1","nativeSrc":"4174:8:31","nodeType":"YulIdentifier","src":"4174:8:31"},"variableNames":[{"name":"value2","nativeSrc":"4164:6:31","nodeType":"YulIdentifier","src":"4164:6:31"}]},{"nativeSrc":"4191:18:31","nodeType":"YulAssignment","src":"4191:18:31","value":{"name":"value3_1","nativeSrc":"4201:8:31","nodeType":"YulIdentifier","src":"4201:8:31"},"variableNames":[{"name":"value3","nativeSrc":"4191:6:31","nodeType":"YulIdentifier","src":"4191:6:31"}]},{"nativeSrc":"4218:48:31","nodeType":"YulVariableDeclaration","src":"4218:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4251:9:31","nodeType":"YulIdentifier","src":"4251:9:31"},{"kind":"number","nativeSrc":"4262:2:31","nodeType":"YulLiteral","src":"4262:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4247:3:31","nodeType":"YulIdentifier","src":"4247:3:31"},"nativeSrc":"4247:18:31","nodeType":"YulFunctionCall","src":"4247:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"4234:12:31","nodeType":"YulIdentifier","src":"4234:12:31"},"nativeSrc":"4234:32:31","nodeType":"YulFunctionCall","src":"4234:32:31"},"variables":[{"name":"offset_2","nativeSrc":"4222:8:31","nodeType":"YulTypedName","src":"4222:8:31","type":""}]},{"body":{"nativeSrc":"4295:16:31","nodeType":"YulBlock","src":"4295:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4304:1:31","nodeType":"YulLiteral","src":"4304:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4307:1:31","nodeType":"YulLiteral","src":"4307:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4297:6:31","nodeType":"YulIdentifier","src":"4297:6:31"},"nativeSrc":"4297:12:31","nodeType":"YulFunctionCall","src":"4297:12:31"},"nativeSrc":"4297:12:31","nodeType":"YulExpressionStatement","src":"4297:12:31"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4281:8:31","nodeType":"YulIdentifier","src":"4281:8:31"},{"name":"_1","nativeSrc":"4291:2:31","nodeType":"YulIdentifier","src":"4291:2:31"}],"functionName":{"name":"gt","nativeSrc":"4278:2:31","nodeType":"YulIdentifier","src":"4278:2:31"},"nativeSrc":"4278:16:31","nodeType":"YulFunctionCall","src":"4278:16:31"},"nativeSrc":"4275:36:31","nodeType":"YulIf","src":"4275:36:31"},{"nativeSrc":"4320:98:31","nodeType":"YulVariableDeclaration","src":"4320:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4388:9:31","nodeType":"YulIdentifier","src":"4388:9:31"},{"name":"offset_2","nativeSrc":"4399:8:31","nodeType":"YulIdentifier","src":"4399:8:31"}],"functionName":{"name":"add","nativeSrc":"4384:3:31","nodeType":"YulIdentifier","src":"4384:3:31"},"nativeSrc":"4384:24:31","nodeType":"YulFunctionCall","src":"4384:24:31"},{"name":"dataEnd","nativeSrc":"4410:7:31","nodeType":"YulIdentifier","src":"4410:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4346:37:31","nodeType":"YulIdentifier","src":"4346:37:31"},"nativeSrc":"4346:72:31","nodeType":"YulFunctionCall","src":"4346:72:31"},"variables":[{"name":"value4_1","nativeSrc":"4324:8:31","nodeType":"YulTypedName","src":"4324:8:31","type":""},{"name":"value5_1","nativeSrc":"4334:8:31","nodeType":"YulTypedName","src":"4334:8:31","type":""}]},{"nativeSrc":"4427:18:31","nodeType":"YulAssignment","src":"4427:18:31","value":{"name":"value4_1","nativeSrc":"4437:8:31","nodeType":"YulIdentifier","src":"4437:8:31"},"variableNames":[{"name":"value4","nativeSrc":"4427:6:31","nodeType":"YulIdentifier","src":"4427:6:31"}]},{"nativeSrc":"4454:18:31","nodeType":"YulAssignment","src":"4454:18:31","value":{"name":"value5_1","nativeSrc":"4464:8:31","nodeType":"YulIdentifier","src":"4464:8:31"},"variableNames":[{"name":"value5","nativeSrc":"4454:6:31","nodeType":"YulIdentifier","src":"4454:6:31"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"3374:1104:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3525:9:31","nodeType":"YulTypedName","src":"3525:9:31","type":""},{"name":"dataEnd","nativeSrc":"3536:7:31","nodeType":"YulTypedName","src":"3536:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3548:6:31","nodeType":"YulTypedName","src":"3548:6:31","type":""},{"name":"value1","nativeSrc":"3556:6:31","nodeType":"YulTypedName","src":"3556:6:31","type":""},{"name":"value2","nativeSrc":"3564:6:31","nodeType":"YulTypedName","src":"3564:6:31","type":""},{"name":"value3","nativeSrc":"3572:6:31","nodeType":"YulTypedName","src":"3572:6:31","type":""},{"name":"value4","nativeSrc":"3580:6:31","nodeType":"YulTypedName","src":"3580:6:31","type":""},{"name":"value5","nativeSrc":"3588:6:31","nodeType":"YulTypedName","src":"3588:6:31","type":""}],"src":"3374:1104:31"},{"body":{"nativeSrc":"4648:616:31","nodeType":"YulBlock","src":"4648:616:31","statements":[{"body":{"nativeSrc":"4694:16:31","nodeType":"YulBlock","src":"4694:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4703:1:31","nodeType":"YulLiteral","src":"4703:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4706:1:31","nodeType":"YulLiteral","src":"4706:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4696:6:31","nodeType":"YulIdentifier","src":"4696:6:31"},"nativeSrc":"4696:12:31","nodeType":"YulFunctionCall","src":"4696:12:31"},"nativeSrc":"4696:12:31","nodeType":"YulExpressionStatement","src":"4696:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4669:7:31","nodeType":"YulIdentifier","src":"4669:7:31"},{"name":"headStart","nativeSrc":"4678:9:31","nodeType":"YulIdentifier","src":"4678:9:31"}],"functionName":{"name":"sub","nativeSrc":"4665:3:31","nodeType":"YulIdentifier","src":"4665:3:31"},"nativeSrc":"4665:23:31","nodeType":"YulFunctionCall","src":"4665:23:31"},{"kind":"number","nativeSrc":"4690:2:31","nodeType":"YulLiteral","src":"4690:2:31","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4661:3:31","nodeType":"YulIdentifier","src":"4661:3:31"},"nativeSrc":"4661:32:31","nodeType":"YulFunctionCall","src":"4661:32:31"},"nativeSrc":"4658:52:31","nodeType":"YulIf","src":"4658:52:31"},{"nativeSrc":"4719:37:31","nodeType":"YulVariableDeclaration","src":"4719:37:31","value":{"arguments":[{"name":"headStart","nativeSrc":"4746:9:31","nodeType":"YulIdentifier","src":"4746:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"4733:12:31","nodeType":"YulIdentifier","src":"4733:12:31"},"nativeSrc":"4733:23:31","nodeType":"YulFunctionCall","src":"4733:23:31"},"variables":[{"name":"offset","nativeSrc":"4723:6:31","nodeType":"YulTypedName","src":"4723:6:31","type":""}]},{"nativeSrc":"4765:28:31","nodeType":"YulVariableDeclaration","src":"4765:28:31","value":{"kind":"number","nativeSrc":"4775:18:31","nodeType":"YulLiteral","src":"4775:18:31","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4769:2:31","nodeType":"YulTypedName","src":"4769:2:31","type":""}]},{"body":{"nativeSrc":"4820:16:31","nodeType":"YulBlock","src":"4820:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4829:1:31","nodeType":"YulLiteral","src":"4829:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"4832:1:31","nodeType":"YulLiteral","src":"4832:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4822:6:31","nodeType":"YulIdentifier","src":"4822:6:31"},"nativeSrc":"4822:12:31","nodeType":"YulFunctionCall","src":"4822:12:31"},"nativeSrc":"4822:12:31","nodeType":"YulExpressionStatement","src":"4822:12:31"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4808:6:31","nodeType":"YulIdentifier","src":"4808:6:31"},{"name":"_1","nativeSrc":"4816:2:31","nodeType":"YulIdentifier","src":"4816:2:31"}],"functionName":{"name":"gt","nativeSrc":"4805:2:31","nodeType":"YulIdentifier","src":"4805:2:31"},"nativeSrc":"4805:14:31","nodeType":"YulFunctionCall","src":"4805:14:31"},"nativeSrc":"4802:34:31","nodeType":"YulIf","src":"4802:34:31"},{"nativeSrc":"4845:96:31","nodeType":"YulVariableDeclaration","src":"4845:96:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4913:9:31","nodeType":"YulIdentifier","src":"4913:9:31"},{"name":"offset","nativeSrc":"4924:6:31","nodeType":"YulIdentifier","src":"4924:6:31"}],"functionName":{"name":"add","nativeSrc":"4909:3:31","nodeType":"YulIdentifier","src":"4909:3:31"},"nativeSrc":"4909:22:31","nodeType":"YulFunctionCall","src":"4909:22:31"},{"name":"dataEnd","nativeSrc":"4933:7:31","nodeType":"YulIdentifier","src":"4933:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4871:37:31","nodeType":"YulIdentifier","src":"4871:37:31"},"nativeSrc":"4871:70:31","nodeType":"YulFunctionCall","src":"4871:70:31"},"variables":[{"name":"value0_1","nativeSrc":"4849:8:31","nodeType":"YulTypedName","src":"4849:8:31","type":""},{"name":"value1_1","nativeSrc":"4859:8:31","nodeType":"YulTypedName","src":"4859:8:31","type":""}]},{"nativeSrc":"4950:18:31","nodeType":"YulAssignment","src":"4950:18:31","value":{"name":"value0_1","nativeSrc":"4960:8:31","nodeType":"YulIdentifier","src":"4960:8:31"},"variableNames":[{"name":"value0","nativeSrc":"4950:6:31","nodeType":"YulIdentifier","src":"4950:6:31"}]},{"nativeSrc":"4977:18:31","nodeType":"YulAssignment","src":"4977:18:31","value":{"name":"value1_1","nativeSrc":"4987:8:31","nodeType":"YulIdentifier","src":"4987:8:31"},"variableNames":[{"name":"value1","nativeSrc":"4977:6:31","nodeType":"YulIdentifier","src":"4977:6:31"}]},{"nativeSrc":"5004:48:31","nodeType":"YulVariableDeclaration","src":"5004:48:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5037:9:31","nodeType":"YulIdentifier","src":"5037:9:31"},{"kind":"number","nativeSrc":"5048:2:31","nodeType":"YulLiteral","src":"5048:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5033:3:31","nodeType":"YulIdentifier","src":"5033:3:31"},"nativeSrc":"5033:18:31","nodeType":"YulFunctionCall","src":"5033:18:31"}],"functionName":{"name":"calldataload","nativeSrc":"5020:12:31","nodeType":"YulIdentifier","src":"5020:12:31"},"nativeSrc":"5020:32:31","nodeType":"YulFunctionCall","src":"5020:32:31"},"variables":[{"name":"offset_1","nativeSrc":"5008:8:31","nodeType":"YulTypedName","src":"5008:8:31","type":""}]},{"body":{"nativeSrc":"5081:16:31","nodeType":"YulBlock","src":"5081:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5090:1:31","nodeType":"YulLiteral","src":"5090:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"5093:1:31","nodeType":"YulLiteral","src":"5093:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5083:6:31","nodeType":"YulIdentifier","src":"5083:6:31"},"nativeSrc":"5083:12:31","nodeType":"YulFunctionCall","src":"5083:12:31"},"nativeSrc":"5083:12:31","nodeType":"YulExpressionStatement","src":"5083:12:31"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5067:8:31","nodeType":"YulIdentifier","src":"5067:8:31"},{"name":"_1","nativeSrc":"5077:2:31","nodeType":"YulIdentifier","src":"5077:2:31"}],"functionName":{"name":"gt","nativeSrc":"5064:2:31","nodeType":"YulIdentifier","src":"5064:2:31"},"nativeSrc":"5064:16:31","nodeType":"YulFunctionCall","src":"5064:16:31"},"nativeSrc":"5061:36:31","nodeType":"YulIf","src":"5061:36:31"},{"nativeSrc":"5106:98:31","nodeType":"YulVariableDeclaration","src":"5106:98:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5174:9:31","nodeType":"YulIdentifier","src":"5174:9:31"},{"name":"offset_1","nativeSrc":"5185:8:31","nodeType":"YulIdentifier","src":"5185:8:31"}],"functionName":{"name":"add","nativeSrc":"5170:3:31","nodeType":"YulIdentifier","src":"5170:3:31"},"nativeSrc":"5170:24:31","nodeType":"YulFunctionCall","src":"5170:24:31"},{"name":"dataEnd","nativeSrc":"5196:7:31","nodeType":"YulIdentifier","src":"5196:7:31"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5132:37:31","nodeType":"YulIdentifier","src":"5132:37:31"},"nativeSrc":"5132:72:31","nodeType":"YulFunctionCall","src":"5132:72:31"},"variables":[{"name":"value2_1","nativeSrc":"5110:8:31","nodeType":"YulTypedName","src":"5110:8:31","type":""},{"name":"value3_1","nativeSrc":"5120:8:31","nodeType":"YulTypedName","src":"5120:8:31","type":""}]},{"nativeSrc":"5213:18:31","nodeType":"YulAssignment","src":"5213:18:31","value":{"name":"value2_1","nativeSrc":"5223:8:31","nodeType":"YulIdentifier","src":"5223:8:31"},"variableNames":[{"name":"value2","nativeSrc":"5213:6:31","nodeType":"YulIdentifier","src":"5213:6:31"}]},{"nativeSrc":"5240:18:31","nodeType":"YulAssignment","src":"5240:18:31","value":{"name":"value3_1","nativeSrc":"5250:8:31","nodeType":"YulIdentifier","src":"5250:8:31"},"variableNames":[{"name":"value3","nativeSrc":"5240:6:31","nodeType":"YulIdentifier","src":"5240:6:31"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4483:781:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4590:9:31","nodeType":"YulTypedName","src":"4590:9:31","type":""},{"name":"dataEnd","nativeSrc":"4601:7:31","nodeType":"YulTypedName","src":"4601:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4613:6:31","nodeType":"YulTypedName","src":"4613:6:31","type":""},{"name":"value1","nativeSrc":"4621:6:31","nodeType":"YulTypedName","src":"4621:6:31","type":""},{"name":"value2","nativeSrc":"4629:6:31","nodeType":"YulTypedName","src":"4629:6:31","type":""},{"name":"value3","nativeSrc":"4637:6:31","nodeType":"YulTypedName","src":"4637:6:31","type":""}],"src":"4483:781:31"},{"body":{"nativeSrc":"5301:152:31","nodeType":"YulBlock","src":"5301:152:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5318:1:31","nodeType":"YulLiteral","src":"5318:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"5321:77:31","nodeType":"YulLiteral","src":"5321:77:31","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5311:6:31","nodeType":"YulIdentifier","src":"5311:6:31"},"nativeSrc":"5311:88:31","nodeType":"YulFunctionCall","src":"5311:88:31"},"nativeSrc":"5311:88:31","nodeType":"YulExpressionStatement","src":"5311:88:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5415:1:31","nodeType":"YulLiteral","src":"5415:1:31","type":"","value":"4"},{"kind":"number","nativeSrc":"5418:4:31","nodeType":"YulLiteral","src":"5418:4:31","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5408:6:31","nodeType":"YulIdentifier","src":"5408:6:31"},"nativeSrc":"5408:15:31","nodeType":"YulFunctionCall","src":"5408:15:31"},"nativeSrc":"5408:15:31","nodeType":"YulExpressionStatement","src":"5408:15:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5439:1:31","nodeType":"YulLiteral","src":"5439:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"5442:4:31","nodeType":"YulLiteral","src":"5442:4:31","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5432:6:31","nodeType":"YulIdentifier","src":"5432:6:31"},"nativeSrc":"5432:15:31","nodeType":"YulFunctionCall","src":"5432:15:31"},"nativeSrc":"5432:15:31","nodeType":"YulExpressionStatement","src":"5432:15:31"}]},"name":"panic_error_0x32","nativeSrc":"5269:184:31","nodeType":"YulFunctionDefinition","src":"5269:184:31"},{"body":{"nativeSrc":"5543:177:31","nodeType":"YulBlock","src":"5543:177:31","statements":[{"body":{"nativeSrc":"5589:16:31","nodeType":"YulBlock","src":"5589:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5598:1:31","nodeType":"YulLiteral","src":"5598:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"5601:1:31","nodeType":"YulLiteral","src":"5601:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5591:6:31","nodeType":"YulIdentifier","src":"5591:6:31"},"nativeSrc":"5591:12:31","nodeType":"YulFunctionCall","src":"5591:12:31"},"nativeSrc":"5591:12:31","nodeType":"YulExpressionStatement","src":"5591:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5564:7:31","nodeType":"YulIdentifier","src":"5564:7:31"},{"name":"headStart","nativeSrc":"5573:9:31","nodeType":"YulIdentifier","src":"5573:9:31"}],"functionName":{"name":"sub","nativeSrc":"5560:3:31","nodeType":"YulIdentifier","src":"5560:3:31"},"nativeSrc":"5560:23:31","nodeType":"YulFunctionCall","src":"5560:23:31"},{"kind":"number","nativeSrc":"5585:2:31","nodeType":"YulLiteral","src":"5585:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5556:3:31","nodeType":"YulIdentifier","src":"5556:3:31"},"nativeSrc":"5556:32:31","nodeType":"YulFunctionCall","src":"5556:32:31"},"nativeSrc":"5553:52:31","nodeType":"YulIf","src":"5553:52:31"},{"nativeSrc":"5614:36:31","nodeType":"YulVariableDeclaration","src":"5614:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"5640:9:31","nodeType":"YulIdentifier","src":"5640:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"5627:12:31","nodeType":"YulIdentifier","src":"5627:12:31"},"nativeSrc":"5627:23:31","nodeType":"YulFunctionCall","src":"5627:23:31"},"variables":[{"name":"value","nativeSrc":"5618:5:31","nodeType":"YulTypedName","src":"5618:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5684:5:31","nodeType":"YulIdentifier","src":"5684:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5659:24:31","nodeType":"YulIdentifier","src":"5659:24:31"},"nativeSrc":"5659:31:31","nodeType":"YulFunctionCall","src":"5659:31:31"},"nativeSrc":"5659:31:31","nodeType":"YulExpressionStatement","src":"5659:31:31"},{"nativeSrc":"5699:15:31","nodeType":"YulAssignment","src":"5699:15:31","value":{"name":"value","nativeSrc":"5709:5:31","nodeType":"YulIdentifier","src":"5709:5:31"},"variableNames":[{"name":"value0","nativeSrc":"5699:6:31","nodeType":"YulIdentifier","src":"5699:6:31"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1243","nativeSrc":"5458:262:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5509:9:31","nodeType":"YulTypedName","src":"5509:9:31","type":""},{"name":"dataEnd","nativeSrc":"5520:7:31","nodeType":"YulTypedName","src":"5520:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5532:6:31","nodeType":"YulTypedName","src":"5532:6:31","type":""}],"src":"5458:262:31"},{"body":{"nativeSrc":"5811:177:31","nodeType":"YulBlock","src":"5811:177:31","statements":[{"body":{"nativeSrc":"5857:16:31","nodeType":"YulBlock","src":"5857:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5866:1:31","nodeType":"YulLiteral","src":"5866:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"5869:1:31","nodeType":"YulLiteral","src":"5869:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5859:6:31","nodeType":"YulIdentifier","src":"5859:6:31"},"nativeSrc":"5859:12:31","nodeType":"YulFunctionCall","src":"5859:12:31"},"nativeSrc":"5859:12:31","nodeType":"YulExpressionStatement","src":"5859:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5832:7:31","nodeType":"YulIdentifier","src":"5832:7:31"},{"name":"headStart","nativeSrc":"5841:9:31","nodeType":"YulIdentifier","src":"5841:9:31"}],"functionName":{"name":"sub","nativeSrc":"5828:3:31","nodeType":"YulIdentifier","src":"5828:3:31"},"nativeSrc":"5828:23:31","nodeType":"YulFunctionCall","src":"5828:23:31"},{"kind":"number","nativeSrc":"5853:2:31","nodeType":"YulLiteral","src":"5853:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5824:3:31","nodeType":"YulIdentifier","src":"5824:3:31"},"nativeSrc":"5824:32:31","nodeType":"YulFunctionCall","src":"5824:32:31"},"nativeSrc":"5821:52:31","nodeType":"YulIf","src":"5821:52:31"},{"nativeSrc":"5882:36:31","nodeType":"YulVariableDeclaration","src":"5882:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"5908:9:31","nodeType":"YulIdentifier","src":"5908:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"5895:12:31","nodeType":"YulIdentifier","src":"5895:12:31"},"nativeSrc":"5895:23:31","nodeType":"YulFunctionCall","src":"5895:23:31"},"variables":[{"name":"value","nativeSrc":"5886:5:31","nodeType":"YulTypedName","src":"5886:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5952:5:31","nodeType":"YulIdentifier","src":"5952:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5927:24:31","nodeType":"YulIdentifier","src":"5927:24:31"},"nativeSrc":"5927:31:31","nodeType":"YulFunctionCall","src":"5927:31:31"},"nativeSrc":"5927:31:31","nodeType":"YulExpressionStatement","src":"5927:31:31"},{"nativeSrc":"5967:15:31","nodeType":"YulAssignment","src":"5967:15:31","value":{"name":"value","nativeSrc":"5977:5:31","nodeType":"YulIdentifier","src":"5977:5:31"},"variableNames":[{"name":"value0","nativeSrc":"5967:6:31","nodeType":"YulIdentifier","src":"5967:6:31"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1162","nativeSrc":"5725:263:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5777:9:31","nodeType":"YulTypedName","src":"5777:9:31","type":""},{"name":"dataEnd","nativeSrc":"5788:7:31","nodeType":"YulTypedName","src":"5788:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5800:6:31","nodeType":"YulTypedName","src":"5800:6:31","type":""}],"src":"5725:263:31"},{"body":{"nativeSrc":"6150:241:31","nodeType":"YulBlock","src":"6150:241:31","statements":[{"nativeSrc":"6160:26:31","nodeType":"YulAssignment","src":"6160:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"6172:9:31","nodeType":"YulIdentifier","src":"6172:9:31"},{"kind":"number","nativeSrc":"6183:2:31","nodeType":"YulLiteral","src":"6183:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6168:3:31","nodeType":"YulIdentifier","src":"6168:3:31"},"nativeSrc":"6168:18:31","nodeType":"YulFunctionCall","src":"6168:18:31"},"variableNames":[{"name":"tail","nativeSrc":"6160:4:31","nodeType":"YulIdentifier","src":"6160:4:31"}]},{"nativeSrc":"6195:52:31","nodeType":"YulVariableDeclaration","src":"6195:52:31","value":{"kind":"number","nativeSrc":"6205:42:31","nodeType":"YulLiteral","src":"6205:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6199:2:31","nodeType":"YulTypedName","src":"6199:2:31","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6263:9:31","nodeType":"YulIdentifier","src":"6263:9:31"},{"arguments":[{"name":"value0","nativeSrc":"6278:6:31","nodeType":"YulIdentifier","src":"6278:6:31"},{"name":"_1","nativeSrc":"6286:2:31","nodeType":"YulIdentifier","src":"6286:2:31"}],"functionName":{"name":"and","nativeSrc":"6274:3:31","nodeType":"YulIdentifier","src":"6274:3:31"},"nativeSrc":"6274:15:31","nodeType":"YulFunctionCall","src":"6274:15:31"}],"functionName":{"name":"mstore","nativeSrc":"6256:6:31","nodeType":"YulIdentifier","src":"6256:6:31"},"nativeSrc":"6256:34:31","nodeType":"YulFunctionCall","src":"6256:34:31"},"nativeSrc":"6256:34:31","nodeType":"YulExpressionStatement","src":"6256:34:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6310:9:31","nodeType":"YulIdentifier","src":"6310:9:31"},{"kind":"number","nativeSrc":"6321:2:31","nodeType":"YulLiteral","src":"6321:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6306:3:31","nodeType":"YulIdentifier","src":"6306:3:31"},"nativeSrc":"6306:18:31","nodeType":"YulFunctionCall","src":"6306:18:31"},{"arguments":[{"name":"value1","nativeSrc":"6330:6:31","nodeType":"YulIdentifier","src":"6330:6:31"},{"name":"_1","nativeSrc":"6338:2:31","nodeType":"YulIdentifier","src":"6338:2:31"}],"functionName":{"name":"and","nativeSrc":"6326:3:31","nodeType":"YulIdentifier","src":"6326:3:31"},"nativeSrc":"6326:15:31","nodeType":"YulFunctionCall","src":"6326:15:31"}],"functionName":{"name":"mstore","nativeSrc":"6299:6:31","nodeType":"YulIdentifier","src":"6299:6:31"},"nativeSrc":"6299:43:31","nodeType":"YulFunctionCall","src":"6299:43:31"},"nativeSrc":"6299:43:31","nodeType":"YulExpressionStatement","src":"6299:43:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6362:9:31","nodeType":"YulIdentifier","src":"6362:9:31"},{"kind":"number","nativeSrc":"6373:2:31","nodeType":"YulLiteral","src":"6373:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6358:3:31","nodeType":"YulIdentifier","src":"6358:3:31"},"nativeSrc":"6358:18:31","nodeType":"YulFunctionCall","src":"6358:18:31"},{"name":"value2","nativeSrc":"6378:6:31","nodeType":"YulIdentifier","src":"6378:6:31"}],"functionName":{"name":"mstore","nativeSrc":"6351:6:31","nodeType":"YulIdentifier","src":"6351:6:31"},"nativeSrc":"6351:34:31","nodeType":"YulFunctionCall","src":"6351:34:31"},"nativeSrc":"6351:34:31","nodeType":"YulExpressionStatement","src":"6351:34:31"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"5993:398:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6103:9:31","nodeType":"YulTypedName","src":"6103:9:31","type":""},{"name":"value2","nativeSrc":"6114:6:31","nodeType":"YulTypedName","src":"6114:6:31","type":""},{"name":"value1","nativeSrc":"6122:6:31","nodeType":"YulTypedName","src":"6122:6:31","type":""},{"name":"value0","nativeSrc":"6130:6:31","nodeType":"YulTypedName","src":"6130:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6141:4:31","nodeType":"YulTypedName","src":"6141:4:31","type":""}],"src":"5993:398:31"},{"body":{"nativeSrc":"6474:177:31","nodeType":"YulBlock","src":"6474:177:31","statements":[{"body":{"nativeSrc":"6520:16:31","nodeType":"YulBlock","src":"6520:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6529:1:31","nodeType":"YulLiteral","src":"6529:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"6532:1:31","nodeType":"YulLiteral","src":"6532:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6522:6:31","nodeType":"YulIdentifier","src":"6522:6:31"},"nativeSrc":"6522:12:31","nodeType":"YulFunctionCall","src":"6522:12:31"},"nativeSrc":"6522:12:31","nodeType":"YulExpressionStatement","src":"6522:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6495:7:31","nodeType":"YulIdentifier","src":"6495:7:31"},{"name":"headStart","nativeSrc":"6504:9:31","nodeType":"YulIdentifier","src":"6504:9:31"}],"functionName":{"name":"sub","nativeSrc":"6491:3:31","nodeType":"YulIdentifier","src":"6491:3:31"},"nativeSrc":"6491:23:31","nodeType":"YulFunctionCall","src":"6491:23:31"},{"kind":"number","nativeSrc":"6516:2:31","nodeType":"YulLiteral","src":"6516:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6487:3:31","nodeType":"YulIdentifier","src":"6487:3:31"},"nativeSrc":"6487:32:31","nodeType":"YulFunctionCall","src":"6487:32:31"},"nativeSrc":"6484:52:31","nodeType":"YulIf","src":"6484:52:31"},{"nativeSrc":"6545:36:31","nodeType":"YulVariableDeclaration","src":"6545:36:31","value":{"arguments":[{"name":"headStart","nativeSrc":"6571:9:31","nodeType":"YulIdentifier","src":"6571:9:31"}],"functionName":{"name":"calldataload","nativeSrc":"6558:12:31","nodeType":"YulIdentifier","src":"6558:12:31"},"nativeSrc":"6558:23:31","nodeType":"YulFunctionCall","src":"6558:23:31"},"variables":[{"name":"value","nativeSrc":"6549:5:31","nodeType":"YulTypedName","src":"6549:5:31","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6615:5:31","nodeType":"YulIdentifier","src":"6615:5:31"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6590:24:31","nodeType":"YulIdentifier","src":"6590:24:31"},"nativeSrc":"6590:31:31","nodeType":"YulFunctionCall","src":"6590:31:31"},"nativeSrc":"6590:31:31","nodeType":"YulExpressionStatement","src":"6590:31:31"},{"nativeSrc":"6630:15:31","nodeType":"YulAssignment","src":"6630:15:31","value":{"name":"value","nativeSrc":"6640:5:31","nodeType":"YulIdentifier","src":"6640:5:31"},"variableNames":[{"name":"value0","nativeSrc":"6630:6:31","nodeType":"YulIdentifier","src":"6630:6:31"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"6396:255:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6440:9:31","nodeType":"YulTypedName","src":"6440:9:31","type":""},{"name":"dataEnd","nativeSrc":"6451:7:31","nodeType":"YulTypedName","src":"6451:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6463:6:31","nodeType":"YulTypedName","src":"6463:6:31","type":""}],"src":"6396:255:31"},{"body":{"nativeSrc":"6705:233:31","nodeType":"YulBlock","src":"6705:233:31","statements":[{"nativeSrc":"6715:17:31","nodeType":"YulAssignment","src":"6715:17:31","value":{"arguments":[{"name":"x","nativeSrc":"6727:1:31","nodeType":"YulIdentifier","src":"6727:1:31"},{"name":"y","nativeSrc":"6730:1:31","nodeType":"YulIdentifier","src":"6730:1:31"}],"functionName":{"name":"sub","nativeSrc":"6723:3:31","nodeType":"YulIdentifier","src":"6723:3:31"},"nativeSrc":"6723:9:31","nodeType":"YulFunctionCall","src":"6723:9:31"},"variableNames":[{"name":"diff","nativeSrc":"6715:4:31","nodeType":"YulIdentifier","src":"6715:4:31"}]},{"body":{"nativeSrc":"6764:168:31","nodeType":"YulBlock","src":"6764:168:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6785:1:31","nodeType":"YulLiteral","src":"6785:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"6788:77:31","nodeType":"YulLiteral","src":"6788:77:31","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6778:6:31","nodeType":"YulIdentifier","src":"6778:6:31"},"nativeSrc":"6778:88:31","nodeType":"YulFunctionCall","src":"6778:88:31"},"nativeSrc":"6778:88:31","nodeType":"YulExpressionStatement","src":"6778:88:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6886:1:31","nodeType":"YulLiteral","src":"6886:1:31","type":"","value":"4"},{"kind":"number","nativeSrc":"6889:4:31","nodeType":"YulLiteral","src":"6889:4:31","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"6879:6:31","nodeType":"YulIdentifier","src":"6879:6:31"},"nativeSrc":"6879:15:31","nodeType":"YulFunctionCall","src":"6879:15:31"},"nativeSrc":"6879:15:31","nodeType":"YulExpressionStatement","src":"6879:15:31"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6914:1:31","nodeType":"YulLiteral","src":"6914:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"6917:4:31","nodeType":"YulLiteral","src":"6917:4:31","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6907:6:31","nodeType":"YulIdentifier","src":"6907:6:31"},"nativeSrc":"6907:15:31","nodeType":"YulFunctionCall","src":"6907:15:31"},"nativeSrc":"6907:15:31","nodeType":"YulExpressionStatement","src":"6907:15:31"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6747:4:31","nodeType":"YulIdentifier","src":"6747:4:31"},{"name":"x","nativeSrc":"6753:1:31","nodeType":"YulIdentifier","src":"6753:1:31"}],"functionName":{"name":"gt","nativeSrc":"6744:2:31","nodeType":"YulIdentifier","src":"6744:2:31"},"nativeSrc":"6744:11:31","nodeType":"YulFunctionCall","src":"6744:11:31"},"nativeSrc":"6741:191:31","nodeType":"YulIf","src":"6741:191:31"}]},"name":"checked_sub_t_uint256","nativeSrc":"6656:282:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6687:1:31","nodeType":"YulTypedName","src":"6687:1:31","type":""},{"name":"y","nativeSrc":"6690:1:31","nodeType":"YulTypedName","src":"6690:1:31","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6696:4:31","nodeType":"YulTypedName","src":"6696:4:31","type":""}],"src":"6656:282:31"},{"body":{"nativeSrc":"7072:168:31","nodeType":"YulBlock","src":"7072:168:31","statements":[{"nativeSrc":"7082:26:31","nodeType":"YulAssignment","src":"7082:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"7094:9:31","nodeType":"YulIdentifier","src":"7094:9:31"},{"kind":"number","nativeSrc":"7105:2:31","nodeType":"YulLiteral","src":"7105:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7090:3:31","nodeType":"YulIdentifier","src":"7090:3:31"},"nativeSrc":"7090:18:31","nodeType":"YulFunctionCall","src":"7090:18:31"},"variableNames":[{"name":"tail","nativeSrc":"7082:4:31","nodeType":"YulIdentifier","src":"7082:4:31"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7124:9:31","nodeType":"YulIdentifier","src":"7124:9:31"},{"arguments":[{"name":"value0","nativeSrc":"7139:6:31","nodeType":"YulIdentifier","src":"7139:6:31"},{"kind":"number","nativeSrc":"7147:42:31","nodeType":"YulLiteral","src":"7147:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7135:3:31","nodeType":"YulIdentifier","src":"7135:3:31"},"nativeSrc":"7135:55:31","nodeType":"YulFunctionCall","src":"7135:55:31"}],"functionName":{"name":"mstore","nativeSrc":"7117:6:31","nodeType":"YulIdentifier","src":"7117:6:31"},"nativeSrc":"7117:74:31","nodeType":"YulFunctionCall","src":"7117:74:31"},"nativeSrc":"7117:74:31","nodeType":"YulExpressionStatement","src":"7117:74:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7211:9:31","nodeType":"YulIdentifier","src":"7211:9:31"},{"kind":"number","nativeSrc":"7222:2:31","nodeType":"YulLiteral","src":"7222:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7207:3:31","nodeType":"YulIdentifier","src":"7207:3:31"},"nativeSrc":"7207:18:31","nodeType":"YulFunctionCall","src":"7207:18:31"},{"name":"value1","nativeSrc":"7227:6:31","nodeType":"YulIdentifier","src":"7227:6:31"}],"functionName":{"name":"mstore","nativeSrc":"7200:6:31","nodeType":"YulIdentifier","src":"7200:6:31"},"nativeSrc":"7200:34:31","nodeType":"YulFunctionCall","src":"7200:34:31"},"nativeSrc":"7200:34:31","nodeType":"YulExpressionStatement","src":"7200:34:31"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"6943:297:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7033:9:31","nodeType":"YulTypedName","src":"7033:9:31","type":""},{"name":"value1","nativeSrc":"7044:6:31","nodeType":"YulTypedName","src":"7044:6:31","type":""},{"name":"value0","nativeSrc":"7052:6:31","nodeType":"YulTypedName","src":"7052:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7063:4:31","nodeType":"YulTypedName","src":"7063:4:31","type":""}],"src":"6943:297:31"},{"body":{"nativeSrc":"7419:179:31","nodeType":"YulBlock","src":"7419:179:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7436:9:31","nodeType":"YulIdentifier","src":"7436:9:31"},{"kind":"number","nativeSrc":"7447:2:31","nodeType":"YulLiteral","src":"7447:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7429:6:31","nodeType":"YulIdentifier","src":"7429:6:31"},"nativeSrc":"7429:21:31","nodeType":"YulFunctionCall","src":"7429:21:31"},"nativeSrc":"7429:21:31","nodeType":"YulExpressionStatement","src":"7429:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7470:9:31","nodeType":"YulIdentifier","src":"7470:9:31"},{"kind":"number","nativeSrc":"7481:2:31","nodeType":"YulLiteral","src":"7481:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7466:3:31","nodeType":"YulIdentifier","src":"7466:3:31"},"nativeSrc":"7466:18:31","nodeType":"YulFunctionCall","src":"7466:18:31"},{"kind":"number","nativeSrc":"7486:2:31","nodeType":"YulLiteral","src":"7486:2:31","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"7459:6:31","nodeType":"YulIdentifier","src":"7459:6:31"},"nativeSrc":"7459:30:31","nodeType":"YulFunctionCall","src":"7459:30:31"},"nativeSrc":"7459:30:31","nodeType":"YulExpressionStatement","src":"7459:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7509:9:31","nodeType":"YulIdentifier","src":"7509:9:31"},{"kind":"number","nativeSrc":"7520:2:31","nodeType":"YulLiteral","src":"7520:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7505:3:31","nodeType":"YulIdentifier","src":"7505:3:31"},"nativeSrc":"7505:18:31","nodeType":"YulFunctionCall","src":"7505:18:31"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"7525:31:31","nodeType":"YulLiteral","src":"7525:31:31","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"7498:6:31","nodeType":"YulIdentifier","src":"7498:6:31"},"nativeSrc":"7498:59:31","nodeType":"YulFunctionCall","src":"7498:59:31"},"nativeSrc":"7498:59:31","nodeType":"YulExpressionStatement","src":"7498:59:31"},{"nativeSrc":"7566:26:31","nodeType":"YulAssignment","src":"7566:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"7578:9:31","nodeType":"YulIdentifier","src":"7578:9:31"},{"kind":"number","nativeSrc":"7589:2:31","nodeType":"YulLiteral","src":"7589:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7574:3:31","nodeType":"YulIdentifier","src":"7574:3:31"},"nativeSrc":"7574:18:31","nodeType":"YulFunctionCall","src":"7574:18:31"},"variableNames":[{"name":"tail","nativeSrc":"7566:4:31","nodeType":"YulIdentifier","src":"7566:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7245:353:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7396:9:31","nodeType":"YulTypedName","src":"7396:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7410:4:31","nodeType":"YulTypedName","src":"7410:4:31","type":""}],"src":"7245:353:31"},{"body":{"nativeSrc":"7794:14:31","nodeType":"YulBlock","src":"7794:14:31","statements":[{"nativeSrc":"7796:10:31","nodeType":"YulAssignment","src":"7796:10:31","value":{"name":"pos","nativeSrc":"7803:3:31","nodeType":"YulIdentifier","src":"7803:3:31"},"variableNames":[{"name":"end","nativeSrc":"7796:3:31","nodeType":"YulIdentifier","src":"7796:3:31"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"7603:205:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"7778:3:31","nodeType":"YulTypedName","src":"7778:3:31","type":""}],"returnVariables":[{"name":"end","nativeSrc":"7786:3:31","nodeType":"YulTypedName","src":"7786:3:31","type":""}],"src":"7603:205:31"},{"body":{"nativeSrc":"7987:248:31","nodeType":"YulBlock","src":"7987:248:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8004:9:31","nodeType":"YulIdentifier","src":"8004:9:31"},{"kind":"number","nativeSrc":"8015:2:31","nodeType":"YulLiteral","src":"8015:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7997:6:31","nodeType":"YulIdentifier","src":"7997:6:31"},"nativeSrc":"7997:21:31","nodeType":"YulFunctionCall","src":"7997:21:31"},"nativeSrc":"7997:21:31","nodeType":"YulExpressionStatement","src":"7997:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8038:9:31","nodeType":"YulIdentifier","src":"8038:9:31"},{"kind":"number","nativeSrc":"8049:2:31","nodeType":"YulLiteral","src":"8049:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8034:3:31","nodeType":"YulIdentifier","src":"8034:3:31"},"nativeSrc":"8034:18:31","nodeType":"YulFunctionCall","src":"8034:18:31"},{"kind":"number","nativeSrc":"8054:2:31","nodeType":"YulLiteral","src":"8054:2:31","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"8027:6:31","nodeType":"YulIdentifier","src":"8027:6:31"},"nativeSrc":"8027:30:31","nodeType":"YulFunctionCall","src":"8027:30:31"},"nativeSrc":"8027:30:31","nodeType":"YulExpressionStatement","src":"8027:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8077:9:31","nodeType":"YulIdentifier","src":"8077:9:31"},{"kind":"number","nativeSrc":"8088:2:31","nodeType":"YulLiteral","src":"8088:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8073:3:31","nodeType":"YulIdentifier","src":"8073:3:31"},"nativeSrc":"8073:18:31","nodeType":"YulFunctionCall","src":"8073:18:31"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"8093:34:31","nodeType":"YulLiteral","src":"8093:34:31","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"8066:6:31","nodeType":"YulIdentifier","src":"8066:6:31"},"nativeSrc":"8066:62:31","nodeType":"YulFunctionCall","src":"8066:62:31"},"nativeSrc":"8066:62:31","nodeType":"YulExpressionStatement","src":"8066:62:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8148:9:31","nodeType":"YulIdentifier","src":"8148:9:31"},{"kind":"number","nativeSrc":"8159:2:31","nodeType":"YulLiteral","src":"8159:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8144:3:31","nodeType":"YulIdentifier","src":"8144:3:31"},"nativeSrc":"8144:18:31","nodeType":"YulFunctionCall","src":"8144:18:31"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"8164:28:31","nodeType":"YulLiteral","src":"8164:28:31","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"8137:6:31","nodeType":"YulIdentifier","src":"8137:6:31"},"nativeSrc":"8137:56:31","nodeType":"YulFunctionCall","src":"8137:56:31"},"nativeSrc":"8137:56:31","nodeType":"YulExpressionStatement","src":"8137:56:31"},{"nativeSrc":"8202:27:31","nodeType":"YulAssignment","src":"8202:27:31","value":{"arguments":[{"name":"headStart","nativeSrc":"8214:9:31","nodeType":"YulIdentifier","src":"8214:9:31"},{"kind":"number","nativeSrc":"8225:3:31","nodeType":"YulLiteral","src":"8225:3:31","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8210:3:31","nodeType":"YulIdentifier","src":"8210:3:31"},"nativeSrc":"8210:19:31","nodeType":"YulFunctionCall","src":"8210:19:31"},"variableNames":[{"name":"tail","nativeSrc":"8202:4:31","nodeType":"YulIdentifier","src":"8202:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7813:422:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7964:9:31","nodeType":"YulTypedName","src":"7964:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7978:4:31","nodeType":"YulTypedName","src":"7978:4:31","type":""}],"src":"7813:422:31"},{"body":{"nativeSrc":"8369:198:31","nodeType":"YulBlock","src":"8369:198:31","statements":[{"nativeSrc":"8379:26:31","nodeType":"YulAssignment","src":"8379:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"8391:9:31","nodeType":"YulIdentifier","src":"8391:9:31"},{"kind":"number","nativeSrc":"8402:2:31","nodeType":"YulLiteral","src":"8402:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8387:3:31","nodeType":"YulIdentifier","src":"8387:3:31"},"nativeSrc":"8387:18:31","nodeType":"YulFunctionCall","src":"8387:18:31"},"variableNames":[{"name":"tail","nativeSrc":"8379:4:31","nodeType":"YulIdentifier","src":"8379:4:31"}]},{"nativeSrc":"8414:52:31","nodeType":"YulVariableDeclaration","src":"8414:52:31","value":{"kind":"number","nativeSrc":"8424:42:31","nodeType":"YulLiteral","src":"8424:42:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8418:2:31","nodeType":"YulTypedName","src":"8418:2:31","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8482:9:31","nodeType":"YulIdentifier","src":"8482:9:31"},{"arguments":[{"name":"value0","nativeSrc":"8497:6:31","nodeType":"YulIdentifier","src":"8497:6:31"},{"name":"_1","nativeSrc":"8505:2:31","nodeType":"YulIdentifier","src":"8505:2:31"}],"functionName":{"name":"and","nativeSrc":"8493:3:31","nodeType":"YulIdentifier","src":"8493:3:31"},"nativeSrc":"8493:15:31","nodeType":"YulFunctionCall","src":"8493:15:31"}],"functionName":{"name":"mstore","nativeSrc":"8475:6:31","nodeType":"YulIdentifier","src":"8475:6:31"},"nativeSrc":"8475:34:31","nodeType":"YulFunctionCall","src":"8475:34:31"},"nativeSrc":"8475:34:31","nodeType":"YulExpressionStatement","src":"8475:34:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8529:9:31","nodeType":"YulIdentifier","src":"8529:9:31"},{"kind":"number","nativeSrc":"8540:2:31","nodeType":"YulLiteral","src":"8540:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8525:3:31","nodeType":"YulIdentifier","src":"8525:3:31"},"nativeSrc":"8525:18:31","nodeType":"YulFunctionCall","src":"8525:18:31"},{"arguments":[{"name":"value1","nativeSrc":"8549:6:31","nodeType":"YulIdentifier","src":"8549:6:31"},{"name":"_1","nativeSrc":"8557:2:31","nodeType":"YulIdentifier","src":"8557:2:31"}],"functionName":{"name":"and","nativeSrc":"8545:3:31","nodeType":"YulIdentifier","src":"8545:3:31"},"nativeSrc":"8545:15:31","nodeType":"YulFunctionCall","src":"8545:15:31"}],"functionName":{"name":"mstore","nativeSrc":"8518:6:31","nodeType":"YulIdentifier","src":"8518:6:31"},"nativeSrc":"8518:43:31","nodeType":"YulFunctionCall","src":"8518:43:31"},"nativeSrc":"8518:43:31","nodeType":"YulExpressionStatement","src":"8518:43:31"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"8240:327:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8330:9:31","nodeType":"YulTypedName","src":"8330:9:31","type":""},{"name":"value1","nativeSrc":"8341:6:31","nodeType":"YulTypedName","src":"8341:6:31","type":""},{"name":"value0","nativeSrc":"8349:6:31","nodeType":"YulTypedName","src":"8349:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8360:4:31","nodeType":"YulTypedName","src":"8360:4:31","type":""}],"src":"8240:327:31"},{"body":{"nativeSrc":"8650:199:31","nodeType":"YulBlock","src":"8650:199:31","statements":[{"body":{"nativeSrc":"8696:16:31","nodeType":"YulBlock","src":"8696:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8705:1:31","nodeType":"YulLiteral","src":"8705:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"8708:1:31","nodeType":"YulLiteral","src":"8708:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8698:6:31","nodeType":"YulIdentifier","src":"8698:6:31"},"nativeSrc":"8698:12:31","nodeType":"YulFunctionCall","src":"8698:12:31"},"nativeSrc":"8698:12:31","nodeType":"YulExpressionStatement","src":"8698:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8671:7:31","nodeType":"YulIdentifier","src":"8671:7:31"},{"name":"headStart","nativeSrc":"8680:9:31","nodeType":"YulIdentifier","src":"8680:9:31"}],"functionName":{"name":"sub","nativeSrc":"8667:3:31","nodeType":"YulIdentifier","src":"8667:3:31"},"nativeSrc":"8667:23:31","nodeType":"YulFunctionCall","src":"8667:23:31"},{"kind":"number","nativeSrc":"8692:2:31","nodeType":"YulLiteral","src":"8692:2:31","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8663:3:31","nodeType":"YulIdentifier","src":"8663:3:31"},"nativeSrc":"8663:32:31","nodeType":"YulFunctionCall","src":"8663:32:31"},"nativeSrc":"8660:52:31","nodeType":"YulIf","src":"8660:52:31"},{"nativeSrc":"8721:29:31","nodeType":"YulVariableDeclaration","src":"8721:29:31","value":{"arguments":[{"name":"headStart","nativeSrc":"8740:9:31","nodeType":"YulIdentifier","src":"8740:9:31"}],"functionName":{"name":"mload","nativeSrc":"8734:5:31","nodeType":"YulIdentifier","src":"8734:5:31"},"nativeSrc":"8734:16:31","nodeType":"YulFunctionCall","src":"8734:16:31"},"variables":[{"name":"value","nativeSrc":"8725:5:31","nodeType":"YulTypedName","src":"8725:5:31","type":""}]},{"body":{"nativeSrc":"8803:16:31","nodeType":"YulBlock","src":"8803:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8812:1:31","nodeType":"YulLiteral","src":"8812:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"8815:1:31","nodeType":"YulLiteral","src":"8815:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8805:6:31","nodeType":"YulIdentifier","src":"8805:6:31"},"nativeSrc":"8805:12:31","nodeType":"YulFunctionCall","src":"8805:12:31"},"nativeSrc":"8805:12:31","nodeType":"YulExpressionStatement","src":"8805:12:31"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8772:5:31","nodeType":"YulIdentifier","src":"8772:5:31"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8793:5:31","nodeType":"YulIdentifier","src":"8793:5:31"}],"functionName":{"name":"iszero","nativeSrc":"8786:6:31","nodeType":"YulIdentifier","src":"8786:6:31"},"nativeSrc":"8786:13:31","nodeType":"YulFunctionCall","src":"8786:13:31"}],"functionName":{"name":"iszero","nativeSrc":"8779:6:31","nodeType":"YulIdentifier","src":"8779:6:31"},"nativeSrc":"8779:21:31","nodeType":"YulFunctionCall","src":"8779:21:31"}],"functionName":{"name":"eq","nativeSrc":"8769:2:31","nodeType":"YulIdentifier","src":"8769:2:31"},"nativeSrc":"8769:32:31","nodeType":"YulFunctionCall","src":"8769:32:31"}],"functionName":{"name":"iszero","nativeSrc":"8762:6:31","nodeType":"YulIdentifier","src":"8762:6:31"},"nativeSrc":"8762:40:31","nodeType":"YulFunctionCall","src":"8762:40:31"},"nativeSrc":"8759:60:31","nodeType":"YulIf","src":"8759:60:31"},{"nativeSrc":"8828:15:31","nodeType":"YulAssignment","src":"8828:15:31","value":{"name":"value","nativeSrc":"8838:5:31","nodeType":"YulIdentifier","src":"8838:5:31"},"variableNames":[{"name":"value0","nativeSrc":"8828:6:31","nodeType":"YulIdentifier","src":"8828:6:31"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"8572:277:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8616:9:31","nodeType":"YulTypedName","src":"8616:9:31","type":""},{"name":"dataEnd","nativeSrc":"8627:7:31","nodeType":"YulTypedName","src":"8627:7:31","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8639:6:31","nodeType":"YulTypedName","src":"8639:6:31","type":""}],"src":"8572:277:31"},{"body":{"nativeSrc":"9028:232:31","nodeType":"YulBlock","src":"9028:232:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9045:9:31","nodeType":"YulIdentifier","src":"9045:9:31"},{"kind":"number","nativeSrc":"9056:2:31","nodeType":"YulLiteral","src":"9056:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"9038:6:31","nodeType":"YulIdentifier","src":"9038:6:31"},"nativeSrc":"9038:21:31","nodeType":"YulFunctionCall","src":"9038:21:31"},"nativeSrc":"9038:21:31","nodeType":"YulExpressionStatement","src":"9038:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9079:9:31","nodeType":"YulIdentifier","src":"9079:9:31"},{"kind":"number","nativeSrc":"9090:2:31","nodeType":"YulLiteral","src":"9090:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9075:3:31","nodeType":"YulIdentifier","src":"9075:3:31"},"nativeSrc":"9075:18:31","nodeType":"YulFunctionCall","src":"9075:18:31"},{"kind":"number","nativeSrc":"9095:2:31","nodeType":"YulLiteral","src":"9095:2:31","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"9068:6:31","nodeType":"YulIdentifier","src":"9068:6:31"},"nativeSrc":"9068:30:31","nodeType":"YulFunctionCall","src":"9068:30:31"},"nativeSrc":"9068:30:31","nodeType":"YulExpressionStatement","src":"9068:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9118:9:31","nodeType":"YulIdentifier","src":"9118:9:31"},{"kind":"number","nativeSrc":"9129:2:31","nodeType":"YulLiteral","src":"9129:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9114:3:31","nodeType":"YulIdentifier","src":"9114:3:31"},"nativeSrc":"9114:18:31","nodeType":"YulFunctionCall","src":"9114:18:31"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"9134:34:31","nodeType":"YulLiteral","src":"9134:34:31","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"9107:6:31","nodeType":"YulIdentifier","src":"9107:6:31"},"nativeSrc":"9107:62:31","nodeType":"YulFunctionCall","src":"9107:62:31"},"nativeSrc":"9107:62:31","nodeType":"YulExpressionStatement","src":"9107:62:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9189:9:31","nodeType":"YulIdentifier","src":"9189:9:31"},{"kind":"number","nativeSrc":"9200:2:31","nodeType":"YulLiteral","src":"9200:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9185:3:31","nodeType":"YulIdentifier","src":"9185:3:31"},"nativeSrc":"9185:18:31","nodeType":"YulFunctionCall","src":"9185:18:31"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"9205:12:31","nodeType":"YulLiteral","src":"9205:12:31","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"9178:6:31","nodeType":"YulIdentifier","src":"9178:6:31"},"nativeSrc":"9178:40:31","nodeType":"YulFunctionCall","src":"9178:40:31"},"nativeSrc":"9178:40:31","nodeType":"YulExpressionStatement","src":"9178:40:31"},{"nativeSrc":"9227:27:31","nodeType":"YulAssignment","src":"9227:27:31","value":{"arguments":[{"name":"headStart","nativeSrc":"9239:9:31","nodeType":"YulIdentifier","src":"9239:9:31"},{"kind":"number","nativeSrc":"9250:3:31","nodeType":"YulLiteral","src":"9250:3:31","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9235:3:31","nodeType":"YulIdentifier","src":"9235:3:31"},"nativeSrc":"9235:19:31","nodeType":"YulFunctionCall","src":"9235:19:31"},"variableNames":[{"name":"tail","nativeSrc":"9227:4:31","nodeType":"YulIdentifier","src":"9227:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"8854:406:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9005:9:31","nodeType":"YulTypedName","src":"9005:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9019:4:31","nodeType":"YulTypedName","src":"9019:4:31","type":""}],"src":"8854:406:31"},{"body":{"nativeSrc":"9395:201:31","nodeType":"YulBlock","src":"9395:201:31","statements":[{"body":{"nativeSrc":"9433:16:31","nodeType":"YulBlock","src":"9433:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9442:1:31","nodeType":"YulLiteral","src":"9442:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"9445:1:31","nodeType":"YulLiteral","src":"9445:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9435:6:31","nodeType":"YulIdentifier","src":"9435:6:31"},"nativeSrc":"9435:12:31","nodeType":"YulFunctionCall","src":"9435:12:31"},"nativeSrc":"9435:12:31","nodeType":"YulExpressionStatement","src":"9435:12:31"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"9411:10:31","nodeType":"YulIdentifier","src":"9411:10:31"},{"name":"endIndex","nativeSrc":"9423:8:31","nodeType":"YulIdentifier","src":"9423:8:31"}],"functionName":{"name":"gt","nativeSrc":"9408:2:31","nodeType":"YulIdentifier","src":"9408:2:31"},"nativeSrc":"9408:24:31","nodeType":"YulFunctionCall","src":"9408:24:31"},"nativeSrc":"9405:44:31","nodeType":"YulIf","src":"9405:44:31"},{"body":{"nativeSrc":"9482:16:31","nodeType":"YulBlock","src":"9482:16:31","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9491:1:31","nodeType":"YulLiteral","src":"9491:1:31","type":"","value":"0"},{"kind":"number","nativeSrc":"9494:1:31","nodeType":"YulLiteral","src":"9494:1:31","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9484:6:31","nodeType":"YulIdentifier","src":"9484:6:31"},"nativeSrc":"9484:12:31","nodeType":"YulFunctionCall","src":"9484:12:31"},"nativeSrc":"9484:12:31","nodeType":"YulExpressionStatement","src":"9484:12:31"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"9464:8:31","nodeType":"YulIdentifier","src":"9464:8:31"},{"name":"length","nativeSrc":"9474:6:31","nodeType":"YulIdentifier","src":"9474:6:31"}],"functionName":{"name":"gt","nativeSrc":"9461:2:31","nodeType":"YulIdentifier","src":"9461:2:31"},"nativeSrc":"9461:20:31","nodeType":"YulFunctionCall","src":"9461:20:31"},"nativeSrc":"9458:40:31","nodeType":"YulIf","src":"9458:40:31"},{"nativeSrc":"9507:36:31","nodeType":"YulAssignment","src":"9507:36:31","value":{"arguments":[{"name":"offset","nativeSrc":"9524:6:31","nodeType":"YulIdentifier","src":"9524:6:31"},{"name":"startIndex","nativeSrc":"9532:10:31","nodeType":"YulIdentifier","src":"9532:10:31"}],"functionName":{"name":"add","nativeSrc":"9520:3:31","nodeType":"YulIdentifier","src":"9520:3:31"},"nativeSrc":"9520:23:31","nodeType":"YulFunctionCall","src":"9520:23:31"},"variableNames":[{"name":"offsetOut","nativeSrc":"9507:9:31","nodeType":"YulIdentifier","src":"9507:9:31"}]},{"nativeSrc":"9552:38:31","nodeType":"YulAssignment","src":"9552:38:31","value":{"arguments":[{"name":"endIndex","nativeSrc":"9569:8:31","nodeType":"YulIdentifier","src":"9569:8:31"},{"name":"startIndex","nativeSrc":"9579:10:31","nodeType":"YulIdentifier","src":"9579:10:31"}],"functionName":{"name":"sub","nativeSrc":"9565:3:31","nodeType":"YulIdentifier","src":"9565:3:31"},"nativeSrc":"9565:25:31","nodeType":"YulFunctionCall","src":"9565:25:31"},"variableNames":[{"name":"lengthOut","nativeSrc":"9552:9:31","nodeType":"YulIdentifier","src":"9552:9:31"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"9265:331:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"9329:6:31","nodeType":"YulTypedName","src":"9329:6:31","type":""},{"name":"length","nativeSrc":"9337:6:31","nodeType":"YulTypedName","src":"9337:6:31","type":""},{"name":"startIndex","nativeSrc":"9345:10:31","nodeType":"YulTypedName","src":"9345:10:31","type":""},{"name":"endIndex","nativeSrc":"9357:8:31","nodeType":"YulTypedName","src":"9357:8:31","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"9370:9:31","nodeType":"YulTypedName","src":"9370:9:31","type":""},{"name":"lengthOut","nativeSrc":"9381:9:31","nodeType":"YulTypedName","src":"9381:9:31","type":""}],"src":"9265:331:31"},{"body":{"nativeSrc":"9775:228:31","nodeType":"YulBlock","src":"9775:228:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9792:9:31","nodeType":"YulIdentifier","src":"9792:9:31"},{"kind":"number","nativeSrc":"9803:2:31","nodeType":"YulLiteral","src":"9803:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"9785:6:31","nodeType":"YulIdentifier","src":"9785:6:31"},"nativeSrc":"9785:21:31","nodeType":"YulFunctionCall","src":"9785:21:31"},"nativeSrc":"9785:21:31","nodeType":"YulExpressionStatement","src":"9785:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9826:9:31","nodeType":"YulIdentifier","src":"9826:9:31"},{"kind":"number","nativeSrc":"9837:2:31","nodeType":"YulLiteral","src":"9837:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9822:3:31","nodeType":"YulIdentifier","src":"9822:3:31"},"nativeSrc":"9822:18:31","nodeType":"YulFunctionCall","src":"9822:18:31"},{"kind":"number","nativeSrc":"9842:2:31","nodeType":"YulLiteral","src":"9842:2:31","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"9815:6:31","nodeType":"YulIdentifier","src":"9815:6:31"},"nativeSrc":"9815:30:31","nodeType":"YulFunctionCall","src":"9815:30:31"},"nativeSrc":"9815:30:31","nodeType":"YulExpressionStatement","src":"9815:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9865:9:31","nodeType":"YulIdentifier","src":"9865:9:31"},{"kind":"number","nativeSrc":"9876:2:31","nodeType":"YulLiteral","src":"9876:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9861:3:31","nodeType":"YulIdentifier","src":"9861:3:31"},"nativeSrc":"9861:18:31","nodeType":"YulFunctionCall","src":"9861:18:31"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"9881:34:31","nodeType":"YulLiteral","src":"9881:34:31","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"9854:6:31","nodeType":"YulIdentifier","src":"9854:6:31"},"nativeSrc":"9854:62:31","nodeType":"YulFunctionCall","src":"9854:62:31"},"nativeSrc":"9854:62:31","nodeType":"YulExpressionStatement","src":"9854:62:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9936:9:31","nodeType":"YulIdentifier","src":"9936:9:31"},{"kind":"number","nativeSrc":"9947:2:31","nodeType":"YulLiteral","src":"9947:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9932:3:31","nodeType":"YulIdentifier","src":"9932:3:31"},"nativeSrc":"9932:18:31","nodeType":"YulFunctionCall","src":"9932:18:31"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"9952:8:31","nodeType":"YulLiteral","src":"9952:8:31","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"9925:6:31","nodeType":"YulIdentifier","src":"9925:6:31"},"nativeSrc":"9925:36:31","nodeType":"YulFunctionCall","src":"9925:36:31"},"nativeSrc":"9925:36:31","nodeType":"YulExpressionStatement","src":"9925:36:31"},{"nativeSrc":"9970:27:31","nodeType":"YulAssignment","src":"9970:27:31","value":{"arguments":[{"name":"headStart","nativeSrc":"9982:9:31","nodeType":"YulIdentifier","src":"9982:9:31"},{"kind":"number","nativeSrc":"9993:3:31","nodeType":"YulLiteral","src":"9993:3:31","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"9978:3:31","nodeType":"YulIdentifier","src":"9978:3:31"},"nativeSrc":"9978:19:31","nodeType":"YulFunctionCall","src":"9978:19:31"},"variableNames":[{"name":"tail","nativeSrc":"9970:4:31","nodeType":"YulIdentifier","src":"9970:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"9601:402:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9752:9:31","nodeType":"YulTypedName","src":"9752:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9766:4:31","nodeType":"YulTypedName","src":"9766:4:31","type":""}],"src":"9601:402:31"},{"body":{"nativeSrc":"10074:184:31","nodeType":"YulBlock","src":"10074:184:31","statements":[{"nativeSrc":"10084:10:31","nodeType":"YulVariableDeclaration","src":"10084:10:31","value":{"kind":"number","nativeSrc":"10093:1:31","nodeType":"YulLiteral","src":"10093:1:31","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"10088:1:31","nodeType":"YulTypedName","src":"10088:1:31","type":""}]},{"body":{"nativeSrc":"10153:63:31","nodeType":"YulBlock","src":"10153:63:31","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"10178:3:31","nodeType":"YulIdentifier","src":"10178:3:31"},{"name":"i","nativeSrc":"10183:1:31","nodeType":"YulIdentifier","src":"10183:1:31"}],"functionName":{"name":"add","nativeSrc":"10174:3:31","nodeType":"YulIdentifier","src":"10174:3:31"},"nativeSrc":"10174:11:31","nodeType":"YulFunctionCall","src":"10174:11:31"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"10197:3:31","nodeType":"YulIdentifier","src":"10197:3:31"},{"name":"i","nativeSrc":"10202:1:31","nodeType":"YulIdentifier","src":"10202:1:31"}],"functionName":{"name":"add","nativeSrc":"10193:3:31","nodeType":"YulIdentifier","src":"10193:3:31"},"nativeSrc":"10193:11:31","nodeType":"YulFunctionCall","src":"10193:11:31"}],"functionName":{"name":"mload","nativeSrc":"10187:5:31","nodeType":"YulIdentifier","src":"10187:5:31"},"nativeSrc":"10187:18:31","nodeType":"YulFunctionCall","src":"10187:18:31"}],"functionName":{"name":"mstore","nativeSrc":"10167:6:31","nodeType":"YulIdentifier","src":"10167:6:31"},"nativeSrc":"10167:39:31","nodeType":"YulFunctionCall","src":"10167:39:31"},"nativeSrc":"10167:39:31","nodeType":"YulExpressionStatement","src":"10167:39:31"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"10114:1:31","nodeType":"YulIdentifier","src":"10114:1:31"},{"name":"length","nativeSrc":"10117:6:31","nodeType":"YulIdentifier","src":"10117:6:31"}],"functionName":{"name":"lt","nativeSrc":"10111:2:31","nodeType":"YulIdentifier","src":"10111:2:31"},"nativeSrc":"10111:13:31","nodeType":"YulFunctionCall","src":"10111:13:31"},"nativeSrc":"10103:113:31","nodeType":"YulForLoop","post":{"nativeSrc":"10125:19:31","nodeType":"YulBlock","src":"10125:19:31","statements":[{"nativeSrc":"10127:15:31","nodeType":"YulAssignment","src":"10127:15:31","value":{"arguments":[{"name":"i","nativeSrc":"10136:1:31","nodeType":"YulIdentifier","src":"10136:1:31"},{"kind":"number","nativeSrc":"10139:2:31","nodeType":"YulLiteral","src":"10139:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10132:3:31","nodeType":"YulIdentifier","src":"10132:3:31"},"nativeSrc":"10132:10:31","nodeType":"YulFunctionCall","src":"10132:10:31"},"variableNames":[{"name":"i","nativeSrc":"10127:1:31","nodeType":"YulIdentifier","src":"10127:1:31"}]}]},"pre":{"nativeSrc":"10107:3:31","nodeType":"YulBlock","src":"10107:3:31","statements":[]},"src":"10103:113:31"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"10236:3:31","nodeType":"YulIdentifier","src":"10236:3:31"},{"name":"length","nativeSrc":"10241:6:31","nodeType":"YulIdentifier","src":"10241:6:31"}],"functionName":{"name":"add","nativeSrc":"10232:3:31","nodeType":"YulIdentifier","src":"10232:3:31"},"nativeSrc":"10232:16:31","nodeType":"YulFunctionCall","src":"10232:16:31"},{"kind":"number","nativeSrc":"10250:1:31","nodeType":"YulLiteral","src":"10250:1:31","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"10225:6:31","nodeType":"YulIdentifier","src":"10225:6:31"},"nativeSrc":"10225:27:31","nodeType":"YulFunctionCall","src":"10225:27:31"},"nativeSrc":"10225:27:31","nodeType":"YulExpressionStatement","src":"10225:27:31"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"10008:250:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"10052:3:31","nodeType":"YulTypedName","src":"10052:3:31","type":""},{"name":"dst","nativeSrc":"10057:3:31","nodeType":"YulTypedName","src":"10057:3:31","type":""},{"name":"length","nativeSrc":"10062:6:31","nodeType":"YulTypedName","src":"10062:6:31","type":""}],"src":"10008:250:31"},{"body":{"nativeSrc":"10400:150:31","nodeType":"YulBlock","src":"10400:150:31","statements":[{"nativeSrc":"10410:27:31","nodeType":"YulVariableDeclaration","src":"10410:27:31","value":{"arguments":[{"name":"value0","nativeSrc":"10430:6:31","nodeType":"YulIdentifier","src":"10430:6:31"}],"functionName":{"name":"mload","nativeSrc":"10424:5:31","nodeType":"YulIdentifier","src":"10424:5:31"},"nativeSrc":"10424:13:31","nodeType":"YulFunctionCall","src":"10424:13:31"},"variables":[{"name":"length","nativeSrc":"10414:6:31","nodeType":"YulTypedName","src":"10414:6:31","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"10485:6:31","nodeType":"YulIdentifier","src":"10485:6:31"},{"kind":"number","nativeSrc":"10493:4:31","nodeType":"YulLiteral","src":"10493:4:31","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10481:3:31","nodeType":"YulIdentifier","src":"10481:3:31"},"nativeSrc":"10481:17:31","nodeType":"YulFunctionCall","src":"10481:17:31"},{"name":"pos","nativeSrc":"10500:3:31","nodeType":"YulIdentifier","src":"10500:3:31"},{"name":"length","nativeSrc":"10505:6:31","nodeType":"YulIdentifier","src":"10505:6:31"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"10446:34:31","nodeType":"YulIdentifier","src":"10446:34:31"},"nativeSrc":"10446:66:31","nodeType":"YulFunctionCall","src":"10446:66:31"},"nativeSrc":"10446:66:31","nodeType":"YulExpressionStatement","src":"10446:66:31"},{"nativeSrc":"10521:23:31","nodeType":"YulAssignment","src":"10521:23:31","value":{"arguments":[{"name":"pos","nativeSrc":"10532:3:31","nodeType":"YulIdentifier","src":"10532:3:31"},{"name":"length","nativeSrc":"10537:6:31","nodeType":"YulIdentifier","src":"10537:6:31"}],"functionName":{"name":"add","nativeSrc":"10528:3:31","nodeType":"YulIdentifier","src":"10528:3:31"},"nativeSrc":"10528:16:31","nodeType":"YulFunctionCall","src":"10528:16:31"},"variableNames":[{"name":"end","nativeSrc":"10521:3:31","nodeType":"YulIdentifier","src":"10521:3:31"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"10263:287:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10376:3:31","nodeType":"YulTypedName","src":"10376:3:31","type":""},{"name":"value0","nativeSrc":"10381:6:31","nodeType":"YulTypedName","src":"10381:6:31","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10392:3:31","nodeType":"YulTypedName","src":"10392:3:31","type":""}],"src":"10263:287:31"},{"body":{"nativeSrc":"10729:179:31","nodeType":"YulBlock","src":"10729:179:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10746:9:31","nodeType":"YulIdentifier","src":"10746:9:31"},{"kind":"number","nativeSrc":"10757:2:31","nodeType":"YulLiteral","src":"10757:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"10739:6:31","nodeType":"YulIdentifier","src":"10739:6:31"},"nativeSrc":"10739:21:31","nodeType":"YulFunctionCall","src":"10739:21:31"},"nativeSrc":"10739:21:31","nodeType":"YulExpressionStatement","src":"10739:21:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10780:9:31","nodeType":"YulIdentifier","src":"10780:9:31"},{"kind":"number","nativeSrc":"10791:2:31","nodeType":"YulLiteral","src":"10791:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10776:3:31","nodeType":"YulIdentifier","src":"10776:3:31"},"nativeSrc":"10776:18:31","nodeType":"YulFunctionCall","src":"10776:18:31"},{"kind":"number","nativeSrc":"10796:2:31","nodeType":"YulLiteral","src":"10796:2:31","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"10769:6:31","nodeType":"YulIdentifier","src":"10769:6:31"},"nativeSrc":"10769:30:31","nodeType":"YulFunctionCall","src":"10769:30:31"},"nativeSrc":"10769:30:31","nodeType":"YulExpressionStatement","src":"10769:30:31"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10819:9:31","nodeType":"YulIdentifier","src":"10819:9:31"},{"kind":"number","nativeSrc":"10830:2:31","nodeType":"YulLiteral","src":"10830:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10815:3:31","nodeType":"YulIdentifier","src":"10815:3:31"},"nativeSrc":"10815:18:31","nodeType":"YulFunctionCall","src":"10815:18:31"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"10835:31:31","nodeType":"YulLiteral","src":"10835:31:31","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"10808:6:31","nodeType":"YulIdentifier","src":"10808:6:31"},"nativeSrc":"10808:59:31","nodeType":"YulFunctionCall","src":"10808:59:31"},"nativeSrc":"10808:59:31","nodeType":"YulExpressionStatement","src":"10808:59:31"},{"nativeSrc":"10876:26:31","nodeType":"YulAssignment","src":"10876:26:31","value":{"arguments":[{"name":"headStart","nativeSrc":"10888:9:31","nodeType":"YulIdentifier","src":"10888:9:31"},{"kind":"number","nativeSrc":"10899:2:31","nodeType":"YulLiteral","src":"10899:2:31","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10884:3:31","nodeType":"YulIdentifier","src":"10884:3:31"},"nativeSrc":"10884:18:31","nodeType":"YulFunctionCall","src":"10884:18:31"},"variableNames":[{"name":"tail","nativeSrc":"10876:4:31","nodeType":"YulIdentifier","src":"10876:4:31"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10555:353:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10706:9:31","nodeType":"YulTypedName","src":"10706:9:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10720:4:31","nodeType":"YulTypedName","src":"10720:4:31","type":""}],"src":"10555:353:31"},{"body":{"nativeSrc":"11034:334:31","nodeType":"YulBlock","src":"11034:334:31","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11051:9:31","nodeType":"YulIdentifier","src":"11051:9:31"},{"kind":"number","nativeSrc":"11062:2:31","nodeType":"YulLiteral","src":"11062:2:31","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"11044:6:31","nodeType":"YulIdentifier","src":"11044:6:31"},"nativeSrc":"11044:21:31","nodeType":"YulFunctionCall","src":"11044:21:31"},"nativeSrc":"11044:21:31","nodeType":"YulExpressionStatement","src":"11044:21:31"},{"nativeSrc":"11074:27:31","nodeType":"YulVariableDeclaration","src":"11074:27:31","value":{"arguments":[{"name":"value0","nativeSrc":"11094:6:31","nodeType":"YulIdentifier","src":"11094:6:31"}],"functionName":{"name":"mload","nativeSrc":"11088:5:31","nodeType":"YulIdentifier","src":"11088:5:31"},"nativeSrc":"11088:13:31","nodeType":"YulFunctionCall","src":"11088:13:31"},"variables":[{"name":"length","nativeSrc":"11078:6:31","nodeType":"YulTypedName","src":"11078:6:31","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11121:9:31","nodeType":"YulIdentifier","src":"11121:9:31"},{"kind":"number","nativeSrc":"11132:2:31","nodeType":"YulLiteral","src":"11132:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11117:3:31","nodeType":"YulIdentifier","src":"11117:3:31"},"nativeSrc":"11117:18:31","nodeType":"YulFunctionCall","src":"11117:18:31"},{"name":"length","nativeSrc":"11137:6:31","nodeType":"YulIdentifier","src":"11137:6:31"}],"functionName":{"name":"mstore","nativeSrc":"11110:6:31","nodeType":"YulIdentifier","src":"11110:6:31"},"nativeSrc":"11110:34:31","nodeType":"YulFunctionCall","src":"11110:34:31"},"nativeSrc":"11110:34:31","nodeType":"YulExpressionStatement","src":"11110:34:31"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"11192:6:31","nodeType":"YulIdentifier","src":"11192:6:31"},{"kind":"number","nativeSrc":"11200:2:31","nodeType":"YulLiteral","src":"11200:2:31","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11188:3:31","nodeType":"YulIdentifier","src":"11188:3:31"},"nativeSrc":"11188:15:31","nodeType":"YulFunctionCall","src":"11188:15:31"},{"arguments":[{"name":"headStart","nativeSrc":"11209:9:31","nodeType":"YulIdentifier","src":"11209:9:31"},{"kind":"number","nativeSrc":"11220:2:31","nodeType":"YulLiteral","src":"11220:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11205:3:31","nodeType":"YulIdentifier","src":"11205:3:31"},"nativeSrc":"11205:18:31","nodeType":"YulFunctionCall","src":"11205:18:31"},{"name":"length","nativeSrc":"11225:6:31","nodeType":"YulIdentifier","src":"11225:6:31"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"11153:34:31","nodeType":"YulIdentifier","src":"11153:34:31"},"nativeSrc":"11153:79:31","nodeType":"YulFunctionCall","src":"11153:79:31"},"nativeSrc":"11153:79:31","nodeType":"YulExpressionStatement","src":"11153:79:31"},{"nativeSrc":"11241:121:31","nodeType":"YulAssignment","src":"11241:121:31","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11257:9:31","nodeType":"YulIdentifier","src":"11257:9:31"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"11276:6:31","nodeType":"YulIdentifier","src":"11276:6:31"},{"kind":"number","nativeSrc":"11284:2:31","nodeType":"YulLiteral","src":"11284:2:31","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"11272:3:31","nodeType":"YulIdentifier","src":"11272:3:31"},"nativeSrc":"11272:15:31","nodeType":"YulFunctionCall","src":"11272:15:31"},{"kind":"number","nativeSrc":"11289:66:31","nodeType":"YulLiteral","src":"11289:66:31","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"11268:3:31","nodeType":"YulIdentifier","src":"11268:3:31"},"nativeSrc":"11268:88:31","nodeType":"YulFunctionCall","src":"11268:88:31"}],"functionName":{"name":"add","nativeSrc":"11253:3:31","nodeType":"YulIdentifier","src":"11253:3:31"},"nativeSrc":"11253:104:31","nodeType":"YulFunctionCall","src":"11253:104:31"},{"kind":"number","nativeSrc":"11359:2:31","nodeType":"YulLiteral","src":"11359:2:31","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11249:3:31","nodeType":"YulIdentifier","src":"11249:3:31"},"nativeSrc":"11249:113:31","nodeType":"YulFunctionCall","src":"11249:113:31"},"variableNames":[{"name":"tail","nativeSrc":"11241:4:31","nodeType":"YulIdentifier","src":"11241:4:31"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"10913:455:31","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11003:9:31","nodeType":"YulTypedName","src":"11003:9:31","type":""},{"name":"value0","nativeSrc":"11014:6:31","nodeType":"YulTypedName","src":"11014:6:31","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11025:4:31","nodeType":"YulTypedName","src":"11025:4:31","type":""}],"src":"10913:455:31"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$723__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1243_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1162_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1243(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1162(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":31,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"587":[{"length":32,"start":242},{"length":32,"start":380},{"length":32,"start":2943},{"length":32,"start":3005},{"length":32,"start":3313},{"length":32,"start":3449}]},"linkReferences":{},"object":"608060405234801561000f575f80fd5b50600436106100c4575f3560e01c806361dfdae61161007d578063c3666c3611610058578063c3666c36146101e9578063f2fde38b146101fc578063f7ba94bd1461020f575f80fd5b806361dfdae6146101b957806373c8a958146101ce5780638da5cb5b146101e1575f80fd5b80632bb14104116100ad5780632bb141041461013757806331e66e1e14610156578063572b6c051461016c575f80fd5b806301ffc9a7146100c85780632b4c9f16146100f0575b5f80fd5b6100db6100d6366004611139565b610222565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e7565b5f546101129073ffffffffffffffffffffffffffffffffffffffff1681565b61015e61023b565b6040516100e792919061117f565b6100db61017a3660046111ec565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101cc6101c73660046111ec565b61024d565b005b6101cc6101dc36600461124f565b61032b565b61011261041f565b6101cc6101f736600461124f565b61044a565b6101cc61020a3660046111ec565b6105bb565b6101cc61021d3660046112e2565b6105d9565b5f6102358261022f610696565b906106c3565b92915050565b365f61024561079a565b915091509091565b73ffffffffffffffffffffffffffffffffffffffff811661029a576040517ff6a5e70400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102b36102a56107a4565b6102ad6107ad565b906107da565b5f80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150565b6103366102a56107a4565b8483811415806103465750808214155b1561037d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b8181146104155761040d88888381811061039b5761039b611349565b90506020020160208101906103b091906111ec565b8585848181106103c2576103c2611349565b905060200201358888858181106103db576103db611349565b90506020020160208101906103f091906111ec565b73ffffffffffffffffffffffffffffffffffffffff16919061084e565b60010161037f565b5050505050505050565b5f61044561042b6107ad565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6104556102a56107a4565b8483811415806104655750808214155b1561049c576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610415578585828181106104b7576104b7611349565b90506020020160208101906104cc91906111ec565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106104fa576104fa611349565b905060200201602081019061050f91906111ec565b87878681811061052157610521611349565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b15801561059a575f80fd5b505af11580156105ac573d5f803e3d5ffd5b5050505080600101905061049e565b6105d66105c66107a4565b826105cf6107ad565b91906108e0565b50565b6105e46102a56107a4565b8281811461061e576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b81811461068e5761068684848381811061063c5761063c611349565b9050602002013587878481811061065557610655611349565b905060200201602081019061066a91906111ec565b73ffffffffffffffffffffffffffffffffffffffff16906109f4565b600101610620565b505050505050565b5f8061023560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611376565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161071157505f610235565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161076257506001610235565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b365f610245610b4a565b5f610445610caf565b5f8061023560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611376565b815473ffffffffffffffffffffffffffffffffffffffff82811691161461084a576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526108db908490610df3565b505050565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461094d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610841565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109ee5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35b50505050565b80471015610a5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610841565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114610ab4576040519150601f19603f3d011682016040523d82523d5f602084013e610ab9565b606091505b50509050806108db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610841565b365f33321480610b5a5750601836105b15610b6757505f91369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610c9a575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015610c76573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c9a91906113ae565b15610ca757610245610f00565b505f91369150565b5f33321480610cbe5750601836105b15610cc857503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610de257506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610dbe573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610de291906113ae565b15610dec57919050565b3391505090565b5f610e54826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f309092919063ffffffff16565b905080515f1480610e74575080806020019051810190610e7491906113ae565b6108db576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610841565b365f6102457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec83018284816113cd565b6060610f3e84845f85610f46565b949350505050565b606082471015610fd8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610841565b5f808673ffffffffffffffffffffffffffffffffffffffff1685876040516110009190611416565b5f6040518083038185875af1925050503d805f811461103a576040519150601f19603f3d011682016040523d82523d5f602084013e61103f565b606091505b50915091506110508783838761105b565b979650505050505050565b606083156110f05782515f036110e95773ffffffffffffffffffffffffffffffffffffffff85163b6110e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610841565b5081610f3e565b610f3e83838151156111055781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108419190611431565b5f60208284031215611149575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611178575f80fd5b9392505050565b60208152816020820152818360408301375f818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b73ffffffffffffffffffffffffffffffffffffffff811681146105d6575f80fd5b5f602082840312156111fc575f80fd5b8135611178816111cb565b5f8083601f840112611217575f80fd5b50813567ffffffffffffffff81111561122e575f80fd5b6020830191508360208260051b8501011115611248575f80fd5b9250929050565b5f805f805f8060608789031215611264575f80fd5b863567ffffffffffffffff8082111561127b575f80fd5b6112878a838b01611207565b9098509650602089013591508082111561129f575f80fd5b6112ab8a838b01611207565b909650945060408901359150808211156112c3575f80fd5b506112d089828a01611207565b979a9699509497509295939492505050565b5f805f80604085870312156112f5575f80fd5b843567ffffffffffffffff8082111561130c575f80fd5b61131888838901611207565b90965094506020870135915080821115611330575f80fd5b5061133d87828801611207565b95989497509550505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b81810381811115610235577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f602082840312156113be575f80fd5b81518015158114611178575f80fd5b5f80858511156113db575f80fd5b838611156113e7575f80fd5b5050820193919092039150565b5f5b8381101561140e5781810151838201526020016113f6565b50505f910152565b5f82516114278184602087016113f4565b9190910192915050565b602081525f825180602084015261144f8160408501602087016113f4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212207b53cb29681a9123eafe42ab444dba72bff4c3da1cb3f8bad5874939944652b264736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC4 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61DFDAE6 GT PUSH2 0x7D JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x58 JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x20F JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x1B9 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xAD JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x137 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x16C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xF0 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xDB PUSH2 0xD6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1139 JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE7 JUMP JUMPDEST PUSH0 SLOAD PUSH2 0x112 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x15E PUSH2 0x23B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP3 SWAP2 SWAP1 PUSH2 0x117F JUMP JUMPDEST PUSH2 0xDB PUSH2 0x17A CALLDATASIZE PUSH1 0x4 PUSH2 0x11EC JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x24D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1CC PUSH2 0x1DC CALLDATASIZE PUSH1 0x4 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x32B JUMP JUMPDEST PUSH2 0x112 PUSH2 0x41F JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x124F JUMP JUMPDEST PUSH2 0x44A JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0x11EC JUMP JUMPDEST PUSH2 0x5BB JUMP JUMPDEST PUSH2 0x1CC PUSH2 0x21D CALLDATASIZE PUSH1 0x4 PUSH2 0x12E2 JUMP JUMPDEST PUSH2 0x5D9 JUMP JUMPDEST PUSH0 PUSH2 0x235 DUP3 PUSH2 0x22F PUSH2 0x696 JUMP JUMPDEST SWAP1 PUSH2 0x6C3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x245 PUSH2 0x79A JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x29A JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2B3 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST PUSH2 0x2AD PUSH2 0x7AD JUMP JUMPDEST SWAP1 PUSH2 0x7DA JUMP JUMPDEST PUSH0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x336 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x346 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x37D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x415 JUMPI PUSH2 0x40D DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x39B JUMPI PUSH2 0x39B PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3B0 SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x3C2 JUMPI PUSH2 0x3C2 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x3DB JUMPI PUSH2 0x3DB PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x3F0 SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x84E JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x37F JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x445 PUSH2 0x42B PUSH2 0x7AD JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x455 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x465 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x49C JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x415 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x4B7 JUMPI PUSH2 0x4B7 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x4CC SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x4FA JUMPI PUSH2 0x4FA PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x521 JUMPI PUSH2 0x521 PUSH2 0x1349 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x59A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5AC JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x49E JUMP JUMPDEST PUSH2 0x5D6 PUSH2 0x5C6 PUSH2 0x7A4 JUMP JUMPDEST DUP3 PUSH2 0x5CF PUSH2 0x7AD JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8E0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x5E4 PUSH2 0x2A5 PUSH2 0x7A4 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x61E JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x68E JUMPI PUSH2 0x686 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x63C JUMPI PUSH2 0x63C PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x655 JUMPI PUSH2 0x655 PUSH2 0x1349 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x66A SWAP2 SWAP1 PUSH2 0x11EC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x9F4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x620 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x235 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1376 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x711 JUMPI POP PUSH0 PUSH2 0x235 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x762 JUMPI POP PUSH1 0x1 PUSH2 0x235 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x245 PUSH2 0xB4A JUMP JUMPDEST PUSH0 PUSH2 0x445 PUSH2 0xCAF JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x235 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1376 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x84A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x8DB SWAP1 DUP5 SWAP1 PUSH2 0xDF3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x94D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x841 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x9EE JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xA5E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x841 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0xAB4 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xAB9 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x841 JUMP JUMPDEST CALLDATASIZE PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0xB5A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB67 JUMPI POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xC9A JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC76 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC9A SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST ISZERO PUSH2 0xCA7 JUMPI PUSH2 0x245 PUSH2 0xF00 JUMP JUMPDEST POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0xCBE JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCC8 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xDE2 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDBE JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDE2 SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST ISZERO PUSH2 0xDEC JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xE54 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xF30 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0xE74 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE74 SWAP2 SWAP1 PUSH2 0x13AE JUMP JUMPDEST PUSH2 0x8DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x841 JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x245 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x13CD JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF3E DUP5 DUP5 PUSH0 DUP6 PUSH2 0xF46 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xFD8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x841 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1000 SWAP2 SWAP1 PUSH2 0x1416 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x103A JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x103F JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1050 DUP8 DUP4 DUP4 DUP8 PUSH2 0x105B JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x10F0 JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0x10E9 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x10E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x841 JUMP JUMPDEST POP DUP2 PUSH2 0xF3E JUMP JUMPDEST PUSH2 0xF3E DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x1105 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x841 SWAP2 SWAP1 PUSH2 0x1431 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1149 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1178 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5D6 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11FC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1178 DUP2 PUSH2 0x11CB JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1217 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x122E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1248 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1264 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x127B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1287 DUP11 DUP4 DUP12 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x129F JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x12AB DUP11 DUP4 DUP12 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x12C3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x12D0 DUP10 DUP3 DUP11 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x12F5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x130C JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1318 DUP9 DUP4 DUP10 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1330 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x133D DUP8 DUP3 DUP9 ADD PUSH2 0x1207 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x235 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x13BE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1178 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x13DB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x13E7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x140E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x13F6 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x1427 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x13F4 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x144F DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x13F4 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH28 0x53CB29681A9123EAFE42AB444DBA72BFF4C3DA1CB3F8BAD587493994 CHAINID MSTORE 0xB2 PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"221:248:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:31;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;728:115:11;817:19;728:115;;;745:42:31;733:55;;;715:74;;703:2;688:18;728:115:11;543:252:31;951:21:29;;;;;;;;;373:94:30;;;:::i;:::-;;;;;;;;:::i;878:149:11:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1303:237:29;;;;;;:::i;:::-;;:::i;:::-;;3158:509:19;;;;;;:::i;:::-;;:::i;710:120:2:-;;;:::i;4445:538:19:-;;;;;;:::i;:::-;;:::i;864:152:2:-;;;;;;:::i;:::-;;:::i;1942:447:19:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;373:94:30:-;417:14;;450:10;:8;:10::i;:::-;443:17;;;;373:94;;:::o;1303:237:29:-;1357:18;;;1353:48;;1384:17;;;;;;;;;;;;;;1353:48;1411:70;1468:12;:10;:12::i;:::-;1411:33;:31;:33::i;:::-;:56;;:70::i;:::-;1492:6;:13;;;;;;;;;;;;;1520;;715:74:31;;;1520:13:29;;703:2:31;688:18;1520:13:29;;;;;;;1303:237;:::o;3158:509:19:-;3291:70;3348:12;:10;:12::i;3291:70::-;3388:8;3417:23;;;;;:51;;-1:-1:-1;3444:24:19;;;;3417:51;3413:90;;;3477:26;;;;;;;;;;;;;;3413:90;3542:9;3537:114;3558:6;3553:1;:11;3537:114;;3589:47;3612:8;;3621:1;3612:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3625:7;;3633:1;3625:10;;;;;;;:::i;:::-;;;;;;;3589:6;;3596:1;3589:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3566:3;;3537:114;;;;3281:386;3158:509;;;;;;:::o;710:120:2:-;756:7;782:41;:33;:31;:33::i;:::-;3515:15:6;;;;3419:118;782:41:2;775:48;;710:120;:::o;4445:538:19:-;4584:70;4641:12;:10;:12::i;4584:70::-;4681:8;4710:26;;;;;:55;;-1:-1:-1;4740:25:19;;;;4710:55;4706:94;;;4774:26;;;;;;;;;;;;;;4706:94;4839:9;4834:133;4855:6;4850:1;:11;4834:133;;4886:9;;4896:1;4886:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4920:4;4927:8;;4936:1;4927:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4940:8;;4949:1;4940:11;;;;;;;:::i;:::-;4886:66;;;;;;;;;;6205:42:31;6274:15;;;4886:66:19;;;6256:34:31;6326:15;;;;6306:18;;;6299:43;-1:-1:-1;4940:11:19;;;;;;6358:18:31;;;6351:34;6168:18;;4886:66:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4863:3;;;;;4834:133;;864:152:2;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1942:447:19:-;2054:70;2111:12;:10;:12::i;2054:70::-;2151:8;2180:24;;;2176:63;;2213:26;;;;;;;;;;;;;;2176:63;2278:9;2273:100;2294:6;2289:1;:11;2273:100;;2325:33;2347:7;;2355:1;2347:10;;;;;;;:::i;:::-;;;;;;;2325:8;;2334:1;2325:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2302:3;;2273:100;;;;2044:345;1942:447;;;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1825:178:29:-;1924:14;;1957:39;:37;:39::i;1595:175::-;1696:7;1722:41;:39;:41::i;4865:174:6:-;4906:16;;761:71;831:1;769:58;761:71;:::i;4189:162::-;4295:15;;;4284:26;;;4295:15;;4284:26;4280:64;;4319:25;;;;;745:42:31;733:55;;4319:25:6;;;715:74:31;688:18;;4319:25:6;;;;;;;;4280:64;4189:162;;:::o;941:175:25:-;1050:58;;;7147:42:31;7135:55;;1050:58:25;;;7117:74:31;7207:18;;;;7200:34;;;1050:58:25;;;;;;;;;;7090:18:31;;;;1050:58:25;;;;;;;;;;1073:23;1050:58;;;1023:86;;1043:5;;1023:19;:86::i;:::-;941:175;;;:::o;2909:383:6:-;3031:15;;;;;;;3060:23;;;;3056:60;;3092:24;;;;;745:42:31;733:55;;3092:24:6;;;715:74:31;688:18;;3092:24:6;543:252:31;3056:60:6;3147:8;3130:25;;:13;:25;;;3126:160;;3171:26;;;;;;;;;;;;;3216:59;;;;;;;;-1:-1:-1;;3216:59:6;3126:160;2997:295;2909:383;;;:::o;2647:312:26:-;2761:6;2736:21;:31;;2728:73;;;;;;;7447:2:31;2728:73:26;;;7429:21:31;7486:2;7466:18;;;7459:30;7525:31;7505:18;;;7498:59;7574:18;;2728:73:26;7245:353:31;2728:73:26;2813:12;2831:9;:14;;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;;;;8015:2:31;2874:78:26;;;7997:21:31;8054:2;8034:18;;;8027:30;8093:34;8073:18;;;8066:62;8164:28;8144:18;;;8137:56;8210:19;;2874:78:26;7813:422:31;1643:735:12;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:12;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:12;;;;-1:-1:-1;1643:735:12:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:12;:19;:39;;466:14:15;462:23;;449:37;445:2;441:46;2207:80:12;;;;;;;;;;8424:42:31;8493:15;;;2207:80:12;;;8475:34:31;2276:10:12;8525:18:31;;;8518:43;8387:18;;2207:80:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:12;;;;-1:-1:-1;1643:735:12:o;784:745::-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;8493:15:31;;;1396:59:12;;;8475:34:31;1444:10:12;8525:18:31;;;8518:43;1396:19:12;:39;;;;8387:18:31;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;5196:642:25:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;9056:2:31;5720:111:25;;;9038:21:31;9095:2;9075:18;;;9068:30;9134:34;9114:18;;;9107:62;9205:12;9185:18;;;9178:40;9235:19;;5720:111:25;8854:406:31;616:152:15;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;4108:223:26:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:26:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;9803:2:31;5354:81:26;;;9785:21:31;9842:2;9822:18;;;9815:30;9881:34;9861:18;;;9854:62;9952:8;9932:18;;;9925:36;9978:19;;5354:81:26;9601:402:31;5354:81:26;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:26:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;10757:2:31;8113:60:26;;;10739:21:31;10796:2;10776:18;;;10769:30;10835:31;10815:18;;;10808:59;10884:18;;8113:60:26;10555:353:31;8113:60:26;-1:-1:-1;8208:10:26;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:31:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:31:o;1031:447::-;1188:2;1177:9;1170:21;1227:6;1222:2;1211:9;1207:18;1200:34;1284:6;1276;1271:2;1260:9;1256:18;1243:48;1340:1;1311:22;;;1335:2;1307:31;;;1300:42;;;;1394:2;1382:15;;;1399:66;1378:88;1363:104;1359:113;;1031:447;-1:-1:-1;1031:447:31:o;1483:154::-;1569:42;1562:5;1558:54;1551:5;1548:65;1538:93;;1627:1;1624;1617:12;1642:247;1701:6;1754:2;1742:9;1733:7;1729:23;1725:32;1722:52;;;1770:1;1767;1760:12;1722:52;1809:9;1796:23;1828:31;1853:5;1828:31;:::i;1894:367::-;1957:8;1967:6;2021:3;2014:4;2006:6;2002:17;1998:27;1988:55;;2039:1;2036;2029:12;1988:55;-1:-1:-1;2062:20:31;;2105:18;2094:30;;2091:50;;;2137:1;2134;2127:12;2091:50;2174:4;2166:6;2162:17;2150:29;;2234:3;2227:4;2217:6;2214:1;2210:14;2202:6;2198:27;2194:38;2191:47;2188:67;;;2251:1;2248;2241:12;2188:67;1894:367;;;;;:::o;2266:1103::-;2439:6;2447;2455;2463;2471;2479;2532:2;2520:9;2511:7;2507:23;2503:32;2500:52;;;2548:1;2545;2538:12;2500:52;2588:9;2575:23;2617:18;2658:2;2650:6;2647:14;2644:34;;;2674:1;2671;2664:12;2644:34;2713:70;2775:7;2766:6;2755:9;2751:22;2713:70;:::i;:::-;2802:8;;-1:-1:-1;2687:96:31;-1:-1:-1;2890:2:31;2875:18;;2862:32;;-1:-1:-1;2906:16:31;;;2903:36;;;2935:1;2932;2925:12;2903:36;2974:72;3038:7;3027:8;3016:9;3012:24;2974:72;:::i;:::-;3065:8;;-1:-1:-1;2948:98:31;-1:-1:-1;3153:2:31;3138:18;;3125:32;;-1:-1:-1;3169:16:31;;;3166:36;;;3198:1;3195;3188:12;3166:36;;3237:72;3301:7;3290:8;3279:9;3275:24;3237:72;:::i;:::-;2266:1103;;;;-1:-1:-1;2266:1103:31;;-1:-1:-1;2266:1103:31;;3328:8;;2266:1103;-1:-1:-1;;;2266:1103:31:o;4483:781::-;4613:6;4621;4629;4637;4690:2;4678:9;4669:7;4665:23;4661:32;4658:52;;;4706:1;4703;4696:12;4658:52;4746:9;4733:23;4775:18;4816:2;4808:6;4805:14;4802:34;;;4832:1;4829;4822:12;4802:34;4871:70;4933:7;4924:6;4913:9;4909:22;4871:70;:::i;:::-;4960:8;;-1:-1:-1;4845:96:31;-1:-1:-1;5048:2:31;5033:18;;5020:32;;-1:-1:-1;5064:16:31;;;5061:36;;;5093:1;5090;5083:12;5061:36;;5132:72;5196:7;5185:8;5174:9;5170:24;5132:72;:::i;:::-;4483:781;;;;-1:-1:-1;5223:8:31;-1:-1:-1;;;;4483:781:31:o;5269:184::-;5321:77;5318:1;5311:88;5418:4;5415:1;5408:15;5442:4;5439:1;5432:15;6656:282;6723:9;;;6744:11;;;6741:191;;;6788:77;6785:1;6778:88;6889:4;6886:1;6879:15;6917:4;6914:1;6907:15;8572:277;8639:6;8692:2;8680:9;8671:7;8667:23;8663:32;8660:52;;;8708:1;8705;8698:12;8660:52;8740:9;8734:16;8793:5;8786:13;8779:21;8772:5;8769:32;8759:60;;8815:1;8812;8805:12;9265:331;9370:9;9381;9423:8;9411:10;9408:24;9405:44;;;9445:1;9442;9435:12;9405:44;9474:6;9464:8;9461:20;9458:40;;;9494:1;9491;9484:12;9458:40;-1:-1:-1;;9520:23:31;;;9565:25;;;;;-1:-1:-1;9265:331:31:o;10008:250::-;10093:1;10103:113;10117:6;10114:1;10111:13;10103:113;;;10193:11;;;10187:18;10174:11;;;10167:39;10139:2;10132:10;10103:113;;;-1:-1:-1;;10250:1:31;10232:16;;10225:27;10008:250::o;10263:287::-;10392:3;10430:6;10424:13;10446:66;10505:6;10500:3;10493:4;10485:6;10481:17;10446:66;:::i;:::-;10528:16;;;;;10263:287;-1:-1:-1;;10263:287:31:o;10913:455::-;11062:2;11051:9;11044:21;11025:4;11094:6;11088:13;11137:6;11132:2;11121:9;11117:18;11110:34;11153:79;11225:6;11220:2;11209:9;11205:18;11200:2;11192:6;11188:15;11153:79;:::i;:::-;11284:2;11272:15;11289:66;11268:88;11253:104;;;;11359:2;11249:113;;10913:455;-1:-1:-1;;10913:455:31:o"},"gasEstimates":{"creation":{"codeDepositCost":"1060600","executionCost":"infinite","totalCost":"infinite"},"external":{"__msgData()":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","myData()":"2334","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","setData(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"__msgData()":"31e66e1e","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","myData()":"2bb14104","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","setData(address)":"61dfdae6","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MyContractMock.sol\":\"MyContractMock\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0xc68901b6a406156255814a3eb864c25a85070de51560f21f3f62090a7ba9b342\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x9f49dec6ab95d7ad99055eee9e70ad8e4300bdabf2c85c20f9f5f0c6269a6c0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4ec7061f8fcf77dc81cd485b96761e72efad45940b4c170dabc64d3b420f0412\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/MyContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\ncontract MyContract is TokenRecovery, ForwarderRegistryContext {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    address public myData;\\n\\n    event DataSet(address data);\\n\\n    error InvalidZeroData();\\n\\n    constructor(address data, IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        if (data == address(0)) revert InvalidZeroData();\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    function setData(address data) external {\\n        if (data == address(0)) revert InvalidZeroData();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x0c2fd43bf8856b2510a85e18da7aac41614434ca56f738a52c139dac6370503b\",\"license\":\"MIT\"},\"contracts/mocks/MyContractMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {MyContract} from \\\"./../MyContract.sol\\\";\\n\\ncontract MyContractMock is MyContract {\\n    constructor(address data, IForwarderRegistry forwarderRegistry) MyContract(data, forwarderRegistry) {}\\n\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x583f4d964302a655f4bd851e3cdb90f9a93d7e47c740f72f994ad8dfacf81d5c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2143,"contract":"contracts/mocks/MyContractMock.sol:MyContractMock","label":"myData","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}