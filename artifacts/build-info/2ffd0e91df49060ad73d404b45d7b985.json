{"id":"2ffd0e91df49060ad73d404b45d7b985","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the pending contract owner but is required to.\n/// @param account The account that was checked.\nerror NotPendingContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n/// @notice Emitted when a new contract owner is pending.\n/// @param pendingOwner the address of the new contract owner.\nevent OwnershipTransferPending(address indexed pendingOwner);\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (\n            msg.sender == address(_FORWARDER_REGISTRY) ||\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\n        ) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Meta-Transactions Forwarder Registry.\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @param target The target contract.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ITokenRecovery} from \"./../interfaces/ITokenRecovery.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {TokenRecoveryLibrary} from \"./../libraries/TokenRecoveryLibrary.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\n    }\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\n    }\n\n    /// @inheritdoc ITokenRecovery\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\n\n/// @title Uniquely identified seals management.\ninterface ITokenRecovery {\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InconsistentArrayLengths} from \"./../../CommonErrors.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {IERC165} from \"./../../introspection/interfaces/IERC165.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary TokenRecoveryLibrary {\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\n    /// @param tokenContract The token contract being recovered.\n    error IncorrectTokenContractType(address tokenContract);\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\n        uint256 length = accounts.length;\n        if (length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            accounts[i].sendValue(amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\n        uint256 length = accounts.length;\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\n        uint256 length = accounts.length;\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            IERC721 tokenContract = contracts[i];\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\n                revert IncorrectTokenContractType(address(tokenContract));\n            }\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary Address {\n    /// @notice Checks if the address is a deployed smart contract.\n    /// @param addr The address to check.\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\n    function hasBytecode(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size != 0;\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            _revert(returndata);\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            assembly (\"memory-safe\") {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n *\n * _Available since v5.1._\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n\n    /**\n     * @dev A necessary precompile is missing.\n     */\n    error MissingPrecompile(address);\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/mocks/MyContractMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {MyContract} from \"./../MyContract.sol\";\n\ncontract MyContractMock is MyContract {\n    constructor(address data, IForwarderRegistry forwarderRegistry) MyContract(data, forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"},"contracts/MyContract.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n\ncontract MyContract is TokenRecovery, ForwarderRegistryContext {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    address public myData;\n\n    event DataSet(address data);\n\n    error InvalidZeroData();\n\n    constructor(address data, IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\n        if (data == address(0)) revert InvalidZeroData();\n        myData = data;\n        emit DataSet(data);\n    }\n\n    function setData(address data) external {\n        if (data == address(0)) revert InvalidZeroData();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        myData = data;\n        emit DataSet(data);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7],"TransferFailed":[10]},"id":11,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"},{"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"286:52:0","text":"@notice Thrown when an ETH transfer has failed."},"errorSelector":"90b8ec18","id":10,"name":"TransferFailed","nameLocation":"344:14:0","nodeType":"ErrorDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"358:2:0"},"src":"338:23:0"}],"src":"32:330:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[43],"ContractOwnershipBase":[91],"ContractOwnershipStorage":[405],"InterfaceDetection":[435]},"id":44,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":12,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":14,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":44,"sourceUnit":406,"src":"58:82:1","symbolAliases":[{"foreign":{"id":13,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"66:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":16,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":44,"sourceUnit":92,"src":"141:71:1","symbolAliases":[{"foreign":{"id":15,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":91,"src":"149:21:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":18,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":44,"sourceUnit":436,"src":"213:77:1","symbolAliases":[{"foreign":{"id":17,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":435,"src":"221:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":20,"name":"ContractOwnershipBase","nameLocations":["549:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":91,"src":"549:21:1"},"id":21,"nodeType":"InheritanceSpecifier","src":"549:21:1"},{"baseName":{"id":22,"name":"InterfaceDetection","nameLocations":["572:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":435,"src":"572:18:1"},"id":23,"nodeType":"InheritanceSpecifier","src":"572:18:1"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":19,"nodeType":"StructuredDocumentation","src":"292:218:1","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":43,"linearizedBaseContracts":[43,435,452,91,2205,147],"name":"ContractOwnership","nameLocation":"528:17:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":27,"libraryName":{"id":24,"name":"ContractOwnershipStorage","nameLocations":["603:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":405,"src":"603:24:1"},"nodeType":"UsingForDirective","src":"597:67:1","typeName":{"id":26,"nodeType":"UserDefinedTypeName","pathNode":{"id":25,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:1","657:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"632:31:1"},"referencedDeclaration":178,"src":"632:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":41,"nodeType":"Block","src":"998:80:1","statements":[{"expression":{"arguments":[{"id":38,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"1058:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":33,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1008:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$405_$","typeString":"type(library ContractOwnershipStorage)"}},"id":35,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":404,"src":"1008:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":37,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:1","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":248,"src":"1008:49:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$178_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":39,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":40,"nodeType":"ExpressionStatement","src":"1008:63:1"}]},"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"670:289:1","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":42,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:1","nodeType":"VariableDeclaration","scope":42,"src":"976:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":29,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:1"},"returnParameters":{"id":32,"nodeType":"ParameterList","parameters":[],"src":"998:0:1"},"scope":43,"src":"964:114:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":44,"src":"510:570:1","usedErrors":[105,440],"usedEvents":[126]}],"src":"32:1049:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[2205],"ContractOwnershipBase":[91],"ContractOwnershipStorage":[405],"IERC173":[147]},"id":92,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":45,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":47,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":92,"sourceUnit":148,"src":"58:52:2","symbolAliases":[{"foreign":{"id":46,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"66:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":49,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":92,"sourceUnit":406,"src":"111:85:2","symbolAliases":[{"foreign":{"id":48,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"119:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":51,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":92,"sourceUnit":2206,"src":"197:66:2","symbolAliases":[{"foreign":{"id":50,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"205:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":53,"name":"IERC173","nameLocations":["586:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"586:7:2"},"id":54,"nodeType":"InheritanceSpecifier","src":"586:7:2"},{"baseName":{"id":55,"name":"Context","nameLocations":["595:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2205,"src":"595:7:2"},"id":56,"nodeType":"InheritanceSpecifier","src":"595:7:2"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"265:278:2","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":91,"linearizedBaseContracts":[91,2205,147],"name":"ContractOwnershipBase","nameLocation":"561:21:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":60,"libraryName":{"id":57,"name":"ContractOwnershipStorage","nameLocations":["615:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":405,"src":"615:24:2"},"nodeType":"UsingForDirective","src":"609:67:2","typeName":{"id":59,"nodeType":"UserDefinedTypeName","pathNode":{"id":58,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:2","669:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"644:31:2"},"referencedDeclaration":178,"src":"644:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[146],"body":{"id":72,"nodeType":"Block","src":"765:65:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":66,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"782:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$405_$","typeString":"type(library ContractOwnershipStorage)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":404,"src":"782:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":68,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":69,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:2","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":325,"src":"782:39:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$178_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":65,"id":71,"nodeType":"Return","src":"775:48:2"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"682:23:2","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":73,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:2","nodeType":"FunctionDefinition","parameters":{"id":62,"nodeType":"ParameterList","parameters":[],"src":"724:2:2"},"returnParameters":{"id":65,"nodeType":"ParameterList","parameters":[{"constant":false,"id":64,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":73,"src":"756:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":63,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:2"},"scope":91,"src":"710:120:2","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[140],"body":{"id":89,"nodeType":"Block","src":"924:92:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":84,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"986:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":85,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":86,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"1000:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":79,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"934:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$405_$","typeString":"type(library ContractOwnershipStorage)"}},"id":81,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":404,"src":"934:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":83,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:2","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":312,"src":"934:51:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$178_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":87,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":88,"nodeType":"ExpressionStatement","src":"934:75:2"}]},"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"836:23:2","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":90,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:2","nodeType":"FunctionDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":76,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:2","nodeType":"VariableDeclaration","scope":90,"src":"891:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:2"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[],"src":"924:0:2"},"scope":91,"src":"864:152:2","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":92,"src":"543:475:2","usedErrors":[105],"usedEvents":[126]}],"src":"32:987:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[98]},"id":99,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":93,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":94,"nodeType":"StructuredDocumentation","src":"58:128:3","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":98,"name":"TargetIsNotAContract","nameLocation":"192:20:3","nodeType":"ErrorDefinition","parameters":{"id":97,"nodeType":"ParameterList","parameters":[{"constant":false,"id":96,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:3","nodeType":"VariableDeclaration","scope":98,"src":"213:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":95,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:3"},"src":"186:51:3"}],"src":"32:206:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[105],"NotPendingContractOwner":[110],"NotTargetContractOwner":[117]},"id":118,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":100,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:4"},{"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"58:130:4","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":105,"name":"NotContractOwner","nameLocation":"194:16:4","nodeType":"ErrorDefinition","parameters":{"id":104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":103,"mutability":"mutable","name":"account","nameLocation":"219:7:4","nodeType":"VariableDeclaration","scope":105,"src":"211:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":102,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:4"},"src":"188:40:4"},{"documentation":{"id":106,"nodeType":"StructuredDocumentation","src":"230:138:4","text":"@notice Thrown when an account is not the pending contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"61848752","id":110,"name":"NotPendingContractOwner","nameLocation":"374:23:4","nodeType":"ErrorDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":108,"mutability":"mutable","name":"account","nameLocation":"406:7:4","nodeType":"VariableDeclaration","scope":110,"src":"398:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"398:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"397:17:4"},"src":"368:47:4"},{"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"417:194:4","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":117,"name":"NotTargetContractOwner","nameLocation":"617:22:4","nodeType":"ErrorDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"targetContract","nameLocation":"648:14:4","nodeType":"VariableDeclaration","scope":117,"src":"640:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"account","nameLocation":"672:7:4","nodeType":"VariableDeclaration","scope":117,"src":"664:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:41:4"},"src":"611:70:4"}],"src":"32:650:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferPending":[131],"OwnershipTransferred":[126]},"id":132,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":119,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:5"},{"anonymous":false,"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"58:155:5","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":126,"name":"OwnershipTransferred","nameLocation":"219:20:5","nodeType":"EventDefinition","parameters":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":122,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:5","nodeType":"VariableDeclaration","scope":126,"src":"240:29:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":121,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":124,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:5","nodeType":"VariableDeclaration","scope":126,"src":"271:24:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":123,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:5"},"src":"213:84:5"},{"anonymous":false,"documentation":{"id":127,"nodeType":"StructuredDocumentation","src":"299:121:5","text":"@notice Emitted when a new contract owner is pending.\n @param pendingOwner the address of the new contract owner."},"eventSelector":"fcf6b9a1f453b7c06ba4f44b1f8c38b02e8b90a7bd35bd0d5c43e2deb547f568","id":131,"name":"OwnershipTransferPending","nameLocation":"426:24:5","nodeType":"EventDefinition","parameters":{"id":130,"nodeType":"ParameterList","parameters":[{"constant":false,"id":129,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"467:12:5","nodeType":"VariableDeclaration","scope":131,"src":"451:28:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":128,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:30:5"},"src":"420:61:5"}],"src":"32:450:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":133,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":134,"nodeType":"StructuredDocumentation","src":"58:182:6","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":147,"linearizedBaseContracts":[147],"name":"IERC173","nameLocation":"250:7:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"264:342:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":140,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:6","nodeType":"FunctionDefinition","parameters":{"id":138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:6","nodeType":"VariableDeclaration","scope":140,"src":"638:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":136,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:6"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[],"src":"664:0:6"},"scope":147,"src":"611:54:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"671:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":146,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:6","nodeType":"FunctionDefinition","parameters":{"id":142,"nodeType":"ParameterList","parameters":[],"src":"806:2:6"},"returnParameters":{"id":145,"nodeType":"ParameterList","parameters":[{"constant":false,"id":144,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:6","nodeType":"VariableDeclaration","scope":146,"src":"832:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":143,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:6"},"scope":147,"src":"792:63:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":148,"src":"240:617:6","usedErrors":[],"usedEvents":[]}],"src":"32:826:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[1338],"ContractOwnershipStorage":[405],"IERC173":[147],"InterfaceDetectionStorage":[553],"NotContractOwner":[105],"NotTargetContractOwner":[117],"OwnershipTransferred":[126],"ProxyInitialization":[843],"TargetIsNotAContract":[98]},"id":406,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":152,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":406,"sourceUnit":118,"src":"58:97:7","symbolAliases":[{"foreign":{"id":150,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"66:16:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":151,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"84:22:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":406,"sourceUnit":99,"src":"156:60:7","symbolAliases":[{"foreign":{"id":153,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"164:20:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":156,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":406,"sourceUnit":132,"src":"217:66:7","symbolAliases":[{"foreign":{"id":155,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"225:20:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":158,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":406,"sourceUnit":148,"src":"284:52:7","symbolAliases":[{"foreign":{"id":157,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"292:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","file":"./../../utils/libraries/Address.sol","id":160,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":406,"sourceUnit":1339,"src":"337:60:7","symbolAliases":[{"foreign":{"id":159,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"345:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":162,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":406,"sourceUnit":844,"src":"398:84:7","symbolAliases":[{"foreign":{"id":161,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"406:19:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":164,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":406,"sourceUnit":554,"src":"483:104:7","symbolAliases":[{"foreign":{"id":163,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"491:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":405,"linearizedBaseContracts":[405],"name":"ContractOwnershipStorage","nameLocation":"597:24:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":167,"libraryName":{"id":165,"name":"Address","nameLocations":["634:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":1338,"src":"634:7:7"},"nodeType":"UsingForDirective","src":"628:26:7","typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"646:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":171,"libraryName":{"id":168,"name":"ContractOwnershipStorage","nameLocations":["665:24:7"],"nodeType":"IdentifierPath","referencedDeclaration":405,"src":"665:24:7"},"nodeType":"UsingForDirective","src":"659:67:7","typeName":{"id":170,"nodeType":"UserDefinedTypeName","pathNode":{"id":169,"name":"ContractOwnershipStorage.Layout","nameLocations":["694:24:7","719:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"694:31:7"},"referencedDeclaration":178,"src":"694:31:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":175,"libraryName":{"id":172,"name":"InterfaceDetectionStorage","nameLocations":["737:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":553,"src":"737:25:7"},"nodeType":"UsingForDirective","src":"731:69:7","typeName":{"id":174,"nodeType":"UserDefinedTypeName","pathNode":{"id":173,"name":"InterfaceDetectionStorage.Layout","nameLocations":["767:25:7","793:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"767:32:7"},"referencedDeclaration":463,"src":"767:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":178,"members":[{"constant":false,"id":177,"mutability":"mutable","name":"contractOwner","nameLocation":"838:13:7","nodeType":"VariableDeclaration","scope":178,"src":"830:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":176,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"813:6:7","nodeType":"StructDefinition","scope":405,"src":"806:52:7","visibility":"public"},{"constant":true,"id":191,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"890:19:7","nodeType":"VariableDeclaration","scope":405,"src":"864:128:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":179,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"938:47:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":184,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"928:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"928:58:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"920:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":182,"name":"uint256","nodeType":"ElementaryTypeName","src":"920:7:7","typeDescriptions":{}}},"id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:67:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"920:71:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"912:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:7","typeDescriptions":{}}},"id":190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:80:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":204,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1024:21:7","nodeType":"VariableDeclaration","scope":405,"src":"998:128:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":192,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1074:45:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":197,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1064:9:7","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:56:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1056:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":195,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:7","typeDescriptions":{}}},"id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1124:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1056:69:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1048:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:7","typeDescriptions":{}}},"id":203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1048:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":247,"nodeType":"Block","src":"1635:267:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":213,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"1649:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":216,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1673:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":215,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":214,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:7","typeDescriptions":{}}},"id":217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":234,"nodeType":"IfStatement","src":"1645:152:7","trueBody":{"id":233,"nodeType":"Block","src":"1677:120:7","statements":[{"expression":{"id":223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":219,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"1691:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1693:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":177,"src":"1691:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":222,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"1709:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1691:30:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":224,"nodeType":"ExpressionStatement","src":"1691:30:7"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1769:1:7","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1761:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":226,"name":"address","nodeType":"ElementaryTypeName","src":"1761:7:7","typeDescriptions":{}}},"id":229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1761:10:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":230,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":210,"src":"1773:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":225,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1740:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":232,"nodeType":"EmitStatement","src":"1735:51:7"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":241,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"1868:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$147_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$147_$","typeString":"type(contract IERC173)"}],"id":240,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1863:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1863:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$147","typeString":"type(contract IERC173)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1877:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1863:25:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1890:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":235,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"1806:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$553_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1832:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":552,"src":"1806:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$463_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":239,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1841:21:7","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":506,"src":"1806:56:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$463_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$463_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:89:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":246,"nodeType":"ExpressionStatement","src":"1806:89:7"}]},"documentation":{"id":205,"nodeType":"StructuredDocumentation","src":"1133:423:7","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":248,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1570:15:7","nodeType":"FunctionDefinition","parameters":{"id":211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":208,"mutability":"mutable","name":"s","nameLocation":"1601:1:7","nodeType":"VariableDeclaration","scope":248,"src":"1586:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":207,"nodeType":"UserDefinedTypeName","pathNode":{"id":206,"name":"Layout","nameLocations":["1586:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"1586:6:7"},"referencedDeclaration":178,"src":"1586:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":210,"mutability":"mutable","name":"initialOwner","nameLocation":"1612:12:7","nodeType":"VariableDeclaration","scope":248,"src":"1604:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":209,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1585:40:7"},"returnParameters":{"id":212,"nodeType":"ParameterList","parameters":[],"src":"1635:0:7"},"scope":405,"src":"1561:341:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":270,"nodeType":"Block","src":"2567:112:7","statements":[{"expression":{"arguments":[{"id":260,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"2606:21:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":261,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2629:1:7","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":257,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"2577:19:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$843_$","typeString":"type(library ProxyInitialization)"}},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2597:8:7","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":842,"src":"2577:28:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:54:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":263,"nodeType":"ExpressionStatement","src":"2577:54:7"},{"expression":{"arguments":[{"id":267,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"2659:12:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":264,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"2641:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2643:15:7","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":248,"src":"2641:17:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$178_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":269,"nodeType":"ExpressionStatement","src":"2641:31:7"}]},"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"1908:586:7","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":271,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2508:9:7","nodeType":"FunctionDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"s","nameLocation":"2533:1:7","nodeType":"VariableDeclaration","scope":271,"src":"2518:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":251,"nodeType":"UserDefinedTypeName","pathNode":{"id":250,"name":"Layout","nameLocations":["2518:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"2518:6:7"},"referencedDeclaration":178,"src":"2518:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"initialOwner","nameLocation":"2544:12:7","nodeType":"VariableDeclaration","scope":271,"src":"2536:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":253,"name":"address","nodeType":"ElementaryTypeName","src":"2536:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2517:40:7"},"returnParameters":{"id":256,"nodeType":"ParameterList","parameters":[],"src":"2567:0:7"},"scope":405,"src":"2499:180:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":311,"nodeType":"Block","src":"3142:281:7","statements":[{"assignments":[283],"declarations":[{"constant":false,"id":283,"mutability":"mutable","name":"previousOwner","nameLocation":"3160:13:7","nodeType":"VariableDeclaration","scope":311,"src":"3152:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":282,"name":"address","nodeType":"ElementaryTypeName","src":"3152:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":286,"initialValue":{"expression":{"id":284,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"3176:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":285,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3178:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":177,"src":"3176:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3152:39:7"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":287,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"3205:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":288,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"3215:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3205:23:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":294,"nodeType":"IfStatement","src":"3201:60:7","trueBody":{"errorCall":{"arguments":[{"id":291,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"3254:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":290,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"3237:16:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3237:24:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":293,"nodeType":"RevertStatement","src":"3230:31:7"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":295,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"3275:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":296,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3292:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3275:25:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":310,"nodeType":"IfStatement","src":"3271:146:7","trueBody":{"id":309,"nodeType":"Block","src":"3302:115:7","statements":[{"expression":{"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":298,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":275,"src":"3316:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":300,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3318:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":177,"src":"3316:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":301,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3334:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3316:26:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":303,"nodeType":"ExpressionStatement","src":"3316:26:7"},{"eventCall":{"arguments":[{"id":305,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"3382:13:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":306,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":279,"src":"3397:8:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":304,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"3361:20:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3361:45:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":308,"nodeType":"EmitStatement","src":"3356:50:7"}]}}]},"documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"2685:364:7","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":312,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3063:17:7","nodeType":"FunctionDefinition","parameters":{"id":280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":275,"mutability":"mutable","name":"s","nameLocation":"3096:1:7","nodeType":"VariableDeclaration","scope":312,"src":"3081:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":274,"nodeType":"UserDefinedTypeName","pathNode":{"id":273,"name":"Layout","nameLocations":["3081:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"3081:6:7"},"referencedDeclaration":178,"src":"3081:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":277,"mutability":"mutable","name":"sender","nameLocation":"3107:6:7","nodeType":"VariableDeclaration","scope":312,"src":"3099:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":276,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":279,"mutability":"mutable","name":"newOwner","nameLocation":"3123:8:7","nodeType":"VariableDeclaration","scope":312,"src":"3115:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":278,"name":"address","nodeType":"ElementaryTypeName","src":"3115:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3080:52:7"},"returnParameters":{"id":281,"nodeType":"ParameterList","parameters":[],"src":"3142:0:7"},"scope":405,"src":"3054:369:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":324,"nodeType":"Block","src":"3629:39:7","statements":[{"expression":{"expression":{"id":321,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"3646:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3648:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":177,"src":"3646:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":320,"id":323,"nodeType":"Return","src":"3639:22:7"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"3429:116:7","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":325,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3559:5:7","nodeType":"FunctionDefinition","parameters":{"id":317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"s","nameLocation":"3580:1:7","nodeType":"VariableDeclaration","scope":325,"src":"3565:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":315,"nodeType":"UserDefinedTypeName","pathNode":{"id":314,"name":"Layout","nameLocations":["3565:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"3565:6:7"},"referencedDeclaration":178,"src":"3565:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3564:18:7"},"returnParameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":319,"mutability":"mutable","name":"contractOwner","nameLocation":"3614:13:7","nodeType":"VariableDeclaration","scope":325,"src":"3606:21:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"3606:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3605:23:7"},"scope":405,"src":"3550:118:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":352,"nodeType":"Block","src":"4064:154:7","statements":[{"condition":{"id":338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4078:29:7","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":335,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"4079:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4094:11:7","memberName":"hasBytecode","nodeType":"MemberAccess","referencedDeclaration":1337,"src":"4079:26:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4079:28:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":343,"nodeType":"IfStatement","src":"4074:78:7","trueBody":{"errorCall":{"arguments":[{"id":340,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"4137:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":339,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"4116:20:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4116:36:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":342,"nodeType":"RevertStatement","src":"4109:43:7"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":345,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"4177:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":344,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"4169:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$147_$","typeString":"type(contract IERC173)"}},"id":346,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:23:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$147","typeString":"contract IERC173"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4193:5:7","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":146,"src":"4169:29:7","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":349,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"4204:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4169:42:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":334,"id":351,"nodeType":"Return","src":"4162:49:7"}]},"documentation":{"id":326,"nodeType":"StructuredDocumentation","src":"3674:261:7","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":353,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3949:21:7","nodeType":"FunctionDefinition","parameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"targetContract","nameLocation":"3979:14:7","nodeType":"VariableDeclaration","scope":353,"src":"3971:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":327,"name":"address","nodeType":"ElementaryTypeName","src":"3971:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":330,"mutability":"mutable","name":"account","nameLocation":"4003:7:7","nodeType":"VariableDeclaration","scope":353,"src":"3995:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"3995:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3970:41:7"},"returnParameters":{"id":334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4040:22:7","nodeType":"VariableDeclaration","scope":353,"src":"4035:27:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":332,"name":"bool","nodeType":"ElementaryTypeName","src":"4035:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4034:29:7"},"scope":405,"src":"3940:278:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":371,"nodeType":"Block","src":"4489:81:7","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":362,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"4503:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":363,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"4514:1:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4516:13:7","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":177,"src":"4514:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4503:26:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":370,"nodeType":"IfStatement","src":"4499:64:7","trueBody":{"errorCall":{"arguments":[{"id":367,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":359,"src":"4555:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":366,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"4538:16:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4538:25:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":369,"nodeType":"RevertStatement","src":"4531:32:7"}}]},"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"4224:179:7","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":372,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4417:22:7","nodeType":"FunctionDefinition","parameters":{"id":360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"s","nameLocation":"4455:1:7","nodeType":"VariableDeclaration","scope":372,"src":"4440:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":356,"nodeType":"UserDefinedTypeName","pathNode":{"id":355,"name":"Layout","nameLocations":["4440:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"4440:6:7"},"referencedDeclaration":178,"src":"4440:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":359,"mutability":"mutable","name":"account","nameLocation":"4466:7:7","nodeType":"VariableDeclaration","scope":372,"src":"4458:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":358,"name":"address","nodeType":"ElementaryTypeName","src":"4458:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4439:35:7"},"returnParameters":{"id":361,"nodeType":"ParameterList","parameters":[],"src":"4489:0:7"},"scope":405,"src":"4408:162:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":391,"nodeType":"Block","src":"4930:124:7","statements":[{"condition":{"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4944:47:7","subExpression":{"arguments":[{"id":381,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"4967:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":382,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"4983:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":380,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"4945:21:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4945:46:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":390,"nodeType":"IfStatement","src":"4940:107:7","trueBody":{"errorCall":{"arguments":[{"id":386,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"5023:14:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":387,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"5039:7:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":385,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"5000:22:7","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$","typeString":"function (address,address) pure returns (error)"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5000:47:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":389,"nodeType":"RevertStatement","src":"4993:54:7"}}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"4576:256:7","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":392,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4846:28:7","nodeType":"FunctionDefinition","parameters":{"id":378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"targetContract","nameLocation":"4883:14:7","nodeType":"VariableDeclaration","scope":392,"src":"4875:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":374,"name":"address","nodeType":"ElementaryTypeName","src":"4875:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"account","nameLocation":"4907:7:7","nodeType":"VariableDeclaration","scope":392,"src":"4899:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":376,"name":"address","nodeType":"ElementaryTypeName","src":"4899:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4874:41:7"},"returnParameters":{"id":379,"nodeType":"ParameterList","parameters":[],"src":"4930:0:7"},"scope":405,"src":"4837:217:7","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":403,"nodeType":"Block","src":"5119:115:7","statements":[{"assignments":[399],"declarations":[{"constant":false,"id":399,"mutability":"mutable","name":"position","nameLocation":"5137:8:7","nodeType":"VariableDeclaration","scope":403,"src":"5129:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":398,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5129:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":401,"initialValue":{"id":400,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"5148:19:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5129:38:7"},{"AST":{"nativeSrc":"5186:42:7","nodeType":"YulBlock","src":"5186:42:7","statements":[{"nativeSrc":"5200:18:7","nodeType":"YulAssignment","src":"5200:18:7","value":{"name":"position","nativeSrc":"5210:8:7","nodeType":"YulIdentifier","src":"5210:8:7"},"variableNames":[{"name":"s.slot","nativeSrc":"5200:6:7","nodeType":"YulIdentifier","src":"5200:6:7"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":399,"isOffset":false,"isSlot":false,"src":"5210:8:7","valueSize":1},{"declaration":396,"isOffset":false,"isSlot":true,"src":"5200:6:7","suffix":"slot","valueSize":1}],"id":402,"nodeType":"InlineAssembly","src":"5177:51:7"}]},"id":404,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5069:6:7","nodeType":"FunctionDefinition","parameters":{"id":393,"nodeType":"ParameterList","parameters":[],"src":"5075:2:7"},"returnParameters":{"id":397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":396,"mutability":"mutable","name":"s","nameLocation":"5116:1:7","nodeType":"VariableDeclaration","scope":404,"src":"5101:16:7","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":395,"nodeType":"UserDefinedTypeName","pathNode":{"id":394,"name":"Layout","nameLocations":["5101:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"5101:6:7"},"referencedDeclaration":178,"src":"5101:6:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5100:18:7"},"scope":405,"src":"5060:174:7","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":406,"src":"589:4647:7","usedErrors":[],"usedEvents":[]}],"src":"32:5205:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[452],"InterfaceDetection":[435],"InterfaceDetectionStorage":[553]},"id":436,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":407,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":409,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":436,"sourceUnit":453,"src":"58:49:8","symbolAliases":[{"foreign":{"id":408,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"66:7:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":411,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":436,"sourceUnit":554,"src":"108:84:8","symbolAliases":[{"foreign":{"id":410,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"116:25:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":413,"name":"IERC165","nameLocations":["425:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"425:7:8"},"id":414,"nodeType":"InheritanceSpecifier","src":"425:7:8"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":412,"nodeType":"StructuredDocumentation","src":"194:191:8","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":435,"linearizedBaseContracts":[435,452],"name":"InterfaceDetection","nameLocation":"403:18:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":418,"libraryName":{"id":415,"name":"InterfaceDetectionStorage","nameLocations":["445:25:8"],"nodeType":"IdentifierPath","referencedDeclaration":553,"src":"445:25:8"},"nodeType":"UsingForDirective","src":"439:69:8","typeName":{"id":417,"nodeType":"UserDefinedTypeName","pathNode":{"id":416,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:8","501:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"475:32:8"},"referencedDeclaration":463,"src":"475:32:8","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[451],"body":{"id":433,"nodeType":"Block","src":"618:89:8","statements":[{"expression":{"arguments":[{"id":430,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":421,"src":"688:11:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":426,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"635:25:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$553_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:8","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":552,"src":"635:32:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$463_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":429,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:8","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":540,"src":"635:52:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$463_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$463_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":425,"id":432,"nodeType":"Return","src":"628:72:8"}]},"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"514:23:8","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":434,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:8","nodeType":"FunctionDefinition","parameters":{"id":422,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:8","nodeType":"VariableDeclaration","scope":434,"src":"569:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":420,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:8"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":424,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":434,"src":"612:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":423,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:8"},"scope":435,"src":"542:165:8","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":436,"src":"385:324:8","usedErrors":[],"usedEvents":[]}],"src":"32:678:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[440]},"id":441,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":437,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:9"},{"documentation":{"id":438,"nodeType":"StructuredDocumentation","src":"58:68:9","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":440,"name":"IllegalInterfaceId","nameLocation":"132:18:9","nodeType":"ErrorDefinition","parameters":{"id":439,"nodeType":"ParameterList","parameters":[],"src":"150:2:9"},"src":"126:27:9"}],"src":"32:122:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[452]},"id":453,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":442,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":443,"nodeType":"StructuredDocumentation","src":"58:173:10","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":452,"linearizedBaseContracts":[452],"name":"IERC165","nameLocation":"241:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":444,"nodeType":"StructuredDocumentation","src":"255:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":451,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:10","nodeType":"FunctionDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":446,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:10","nodeType":"VariableDeclaration","scope":451,"src":"627:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":445,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:10"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"supported","nameLocation":"675:9:10","nodeType":"VariableDeclaration","scope":451,"src":"670:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":448,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:10"},"scope":452,"src":"600:86:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":453,"src":"231:457:10","usedErrors":[],"usedEvents":[]}],"src":"32:657:10"},"id":10},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[452],"IllegalInterfaceId":[440],"InterfaceDetectionStorage":[553]},"id":554,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":454,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":456,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":554,"sourceUnit":441,"src":"58:76:11","symbolAliases":[{"foreign":{"id":455,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":458,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":554,"sourceUnit":453,"src":"135:52:11","symbolAliases":[{"foreign":{"id":457,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"143:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":553,"linearizedBaseContracts":[553],"name":"InterfaceDetectionStorage","nameLocation":"197:25:11","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":463,"members":[{"constant":false,"id":462,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:11","nodeType":"VariableDeclaration","scope":463,"src":"253:43:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":461,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":459,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":460,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:11","nodeType":"StructDefinition","scope":553,"src":"229:74:11","visibility":"public"},{"constant":true,"id":476,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:11","nodeType":"VariableDeclaration","scope":553,"src":"309:136:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":469,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":467,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:11","typeDescriptions":{}}},"id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":473,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":466,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":465,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:11","typeDescriptions":{}}},"id":475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":479,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:11","nodeType":"VariableDeclaration","scope":553,"src":"452:58:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":477,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:11","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":505,"nodeType":"Block","src":"867:141:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"881:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":491,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"896:20:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":496,"nodeType":"IfStatement","src":"877:68:11","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":493,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"925:18:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":495,"nodeType":"RevertStatement","src":"918:27:11"}},{"expression":{"id":503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":497,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"955:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":500,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:11","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":462,"src":"955:21:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":501,"indexExpression":{"id":499,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"977:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":502,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"992:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":504,"nodeType":"ExpressionStatement","src":"955:46:11"}]},"documentation":{"id":480,"nodeType":"StructuredDocumentation","src":"517:251:11","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":506,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:11","nodeType":"FunctionDefinition","parameters":{"id":488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":483,"mutability":"mutable","name":"s","nameLocation":"819:1:11","nodeType":"VariableDeclaration","scope":506,"src":"804:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":482,"nodeType":"UserDefinedTypeName","pathNode":{"id":481,"name":"Layout","nameLocations":["804:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"804:6:11"},"referencedDeclaration":463,"src":"804:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":485,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:11","nodeType":"VariableDeclaration","scope":506,"src":"822:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":484,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"supported","nameLocation":"847:9:11","nodeType":"VariableDeclaration","scope":506,"src":"842:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":486,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:11"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[],"src":"867:0:11"},"scope":553,"src":"773:235:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":539,"nodeType":"Block","src":"1463:236:11","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":517,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"1477:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":518,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"1492:20:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":523,"nodeType":"IfStatement","src":"1473:78:11","trueBody":{"id":522,"nodeType":"Block","src":"1514:37:11","statements":[{"expression":{"hexValue":"66616c7365","id":520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":516,"id":521,"nodeType":"Return","src":"1528:12:11"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":524,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"1564:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":526,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"1584:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$452_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$452_$","typeString":"type(contract IERC165)"}],"id":525,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:11","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$452","typeString":"type(contract IERC165)"}},"id":528,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:11","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":533,"nodeType":"IfStatement","src":"1560:82:11","trueBody":{"id":532,"nodeType":"Block","src":"1606:36:11","statements":[{"expression":{"hexValue":"74727565","id":530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":516,"id":531,"nodeType":"Return","src":"1620:11:11"}]}},{"expression":{"baseExpression":{"expression":{"id":534,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"1658:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":535,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:11","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":462,"src":"1658:21:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":537,"indexExpression":{"id":536,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"1680:11:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":516,"id":538,"nodeType":"Return","src":"1651:41:11"}]},"documentation":{"id":507,"nodeType":"StructuredDocumentation","src":"1014:340:11","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":540,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:11","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":510,"mutability":"mutable","name":"s","nameLocation":"1401:1:11","nodeType":"VariableDeclaration","scope":540,"src":"1386:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":509,"nodeType":"UserDefinedTypeName","pathNode":{"id":508,"name":"Layout","nameLocations":["1386:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"1386:6:11"},"referencedDeclaration":463,"src":"1386:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":512,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:11","nodeType":"VariableDeclaration","scope":540,"src":"1404:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":511,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:11"},"returnParameters":{"id":516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":515,"mutability":"mutable","name":"supported","nameLocation":"1452:9:11","nodeType":"VariableDeclaration","scope":540,"src":"1447:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":514,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:11"},"scope":553,"src":"1359:340:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":551,"nodeType":"Block","src":"1764:115:11","statements":[{"assignments":[547],"declarations":[{"constant":false,"id":547,"mutability":"mutable","name":"position","nameLocation":"1782:8:11","nodeType":"VariableDeclaration","scope":551,"src":"1774:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":546,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":549,"initialValue":{"id":548,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"1793:19:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:11"},{"AST":{"nativeSrc":"1831:42:11","nodeType":"YulBlock","src":"1831:42:11","statements":[{"nativeSrc":"1845:18:11","nodeType":"YulAssignment","src":"1845:18:11","value":{"name":"position","nativeSrc":"1855:8:11","nodeType":"YulIdentifier","src":"1855:8:11"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:11","nodeType":"YulIdentifier","src":"1845:6:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":547,"isOffset":false,"isSlot":false,"src":"1855:8:11","valueSize":1},{"declaration":544,"isOffset":false,"isSlot":true,"src":"1845:6:11","suffix":"slot","valueSize":1}],"id":550,"nodeType":"InlineAssembly","src":"1822:51:11"}]},"id":552,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:11","nodeType":"FunctionDefinition","parameters":{"id":541,"nodeType":"ParameterList","parameters":[],"src":"1720:2:11"},"returnParameters":{"id":545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":544,"mutability":"mutable","name":"s","nameLocation":"1761:1:11","nodeType":"VariableDeclaration","scope":552,"src":"1746:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":543,"nodeType":"UserDefinedTypeName","pathNode":{"id":542,"name":"Layout","nameLocations":["1746:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":463,"src":"1746:6:11"},"referencedDeclaration":463,"src":"1746:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$463_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:11"},"scope":553,"src":"1705:174:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":554,"src":"189:1692:11","usedErrors":[],"usedEvents":[]}],"src":"32:1850:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[602],"ForwarderRegistryContextBase":[730],"IERC2771":[742],"IForwarderRegistry":[758]},"id":603,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":555,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":557,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":603,"sourceUnit":759,"src":"58:71:12","symbolAliases":[{"foreign":{"id":556,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":559,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":603,"sourceUnit":743,"src":"130:51:12","symbolAliases":[{"foreign":{"id":558,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"138:8:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":561,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":603,"sourceUnit":731,"src":"182:85:12","symbolAliases":[{"foreign":{"id":560,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"190:28:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":563,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:12"],"nodeType":"IdentifierPath","referencedDeclaration":730,"src":"575:28:12"},"id":564,"nodeType":"InheritanceSpecifier","src":"575:28:12"},{"baseName":{"id":565,"name":"IERC2771","nameLocations":["605:8:12"],"nodeType":"IdentifierPath","referencedDeclaration":742,"src":"605:8:12"},"id":566,"nodeType":"InheritanceSpecifier","src":"605:8:12"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":562,"nodeType":"StructuredDocumentation","src":"269:260:12","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":602,"linearizedBaseContracts":[602,742,730],"name":"ForwarderRegistryContext","nameLocation":"547:24:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":575,"nodeType":"Block","src":"720:2:12","statements":[]},"id":576,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":572,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":569,"src":"700:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}}],"id":573,"kind":"baseConstructorSpecifier","modifierName":{"id":571,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:12"],"nodeType":"IdentifierPath","referencedDeclaration":730,"src":"671:28:12"},"nodeType":"ModifierInvocation","src":"671:48:12"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:12","nodeType":"VariableDeclaration","scope":576,"src":"632:37:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"},"typeName":{"id":568,"nodeType":"UserDefinedTypeName","pathNode":{"id":567,"name":"IForwarderRegistry","nameLocations":["632:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"632:18:12"},"referencedDeclaration":758,"src":"632:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:12"},"returnParameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"720:0:12"},"scope":602,"src":"620:102:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":584,"nodeType":"Block","src":"800:43:12","statements":[{"expression":{"id":582,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"817:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":581,"id":583,"nodeType":"Return","src":"810:26:12"}]},"functionSelector":"2b4c9f16","id":585,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:12","nodeType":"FunctionDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[],"src":"754:2:12"},"returnParameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":585,"src":"780:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"},"typeName":{"id":579,"nodeType":"UserDefinedTypeName","pathNode":{"id":578,"name":"IForwarderRegistry","nameLocations":["780:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"780:18:12"},"referencedDeclaration":758,"src":"780:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:12"},"scope":602,"src":"728:115:12","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[741],"body":{"id":600,"nodeType":"Block","src":"962:65:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":593,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"979:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":596,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"1000:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}],"id":595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:12","typeDescriptions":{}}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":592,"id":599,"nodeType":"Return","src":"972:48:12"}]},"documentation":{"id":586,"nodeType":"StructuredDocumentation","src":"849:24:12","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":601,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:12","nodeType":"FunctionDefinition","parameters":{"id":589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":588,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:12","nodeType":"VariableDeclaration","scope":601,"src":"906:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":587,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:12"},"returnParameters":{"id":592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":601,"src":"956:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":590,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:12"},"scope":602,"src":"878:149:12","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":603,"src":"529:500:12","usedErrors":[],"usedEvents":[]}],"src":"32:998:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[787],"ForwarderRegistryContextBase":[730],"IForwarderRegistry":[758]},"id":731,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":604,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":606,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":731,"sourceUnit":759,"src":"58:74:13","symbolAliases":[{"foreign":{"id":605,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"66:18:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":608,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":731,"sourceUnit":788,"src":"133:67:13","symbolAliases":[{"foreign":{"id":607,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"141:15:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":609,"nodeType":"StructuredDocumentation","src":"202:243:13","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":730,"linearizedBaseContracts":[730],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:13","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":612,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:13","nodeType":"VariableDeclaration","scope":730,"src":"498:57:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"},"typeName":{"id":611,"nodeType":"UserDefinedTypeName","pathNode":{"id":610,"name":"IForwarderRegistry","nameLocations":["498:18:13"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"498:18:13"},"referencedDeclaration":758,"src":"498:18:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":622,"nodeType":"Block","src":"612:56:13","statements":[{"expression":{"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":618,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"622:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":619,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":615,"src":"644:17:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"src":"622:39:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"id":621,"nodeType":"ExpressionStatement","src":"622:39:13"}]},"id":623,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":616,"nodeType":"ParameterList","parameters":[{"constant":false,"id":615,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:13","nodeType":"VariableDeclaration","scope":623,"src":"574:36:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"},"typeName":{"id":614,"nodeType":"UserDefinedTypeName","pathNode":{"id":613,"name":"IForwarderRegistry","nameLocations":["574:18:13"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"574:18:13"},"referencedDeclaration":758,"src":"574:18:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:13"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[],"src":"612:0:13"},"scope":730,"src":"562:106:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":676,"nodeType":"Block","src":"846:698:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":629,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":631,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:13","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:13","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":634,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:13","memberName":"data","nodeType":"MemberAccess","src":"1074:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:13","memberName":"length","nodeType":"MemberAccess","src":"1074:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:13","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":644,"nodeType":"IfStatement","src":"1043:95:13","trueBody":{"id":643,"nodeType":"Block","src":"1096:42:13","statements":[{"expression":{"expression":{"id":640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":628,"id":642,"nodeType":"Return","src":"1110:17:13"}]}},{"assignments":[646],"declarations":[{"constant":false,"id":646,"mutability":"mutable","name":"sender","nameLocation":"1156:6:13","nodeType":"VariableDeclaration","scope":676,"src":"1148:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":645,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":650,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":647,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"1165:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$787_$","typeString":"type(library ERC2771Calldata)"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:13","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":769,"src":"1165:25:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:13"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":651,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":655,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"1372:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}],"id":654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":653,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:13","typeDescriptions":{}}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":660,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"1436:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":661,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":665,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1464:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$730","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$730","typeString":"contract ForwarderRegistryContextBase"}],"id":664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1456:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":663,"name":"address","nodeType":"ElementaryTypeName","src":"1456:7:13","typeDescriptions":{}}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1456:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":658,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"1396:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:13","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":757,"src":"1396:39:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:74:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:120:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":672,"nodeType":"IfStatement","src":"1346:164:13","trueBody":{"id":671,"nodeType":"Block","src":"1472:38:13","statements":[{"expression":{"id":669,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":646,"src":"1493:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":628,"id":670,"nodeType":"Return","src":"1486:13:13"}]}},{"expression":{"expression":{"id":673,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1527:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1531:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1527:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":628,"id":675,"nodeType":"Return","src":"1520:17:13"}]},"documentation":{"id":624,"nodeType":"StructuredDocumentation","src":"674:105:13","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":677,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:13","nodeType":"FunctionDefinition","parameters":{"id":625,"nodeType":"ParameterList","parameters":[],"src":"803:2:13"},"returnParameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":677,"src":"837:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:13"},"scope":730,"src":"784:760:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":728,"nodeType":"Block","src":"1725:717:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":683,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1926:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1930:6:13","memberName":"sender","nodeType":"MemberAccess","src":"1926:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":685,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1940:2:13","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1943:6:13","memberName":"origin","nodeType":"MemberAccess","src":"1940:9:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1926:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":688,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1953:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1957:4:13","memberName":"data","nodeType":"MemberAccess","src":"1953:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1962:6:13","memberName":"length","nodeType":"MemberAccess","src":"1953:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1971:2:13","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1953:20:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1926:47:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":698,"nodeType":"IfStatement","src":"1922:93:13","trueBody":{"id":697,"nodeType":"Block","src":"1975:40:13","statements":[{"expression":{"expression":{"id":694,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1996:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2000:4:13","memberName":"data","nodeType":"MemberAccess","src":"1996:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":682,"id":696,"nodeType":"Return","src":"1989:15:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":699,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2189:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2193:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2189:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":703,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"2211:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}],"id":702,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2203:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":701,"name":"address","nodeType":"ElementaryTypeName","src":"2203:7:13","typeDescriptions":{}}},"id":704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2203:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2189:42:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":708,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"2287:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$787_$","typeString":"type(library ERC2771Calldata)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2303:9:13","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":769,"src":"2287:25:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2287:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":711,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2316:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2320:6:13","memberName":"sender","nodeType":"MemberAccess","src":"2316:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":715,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2336:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$730","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$730","typeString":"contract ForwarderRegistryContextBase"}],"id":714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2328:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:13","typeDescriptions":{}}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2328:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":706,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"2247:19:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2267:19:13","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":757,"src":"2247:39:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:95:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2189:153:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":724,"nodeType":"IfStatement","src":"2172:238:13","trueBody":{"id":723,"nodeType":"Block","src":"2353:57:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":719,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":787,"src":"2374:15:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$787_$","typeString":"type(library ERC2771Calldata)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2390:7:13","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":786,"src":"2374:23:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2374:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":682,"id":722,"nodeType":"Return","src":"2367:32:13"}]}},{"expression":{"expression":{"id":725,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2427:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2431:4:13","memberName":"data","nodeType":"MemberAccess","src":"2427:8:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":682,"id":727,"nodeType":"Return","src":"2420:15:13"}]},"documentation":{"id":678,"nodeType":"StructuredDocumentation","src":"1550:103:13","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":729,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1667:8:13","nodeType":"FunctionDefinition","parameters":{"id":679,"nodeType":"ParameterList","parameters":[],"src":"1675:2:13"},"returnParameters":{"id":682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":681,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":729,"src":"1709:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":680,"name":"bytes","nodeType":"ElementaryTypeName","src":"1709:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1708:16:13"},"scope":730,"src":"1658:784:13","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":731,"src":"445:1999:13","usedErrors":[],"usedEvents":[]}],"src":"32:2413:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[742]},"id":743,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":732,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":733,"nodeType":"StructuredDocumentation","src":"58:110:14","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":742,"linearizedBaseContracts":[742],"name":"IERC2771","nameLocation":"178:8:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":734,"nodeType":"StructuredDocumentation","src":"193:171:14","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":741,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:14","nodeType":"FunctionDefinition","parameters":{"id":737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":736,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:14","nodeType":"VariableDeclaration","scope":741,"src":"397:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":735,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:14"},"returnParameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:14","nodeType":"VariableDeclaration","scope":741,"src":"439:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":738,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:14"},"scope":742,"src":"369:86:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":743,"src":"168:289:14","usedErrors":[],"usedEvents":[]}],"src":"32:426:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[758]},"id":759,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":744,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":745,"nodeType":"StructuredDocumentation","src":"58:49:15","text":"@title Meta-Transactions Forwarder Registry."},"fullyImplemented":false,"id":758,"linearizedBaseContracts":[758],"name":"IForwarderRegistry","nameLocation":"117:18:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":746,"nodeType":"StructuredDocumentation","src":"142:390:15","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @param target The target contract.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."},"functionSelector":"019a2028","id":757,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"546:19:15","nodeType":"FunctionDefinition","parameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":748,"mutability":"mutable","name":"sender","nameLocation":"574:6:15","nodeType":"VariableDeclaration","scope":757,"src":"566:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":747,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":750,"mutability":"mutable","name":"forwarder","nameLocation":"590:9:15","nodeType":"VariableDeclaration","scope":757,"src":"582:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":749,"name":"address","nodeType":"ElementaryTypeName","src":"582:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":752,"mutability":"mutable","name":"target","nameLocation":"609:6:15","nodeType":"VariableDeclaration","scope":757,"src":"601:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":751,"name":"address","nodeType":"ElementaryTypeName","src":"601:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"565:51:15"},"returnParameters":{"id":756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":755,"mutability":"mutable","name":"isApproved","nameLocation":"645:10:15","nodeType":"VariableDeclaration","scope":757,"src":"640:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":754,"name":"bool","nodeType":"ElementaryTypeName","src":"640:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"639:17:15"},"scope":758,"src":"537:120:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":759,"src":"107:552:15","usedErrors":[],"usedEvents":[]}],"src":"32:628:15"},"id":15},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[787]},"id":788,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":760,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":761,"nodeType":"StructuredDocumentation","src":"58:144:16","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":787,"linearizedBaseContracts":[787],"name":"ERC2771Calldata","nameLocation":"210:15:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":768,"nodeType":"Block","src":"398:105:16","statements":[{"AST":{"nativeSrc":"417:80:16","nodeType":"YulBlock","src":"417:80:16","statements":[{"nativeSrc":"431:56:16","nodeType":"YulAssignment","src":"431:56:16","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:16","nodeType":"YulLiteral","src":"445:2:16","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:16","nodeType":"YulIdentifier","src":"466:12:16"},"nativeSrc":"466:14:16","nodeType":"YulFunctionCall","src":"466:14:16"},{"kind":"number","nativeSrc":"482:2:16","nodeType":"YulLiteral","src":"482:2:16","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:16","nodeType":"YulIdentifier","src":"462:3:16"},"nativeSrc":"462:23:16","nodeType":"YulFunctionCall","src":"462:23:16"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:16","nodeType":"YulIdentifier","src":"449:12:16"},"nativeSrc":"449:37:16","nodeType":"YulFunctionCall","src":"449:37:16"}],"functionName":{"name":"shr","nativeSrc":"441:3:16","nodeType":"YulIdentifier","src":"441:3:16"},"nativeSrc":"441:46:16","nodeType":"YulFunctionCall","src":"441:46:16"},"variableNames":[{"name":"sender","nativeSrc":"431:6:16","nodeType":"YulIdentifier","src":"431:6:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":765,"isOffset":false,"isSlot":false,"src":"431:6:16","valueSize":1}],"id":767,"nodeType":"InlineAssembly","src":"408:89:16"}]},"documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"232:101:16","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":769,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:16","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[],"src":"356:2:16"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"sender","nameLocation":"390:6:16","nodeType":"VariableDeclaration","scope":769,"src":"382:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":764,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:16"},"scope":787,"src":"338:165:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":785,"nodeType":"Block","src":"679:89:16","statements":[{"id":784,"nodeType":"UncheckedBlock","src":"689:73:16","statements":[{"expression":{"baseExpression":{"expression":{"id":775,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:16","memberName":"data","nodeType":"MemberAccess","src":"720:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":777,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:16","memberName":"data","nodeType":"MemberAccess","src":"730:8:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:16","memberName":"length","nodeType":"MemberAccess","src":"730:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:16","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":774,"id":783,"nodeType":"Return","src":"713:38:16"}]}]},"documentation":{"id":770,"nodeType":"StructuredDocumentation","src":"509:102:16","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":786,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:16","nodeType":"FunctionDefinition","parameters":{"id":771,"nodeType":"ParameterList","parameters":[],"src":"632:2:16"},"returnParameters":{"id":774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":773,"mutability":"mutable","name":"data","nameLocation":"673:4:16","nodeType":"VariableDeclaration","scope":786,"src":"658:19:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":772,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:16"},"scope":787,"src":"616:152:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":788,"src":"202:568:16","usedErrors":[],"usedEvents":[]}],"src":"32:739:16"},"id":16},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[796]},"id":797,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":789,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:17"},{"documentation":{"id":790,"nodeType":"StructuredDocumentation","src":"58:179:17","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":796,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:17","nodeType":"ErrorDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":792,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:17","nodeType":"VariableDeclaration","scope":796,"src":"277:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":791,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":794,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:17","nodeType":"VariableDeclaration","scope":796,"src":"299:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":793,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:17"},"src":"237:80:17"}],"src":"32:286:17"},"id":17},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[796],"ProxyInitialization":[843],"StorageSlot":[2351]},"id":844,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":798,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":800,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":844,"sourceUnit":797,"src":"58:92:18","symbolAliases":[{"foreign":{"id":799,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"66:33:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":802,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":844,"sourceUnit":2352,"src":"151:74:18","symbolAliases":[{"foreign":{"id":801,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2351,"src":"159:11:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":803,"nodeType":"StructuredDocumentation","src":"227:92:18","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":843,"linearizedBaseContracts":[843],"name":"ProxyInitialization","nameLocation":"327:19:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":841,"nodeType":"Block","src":"735:294:18","statements":[{"assignments":[815],"declarations":[{"constant":false,"id":815,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:18","nodeType":"VariableDeclaration","scope":841,"src":"745:46:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2242_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":814,"nodeType":"UserDefinedTypeName","pathNode":{"id":813,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:18","757:11:18"],"nodeType":"IdentifierPath","referencedDeclaration":2242,"src":"745:23:18"},"referencedDeclaration":2242,"src":"745:23:18","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2242_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":820,"initialValue":{"arguments":[{"id":818,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"821:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":816,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2351,"src":"794:11:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2351_$","typeString":"type(library StorageSlot)"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:18","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2295,"src":"794:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2242_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2242_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:18"},{"assignments":[822],"declarations":[{"constant":false,"id":822,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:18","nodeType":"VariableDeclaration","scope":841,"src":"843:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":821,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":825,"initialValue":{"expression":{"id":823,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"866:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2242_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":824,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2241,"src":"866:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":826,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"900:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":827,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"916:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":834,"nodeType":"IfStatement","src":"896:88:18","trueBody":{"errorCall":{"arguments":[{"id":830,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"964:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":831,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"978:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":829,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"930:33:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":833,"nodeType":"RevertStatement","src":"923:61:18"}},{"expression":{"id":839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":835,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":815,"src":"994:14:18","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2242_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:18","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2241,"src":"994:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":838,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"1017:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":840,"nodeType":"ExpressionStatement","src":"994:28:18"}]},"documentation":{"id":804,"nodeType":"StructuredDocumentation","src":"353:314:18","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":842,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:18","nodeType":"FunctionDefinition","parameters":{"id":809,"nodeType":"ParameterList","parameters":[{"constant":false,"id":806,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:18","nodeType":"VariableDeclaration","scope":842,"src":"690:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":808,"mutability":"mutable","name":"phase","nameLocation":"719:5:18","nodeType":"VariableDeclaration","scope":842,"src":"711:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:18"},"returnParameters":{"id":810,"nodeType":"ParameterList","parameters":[],"src":"735:0:18"},"scope":843,"src":"672:357:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":844,"src":"319:712:18","usedErrors":[],"usedEvents":[]}],"src":"32:1000:18"},"id":18},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[43],"TokenRecovery":[855],"TokenRecoveryBase":[970]},"id":856,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":845,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":847,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":856,"sourceUnit":971,"src":"58:63:19","symbolAliases":[{"foreign":{"id":846,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"66:17:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":849,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":856,"sourceUnit":44,"src":"122:68:19","symbolAliases":[{"foreign":{"id":848,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"130:17:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":851,"name":"TokenRecoveryBase","nameLocations":["440:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":970,"src":"440:17:19"},"id":852,"nodeType":"InheritanceSpecifier","src":"440:17:19"},{"baseName":{"id":853,"name":"ContractOwnership","nameLocations":["459:17:19"],"nodeType":"IdentifierPath","referencedDeclaration":43,"src":"459:17:19"},"id":854,"nodeType":"InheritanceSpecifier","src":"459:17:19"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"192:213:19","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":855,"linearizedBaseContracts":[855,43,435,452,91,970,2205,147,1016],"name":"TokenRecovery","nameLocation":"423:13:19","nodeType":"ContractDefinition","nodes":[],"scope":856,"src":"405:74:19","usedErrors":[7,105,440,1042,1518,2215,2218],"usedEvents":[126]}],"src":"32:448:19"},"id":19},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Context":[2205],"ContractOwnershipStorage":[405],"IERC20":[1506],"IERC721":[1318],"ITokenRecovery":[1016],"TokenRecoveryBase":[970],"TokenRecoveryLibrary":[1232]},"id":971,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":857,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":971,"sourceUnit":1429,"src":"58:69:20","symbolAliases":[{"foreign":{"id":858,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"66:6:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":971,"sourceUnit":1319,"src":"128:68:20","symbolAliases":[{"foreign":{"id":860,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"136:7:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol","file":"./../interfaces/ITokenRecovery.sol","id":863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":971,"sourceUnit":1017,"src":"197:66:20","symbolAliases":[{"foreign":{"id":862,"name":"ITokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"205:14:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":865,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":971,"sourceUnit":406,"src":"264:95:20","symbolAliases":[{"foreign":{"id":864,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"272:24:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol","file":"./../libraries/TokenRecoveryLibrary.sol","id":867,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":971,"sourceUnit":1233,"src":"360:77:20","symbolAliases":[{"foreign":{"id":866,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"368:20:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":869,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":971,"sourceUnit":2206,"src":"438:66:20","symbolAliases":[{"foreign":{"id":868,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"446:7:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":871,"name":"ITokenRecovery","nameLocations":["817:14:20"],"nodeType":"IdentifierPath","referencedDeclaration":1016,"src":"817:14:20"},"id":872,"nodeType":"InheritanceSpecifier","src":"817:14:20"},{"baseName":{"id":873,"name":"Context","nameLocations":["833:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":2205,"src":"833:7:20"},"id":874,"nodeType":"InheritanceSpecifier","src":"833:7:20"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":870,"nodeType":"StructuredDocumentation","src":"506:272:20","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":970,"linearizedBaseContracts":[970,2205,1016],"name":"TokenRecoveryBase","nameLocation":"796:17:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":878,"libraryName":{"id":875,"name":"ContractOwnershipStorage","nameLocations":["853:24:20"],"nodeType":"IdentifierPath","referencedDeclaration":405,"src":"853:24:20"},"nodeType":"UsingForDirective","src":"847:67:20","typeName":{"id":877,"nodeType":"UserDefinedTypeName","pathNode":{"id":876,"name":"ContractOwnershipStorage.Layout","nameLocations":["882:24:20","907:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"882:31:20"},"referencedDeclaration":178,"src":"882:31:20","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[987],"body":{"id":904,"nodeType":"Block","src":"1319:147:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":893,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"1386:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1386:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":888,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1329:24:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$405_$","typeString":"type(library ContractOwnershipStorage)"}},"id":890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":404,"src":"1329:31:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1329:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":892,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1363:22:20","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":372,"src":"1329:56:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$178_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1329:70:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":896,"nodeType":"ExpressionStatement","src":"1329:70:20"},{"expression":{"arguments":[{"id":900,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"1441:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},{"id":901,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":885,"src":"1451:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":897,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"1409:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenRecoveryLibrary_$1232_$","typeString":"type(library TokenRecoveryLibrary)"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1430:10:20","memberName":"recoverETH","nodeType":"MemberAccess","referencedDeclaration":1086,"src":"1409:31:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_payable_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address payable[] calldata,uint256[] calldata)"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1409:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":903,"nodeType":"ExpressionStatement","src":"1409:50:20"}]},"documentation":{"id":879,"nodeType":"StructuredDocumentation","src":"920:294:20","text":"@inheritdoc ITokenRecovery\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason."},"functionSelector":"f7ba94bd","id":905,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1228:10:20","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":882,"mutability":"mutable","name":"accounts","nameLocation":"1266:8:20","nodeType":"VariableDeclaration","scope":905,"src":"1239:35:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":880,"name":"address","nodeType":"ElementaryTypeName","src":"1239:15:20","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":881,"nodeType":"ArrayTypeName","src":"1239:17:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"amounts","nameLocation":"1295:7:20","nodeType":"VariableDeclaration","scope":905,"src":"1276:26:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":883,"name":"uint256","nodeType":"ElementaryTypeName","src":"1276:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":884,"nodeType":"ArrayTypeName","src":"1276:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1238:65:20"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[],"src":"1319:0:20"},"scope":970,"src":"1219:247:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1001],"body":{"id":936,"nodeType":"Block","src":"1907:158:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":924,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"1974:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1974:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":919,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1917:24:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$405_$","typeString":"type(library ContractOwnershipStorage)"}},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":404,"src":"1917:31:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1917:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":923,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1951:22:20","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":372,"src":"1917:56:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$178_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1917:70:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":927,"nodeType":"ExpressionStatement","src":"1917:70:20"},{"expression":{"arguments":[{"id":931,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":909,"src":"2032:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":932,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"2042:6:20","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},{"id":933,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"2050:7:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":928,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"1997:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenRecoveryLibrary_$1232_$","typeString":"type(library TokenRecoveryLibrary)"}},"id":930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2018:13:20","memberName":"recoverERC20s","nodeType":"MemberAccess","referencedDeclaration":1142,"src":"1997:34:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address[] calldata,contract IERC20[] calldata,uint256[] calldata)"}},"id":934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1997:61:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":935,"nodeType":"ExpressionStatement","src":"1997:61:20"}]},"documentation":{"id":906,"nodeType":"StructuredDocumentation","src":"1472:309:20","text":"@inheritdoc ITokenRecovery\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason."},"functionSelector":"73c8a958","id":937,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"1795:13:20","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"accounts","nameLocation":"1828:8:20","nodeType":"VariableDeclaration","scope":937,"src":"1809:27:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":907,"name":"address","nodeType":"ElementaryTypeName","src":"1809:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":908,"nodeType":"ArrayTypeName","src":"1809:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"tokens","nameLocation":"1856:6:20","nodeType":"VariableDeclaration","scope":937,"src":"1838:24:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":911,"nodeType":"UserDefinedTypeName","pathNode":{"id":910,"name":"IERC20","nameLocations":["1838:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"1838:6:20"},"referencedDeclaration":1506,"src":"1838:6:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":912,"nodeType":"ArrayTypeName","src":"1838:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":916,"mutability":"mutable","name":"amounts","nameLocation":"1883:7:20","nodeType":"VariableDeclaration","scope":937,"src":"1864:26:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":914,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":915,"nodeType":"ArrayTypeName","src":"1864:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1808:83:20"},"returnParameters":{"id":918,"nodeType":"ParameterList","parameters":[],"src":"1907:0:20"},"scope":970,"src":"1786:279:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1015],"body":{"id":968,"nodeType":"Block","src":"2516:163:20","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":956,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2187,"src":"2583:10:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:12:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":951,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"2526:24:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$405_$","typeString":"type(library ContractOwnershipStorage)"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2551:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":404,"src":"2526:31:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":955,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2560:22:20","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":372,"src":"2526:56:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$178_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2526:70:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":959,"nodeType":"ExpressionStatement","src":"2526:70:20"},{"expression":{"arguments":[{"id":963,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"2642:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":964,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2652:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},{"id":965,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"2663:8:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":960,"name":"TokenRecoveryLibrary","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"2606:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenRecoveryLibrary_$1232_$","typeString":"type(library TokenRecoveryLibrary)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2627:14:20","memberName":"recoverERC721s","nodeType":"MemberAccess","referencedDeclaration":1231,"src":"2606:35:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address[] calldata,contract IERC721[] calldata,uint256[] calldata)"}},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2606:66:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":967,"nodeType":"ExpressionStatement","src":"2606:66:20"}]},"documentation":{"id":938,"nodeType":"StructuredDocumentation","src":"2071:313:20","text":"@inheritdoc ITokenRecovery\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason."},"functionSelector":"c3666c36","id":969,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"2398:14:20","nodeType":"FunctionDefinition","parameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":941,"mutability":"mutable","name":"accounts","nameLocation":"2432:8:20","nodeType":"VariableDeclaration","scope":969,"src":"2413:27:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":939,"name":"address","nodeType":"ElementaryTypeName","src":"2413:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":940,"nodeType":"ArrayTypeName","src":"2413:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":945,"mutability":"mutable","name":"contracts","nameLocation":"2461:9:20","nodeType":"VariableDeclaration","scope":969,"src":"2442:28:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":943,"nodeType":"UserDefinedTypeName","pathNode":{"id":942,"name":"IERC721","nameLocations":["2442:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":1318,"src":"2442:7:20"},"referencedDeclaration":1318,"src":"2442:7:20","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}},"id":944,"nodeType":"ArrayTypeName","src":"2442:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":948,"mutability":"mutable","name":"tokenIds","nameLocation":"2491:8:20","nodeType":"VariableDeclaration","scope":969,"src":"2472:27:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":946,"name":"uint256","nodeType":"ElementaryTypeName","src":"2472:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":947,"nodeType":"ArrayTypeName","src":"2472:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2412:88:20"},"returnParameters":{"id":950,"nodeType":"ParameterList","parameters":[],"src":"2516:0:20"},"scope":970,"src":"2389:290:20","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":971,"src":"778:1903:20","usedErrors":[7,105,1042,1518,2215,2218],"usedEvents":[]}],"src":"32:2650:20"},"id":20},"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol","exportedSymbols":{"IERC20":[1506],"IERC721":[1318],"ITokenRecovery":[1016]},"id":1017,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":972,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":974,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1017,"sourceUnit":1429,"src":"58:69:21","symbolAliases":[{"foreign":{"id":973,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"66:6:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":976,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1017,"sourceUnit":1319,"src":"128:68:21","symbolAliases":[{"foreign":{"id":975,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"136:7:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ITokenRecovery","contractDependencies":[],"contractKind":"interface","documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"198:49:21","text":"@title Uniquely identified seals management."},"fullyImplemented":false,"id":1016,"linearizedBaseContracts":[1016],"name":"ITokenRecovery","nameLocation":"257:14:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":978,"nodeType":"StructuredDocumentation","src":"278:626:21","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":987,"implemented":false,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"918:10:21","nodeType":"FunctionDefinition","parameters":{"id":985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":981,"mutability":"mutable","name":"accounts","nameLocation":"956:8:21","nodeType":"VariableDeclaration","scope":987,"src":"929:35:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":979,"name":"address","nodeType":"ElementaryTypeName","src":"929:15:21","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":980,"nodeType":"ArrayTypeName","src":"929:17:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":984,"mutability":"mutable","name":"amounts","nameLocation":"985:7:21","nodeType":"VariableDeclaration","scope":987,"src":"966:26:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"966:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":983,"nodeType":"ArrayTypeName","src":"966:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"928:65:21"},"returnParameters":{"id":986,"nodeType":"ParameterList","parameters":[],"src":"1002:0:21"},"scope":1016,"src":"909:94:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":988,"nodeType":"StructuredDocumentation","src":"1009:479:21","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":1001,"implemented":false,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"1502:13:21","nodeType":"FunctionDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"accounts","nameLocation":"1535:8:21","nodeType":"VariableDeclaration","scope":1001,"src":"1516:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":989,"name":"address","nodeType":"ElementaryTypeName","src":"1516:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":990,"nodeType":"ArrayTypeName","src":"1516:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":995,"mutability":"mutable","name":"tokens","nameLocation":"1563:6:21","nodeType":"VariableDeclaration","scope":1001,"src":"1545:24:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":993,"nodeType":"UserDefinedTypeName","pathNode":{"id":992,"name":"IERC20","nameLocations":["1545:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"1545:6:21"},"referencedDeclaration":1506,"src":"1545:6:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":994,"nodeType":"ArrayTypeName","src":"1545:8:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":998,"mutability":"mutable","name":"amounts","nameLocation":"1590:7:21","nodeType":"VariableDeclaration","scope":1001,"src":"1571:26:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":996,"name":"uint256","nodeType":"ElementaryTypeName","src":"1571:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":997,"nodeType":"ArrayTypeName","src":"1571:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1515:83:21"},"returnParameters":{"id":1000,"nodeType":"ParameterList","parameters":[],"src":"1607:0:21"},"scope":1016,"src":"1493:115:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1002,"nodeType":"StructuredDocumentation","src":"1614:484:21","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":1015,"implemented":false,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"2112:14:21","nodeType":"FunctionDefinition","parameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"accounts","nameLocation":"2146:8:21","nodeType":"VariableDeclaration","scope":1015,"src":"2127:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1003,"name":"address","nodeType":"ElementaryTypeName","src":"2127:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1004,"nodeType":"ArrayTypeName","src":"2127:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1009,"mutability":"mutable","name":"contracts","nameLocation":"2175:9:21","nodeType":"VariableDeclaration","scope":1015,"src":"2156:28:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1007,"nodeType":"UserDefinedTypeName","pathNode":{"id":1006,"name":"IERC721","nameLocations":["2156:7:21"],"nodeType":"IdentifierPath","referencedDeclaration":1318,"src":"2156:7:21"},"referencedDeclaration":1318,"src":"2156:7:21","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}},"id":1008,"nodeType":"ArrayTypeName","src":"2156:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"tokenIds","nameLocation":"2205:8:21","nodeType":"VariableDeclaration","scope":1015,"src":"2186:27:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1010,"name":"uint256","nodeType":"ElementaryTypeName","src":"2186:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1011,"nodeType":"ArrayTypeName","src":"2186:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2126:88:21"},"returnParameters":{"id":1014,"nodeType":"ParameterList","parameters":[],"src":"2223:0:21"},"scope":1016,"src":"2103:121:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1017,"src":"247:1979:21","usedErrors":[],"usedEvents":[]}],"src":"32:2195:21"},"id":21},"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol","exportedSymbols":{"Address":[2175],"IERC165":[452],"IERC20":[1506],"IERC721":[1318],"InconsistentArrayLengths":[7],"SafeERC20":[1915],"TokenRecoveryLibrary":[1232]},"id":1233,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1018,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../CommonErrors.sol","id":1020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1233,"sourceUnit":11,"src":"58:66:22","symbolAliases":[{"foreign":{"id":1019,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"66:24:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":1022,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1233,"sourceUnit":1429,"src":"125:69:22","symbolAliases":[{"foreign":{"id":1021,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"133:6:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":1024,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1233,"sourceUnit":1319,"src":"195:68:22","symbolAliases":[{"foreign":{"id":1023,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"203:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../../introspection/interfaces/IERC165.sol","id":1026,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1233,"sourceUnit":453,"src":"264:69:22","symbolAliases":[{"foreign":{"id":1025,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"272:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":1028,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1233,"sourceUnit":1916,"src":"334:82:22","symbolAliases":[{"foreign":{"id":1027,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1915,"src":"342:9:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1030,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1233,"sourceUnit":2176,"src":"417:66:22","symbolAliases":[{"foreign":{"id":1029,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2175,"src":"425:7:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TokenRecoveryLibrary","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1232,"linearizedBaseContracts":[1232],"name":"TokenRecoveryLibrary","nameLocation":"493:20:22","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1034,"libraryName":{"id":1031,"name":"SafeERC20","nameLocations":["526:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":1915,"src":"526:9:22"},"nodeType":"UsingForDirective","src":"520:27:22","typeName":{"id":1033,"nodeType":"UserDefinedTypeName","pathNode":{"id":1032,"name":"IERC20","nameLocations":["540:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"540:6:22"},"referencedDeclaration":1506,"src":"540:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}}},{"global":false,"id":1037,"libraryName":{"id":1035,"name":"Address","nameLocations":["558:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":2175,"src":"558:7:22"},"nodeType":"UsingForDirective","src":"552:34:22","typeName":{"id":1036,"name":"address","nodeType":"ElementaryTypeName","src":"570:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"592:142:22","text":"@notice Thrown when trying to recover a token of the wrong contract type.\n @param tokenContract The token contract being recovered."},"errorSelector":"986b9f1f","id":1042,"name":"IncorrectTokenContractType","nameLocation":"745:26:22","nodeType":"ErrorDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"tokenContract","nameLocation":"780:13:22","nodeType":"VariableDeclaration","scope":1042,"src":"772:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"772:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"771:23:22"},"src":"739:56:22"},{"body":{"id":1085,"nodeType":"Block","src":"1704:222:22","statements":[{"assignments":[1053],"declarations":[{"constant":false,"id":1053,"mutability":"mutable","name":"length","nameLocation":"1722:6:22","nodeType":"VariableDeclaration","scope":1085,"src":"1714:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1052,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1056,"initialValue":{"expression":{"id":1054,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"1731:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1740:6:22","memberName":"length","nodeType":"MemberAccess","src":"1731:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1714:32:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1057,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"1760:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1058,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"1770:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1778:6:22","memberName":"length","nodeType":"MemberAccess","src":"1770:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1760:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1064,"nodeType":"IfStatement","src":"1756:63:22","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1061,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1793:24:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1793:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1063,"nodeType":"RevertStatement","src":"1786:33:22"}},{"body":{"id":1083,"nodeType":"Block","src":"1862:58:22","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1078,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"1898:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1080,"indexExpression":{"id":1079,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"1906:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1898:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1074,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"1876:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1076,"indexExpression":{"id":1075,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"1885:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1876:11:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1888:9:22","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":1973,"src":"1876:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1876:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1082,"nodeType":"ExpressionStatement","src":"1876:33:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1068,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"1845:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1069,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1053,"src":"1849:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1845:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1084,"initializationExpression":{"assignments":[1066],"declarations":[{"constant":false,"id":1066,"mutability":"mutable","name":"i","nameLocation":"1842:1:22","nodeType":"VariableDeclaration","scope":1084,"src":"1834:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1065,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1067,"nodeType":"VariableDeclarationStatement","src":"1834:9:22"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"1857:3:22","subExpression":{"id":1071,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"1859:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1073,"nodeType":"ExpressionStatement","src":"1857:3:22"},"nodeType":"ForStatement","src":"1829:91:22"}]},"documentation":{"id":1043,"nodeType":"StructuredDocumentation","src":"801:804:22","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"id":1086,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1619:10:22","nodeType":"FunctionDefinition","parameters":{"id":1050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"accounts","nameLocation":"1657:8:22","nodeType":"VariableDeclaration","scope":1086,"src":"1630:35:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":1044,"name":"address","nodeType":"ElementaryTypeName","src":"1630:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1045,"nodeType":"ArrayTypeName","src":"1630:17:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":1049,"mutability":"mutable","name":"amounts","nameLocation":"1686:7:22","nodeType":"VariableDeclaration","scope":1086,"src":"1667:26:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1047,"name":"uint256","nodeType":"ElementaryTypeName","src":"1667:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1048,"nodeType":"ArrayTypeName","src":"1667:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1629:65:22"},"returnParameters":{"id":1051,"nodeType":"ParameterList","parameters":[],"src":"1704:0:22"},"scope":1232,"src":"1610:316:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1141,"nodeType":"Block","src":"2724:263:22","statements":[{"assignments":[1101],"declarations":[{"constant":false,"id":1101,"mutability":"mutable","name":"length","nameLocation":"2742:6:22","nodeType":"VariableDeclaration","scope":1141,"src":"2734:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1100,"name":"uint256","nodeType":"ElementaryTypeName","src":"2734:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1104,"initialValue":{"expression":{"id":1102,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"2751:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2760:6:22","memberName":"length","nodeType":"MemberAccess","src":"2751:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2734:32:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1105,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2780:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1106,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"2790:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2797:6:22","memberName":"length","nodeType":"MemberAccess","src":"2790:13:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2780:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1109,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2807:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1110,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"2817:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2825:6:22","memberName":"length","nodeType":"MemberAccess","src":"2817:14:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2807:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2780:51:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1117,"nodeType":"IfStatement","src":"2776:90:22","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1114,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2840:24:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2840:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1116,"nodeType":"RevertStatement","src":"2833:33:22"}},{"body":{"id":1139,"nodeType":"Block","src":"2909:72:22","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1131,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"2946:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1133,"indexExpression":{"id":1132,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"2955:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2946:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1134,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1097,"src":"2959:7:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1136,"indexExpression":{"id":1135,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"2967:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2959:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1127,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"2923:6:22","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1129,"indexExpression":{"id":1128,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"2930:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2923:9:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2933:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"2923:22:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1506_$","typeString":"function (contract IERC20,address,uint256)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2923:47:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1138,"nodeType":"ExpressionStatement","src":"2923:47:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1121,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"2892:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1122,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"2896:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2892:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1140,"initializationExpression":{"assignments":[1119],"declarations":[{"constant":false,"id":1119,"mutability":"mutable","name":"i","nameLocation":"2889:1:22","nodeType":"VariableDeclaration","scope":1140,"src":"2881:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"2881:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1120,"nodeType":"VariableDeclarationStatement","src":"2881:9:22"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2904:3:22","subExpression":{"id":1124,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"2906:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1126,"nodeType":"ExpressionStatement","src":"2904:3:22"},"nodeType":"ForStatement","src":"2876:105:22"}]},"documentation":{"id":1087,"nodeType":"StructuredDocumentation","src":"1932:672:22","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"id":1142,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"2618:13:22","nodeType":"FunctionDefinition","parameters":{"id":1098,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1090,"mutability":"mutable","name":"accounts","nameLocation":"2651:8:22","nodeType":"VariableDeclaration","scope":1142,"src":"2632:27:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1088,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1089,"nodeType":"ArrayTypeName","src":"2632:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1094,"mutability":"mutable","name":"tokens","nameLocation":"2679:6:22","nodeType":"VariableDeclaration","scope":1142,"src":"2661:24:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1092,"nodeType":"UserDefinedTypeName","pathNode":{"id":1091,"name":"IERC20","nameLocations":["2661:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"2661:6:22"},"referencedDeclaration":1506,"src":"2661:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1093,"nodeType":"ArrayTypeName","src":"2661:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$1506_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1097,"mutability":"mutable","name":"amounts","nameLocation":"2706:7:22","nodeType":"VariableDeclaration","scope":1142,"src":"2687:26:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1095,"name":"uint256","nodeType":"ElementaryTypeName","src":"2687:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1096,"nodeType":"ArrayTypeName","src":"2687:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2631:83:22"},"returnParameters":{"id":1099,"nodeType":"ParameterList","parameters":[],"src":"2724:0:22"},"scope":1232,"src":"2609:378:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1230,"nodeType":"Block","src":"3800:526:22","statements":[{"assignments":[1157],"declarations":[{"constant":false,"id":1157,"mutability":"mutable","name":"length","nameLocation":"3818:6:22","nodeType":"VariableDeclaration","scope":1230,"src":"3810:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1156,"name":"uint256","nodeType":"ElementaryTypeName","src":"3810:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1160,"initialValue":{"expression":{"id":1158,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"3827:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3836:6:22","memberName":"length","nodeType":"MemberAccess","src":"3827:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3810:32:22"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1161,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"3856:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1162,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"3866:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3876:6:22","memberName":"length","nodeType":"MemberAccess","src":"3866:16:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3856:26:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1165,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"3886:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1166,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"3896:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3905:6:22","memberName":"length","nodeType":"MemberAccess","src":"3896:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3886:25:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3856:55:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1173,"nodeType":"IfStatement","src":"3852:94:22","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1170,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"3920:24:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3920:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1172,"nodeType":"RevertStatement","src":"3913:33:22"}},{"body":{"id":1228,"nodeType":"Block","src":"3989:331:22","statements":[{"assignments":[1185],"declarations":[{"constant":false,"id":1185,"mutability":"mutable","name":"tokenContract","nameLocation":"4011:13:22","nodeType":"VariableDeclaration","scope":1228,"src":"4003:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"},"typeName":{"id":1184,"nodeType":"UserDefinedTypeName","pathNode":{"id":1183,"name":"IERC721","nameLocations":["4003:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":1318,"src":"4003:7:22"},"referencedDeclaration":1318,"src":"4003:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}},"visibility":"internal"}],"id":1189,"initialValue":{"baseExpression":{"id":1186,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"4027:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1188,"indexExpression":{"id":1187,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4037:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4027:12:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}},"nodeType":"VariableDeclarationStatement","src":"4003:36:22"},{"condition":{"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4057:77:22","subExpression":{"arguments":[{"expression":{"arguments":[{"id":1198,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1318,"src":"4113:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1318_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1318_$","typeString":"type(contract IERC721)"}],"id":1197,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4108:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4108:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1318","typeString":"type(contract IERC721)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4122:11:22","memberName":"interfaceId","nodeType":"MemberAccess","src":"4108:25:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[{"arguments":[{"id":1193,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"4074:13:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}],"id":1192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4066:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1191,"name":"address","nodeType":"ElementaryTypeName","src":"4066:7:22","typeDescriptions":{}}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4066:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1190,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"4058:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$452_$","typeString":"type(contract IERC165)"}},"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4058:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC165_$452","typeString":"contract IERC165"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4090:17:22","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":451,"src":"4058:49:22","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view external returns (bool)"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4058:76:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1211,"nodeType":"IfStatement","src":"4053:173:22","trueBody":{"id":1210,"nodeType":"Block","src":"4136:90:22","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1206,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1185,"src":"4196:13:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}],"id":1205,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4188:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1204,"name":"address","nodeType":"ElementaryTypeName","src":"4188:7:22","typeDescriptions":{}}},"id":1207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4188:22:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1203,"name":"IncorrectTokenContractType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"4161:26:22","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4161:50:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1209,"nodeType":"RevertStatement","src":"4154:57:22"}]}},{"expression":{"arguments":[{"arguments":[{"id":1218,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4277:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryLibrary_$1232","typeString":"library TokenRecoveryLibrary"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryLibrary_$1232","typeString":"library TokenRecoveryLibrary"}],"id":1217,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4269:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1216,"name":"address","nodeType":"ElementaryTypeName","src":"4269:7:22","typeDescriptions":{}}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4269:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1220,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"4284:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1222,"indexExpression":{"id":1221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4293:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4284:11:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1223,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"4297:8:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1225,"indexExpression":{"id":1224,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4306:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4297:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1212,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"4239:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1214,"indexExpression":{"id":1213,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"4249:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4239:12:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4252:16:22","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1271,"src":"4239:29:22","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4239:70:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1227,"nodeType":"ExpressionStatement","src":"4239:70:22"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1177,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"3972:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1178,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"3976:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3972:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1229,"initializationExpression":{"assignments":[1175],"declarations":[{"constant":false,"id":1175,"mutability":"mutable","name":"i","nameLocation":"3969:1:22","nodeType":"VariableDeclaration","scope":1229,"src":"3961:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1174,"name":"uint256","nodeType":"ElementaryTypeName","src":"3961:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1176,"nodeType":"VariableDeclarationStatement","src":"3961:9:22"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3984:3:22","subExpression":{"id":1180,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1175,"src":"3986:1:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1182,"nodeType":"ExpressionStatement","src":"3984:3:22"},"nodeType":"ForStatement","src":"3956:364:22"}]},"documentation":{"id":1143,"nodeType":"StructuredDocumentation","src":"2993:681:22","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"id":1231,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"3688:14:22","nodeType":"FunctionDefinition","parameters":{"id":1154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"accounts","nameLocation":"3722:8:22","nodeType":"VariableDeclaration","scope":1231,"src":"3703:27:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1144,"name":"address","nodeType":"ElementaryTypeName","src":"3703:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1145,"nodeType":"ArrayTypeName","src":"3703:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1150,"mutability":"mutable","name":"contracts","nameLocation":"3751:9:22","nodeType":"VariableDeclaration","scope":1231,"src":"3732:28:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1148,"nodeType":"UserDefinedTypeName","pathNode":{"id":1147,"name":"IERC721","nameLocations":["3732:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":1318,"src":"3732:7:22"},"referencedDeclaration":1318,"src":"3732:7:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$1318","typeString":"contract IERC721"}},"id":1149,"nodeType":"ArrayTypeName","src":"3732:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$1318_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1153,"mutability":"mutable","name":"tokenIds","nameLocation":"3781:8:22","nodeType":"VariableDeclaration","scope":1231,"src":"3762:27:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1151,"name":"uint256","nodeType":"ElementaryTypeName","src":"3762:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1152,"nodeType":"ArrayTypeName","src":"3762:9:22","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3702:88:22"},"returnParameters":{"id":1155,"nodeType":"ParameterList","parameters":[],"src":"3800:0:22"},"scope":1232,"src":"3679:647:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1233,"src":"485:3843:22","usedErrors":[1042],"usedEvents":[]}],"src":"32:4297:22"},"id":22},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1318]},"id":1319,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1234,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1235,"nodeType":"StructuredDocumentation","src":"58:296:23","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1318,"linearizedBaseContracts":[1318],"name":"IERC721","nameLocation":"364:7:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"378:684:23","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1243,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1076:7:23","nodeType":"FunctionDefinition","parameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"to","nameLocation":"1092:2:23","nodeType":"VariableDeclaration","scope":1243,"src":"1084:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1237,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"tokenId","nameLocation":"1104:7:23","nodeType":"VariableDeclaration","scope":1243,"src":"1096:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:29:23"},"returnParameters":{"id":1242,"nodeType":"ParameterList","parameters":[],"src":"1121:0:23"},"scope":1318,"src":"1067:55:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1244,"nodeType":"StructuredDocumentation","src":"1128:341:23","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1251,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1483:17:23","nodeType":"FunctionDefinition","parameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1246,"mutability":"mutable","name":"operator","nameLocation":"1509:8:23","nodeType":"VariableDeclaration","scope":1251,"src":"1501:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1245,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1248,"mutability":"mutable","name":"approved","nameLocation":"1524:8:23","nodeType":"VariableDeclaration","scope":1251,"src":"1519:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1247,"name":"bool","nodeType":"ElementaryTypeName","src":"1519:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1500:33:23"},"returnParameters":{"id":1250,"nodeType":"ParameterList","parameters":[],"src":"1542:0:23"},"scope":1318,"src":"1474:69:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1252,"nodeType":"StructuredDocumentation","src":"1549:667:23","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1261,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2230:12:23","nodeType":"FunctionDefinition","parameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1254,"mutability":"mutable","name":"from","nameLocation":"2251:4:23","nodeType":"VariableDeclaration","scope":1261,"src":"2243:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1253,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1256,"mutability":"mutable","name":"to","nameLocation":"2265:2:23","nodeType":"VariableDeclaration","scope":1261,"src":"2257:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1255,"name":"address","nodeType":"ElementaryTypeName","src":"2257:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"tokenId","nameLocation":"2277:7:23","nodeType":"VariableDeclaration","scope":1261,"src":"2269:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1257,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:43:23"},"returnParameters":{"id":1260,"nodeType":"ParameterList","parameters":[],"src":"2294:0:23"},"scope":1318,"src":"2221:74:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"2301:663:23","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1271,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2978:16:23","nodeType":"FunctionDefinition","parameters":{"id":1269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"from","nameLocation":"3003:4:23","nodeType":"VariableDeclaration","scope":1271,"src":"2995:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1266,"mutability":"mutable","name":"to","nameLocation":"3017:2:23","nodeType":"VariableDeclaration","scope":1271,"src":"3009:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1265,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1268,"mutability":"mutable","name":"tokenId","nameLocation":"3029:7:23","nodeType":"VariableDeclaration","scope":1271,"src":"3021:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1267,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:43:23"},"returnParameters":{"id":1270,"nodeType":"ParameterList","parameters":[],"src":"3046:0:23"},"scope":1318,"src":"2969:78:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1272,"nodeType":"StructuredDocumentation","src":"3053:735:23","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1283,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3802:16:23","nodeType":"FunctionDefinition","parameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1274,"mutability":"mutable","name":"from","nameLocation":"3827:4:23","nodeType":"VariableDeclaration","scope":1283,"src":"3819:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1273,"name":"address","nodeType":"ElementaryTypeName","src":"3819:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1276,"mutability":"mutable","name":"to","nameLocation":"3841:2:23","nodeType":"VariableDeclaration","scope":1283,"src":"3833:10:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"tokenId","nameLocation":"3853:7:23","nodeType":"VariableDeclaration","scope":1283,"src":"3845:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1277,"name":"uint256","nodeType":"ElementaryTypeName","src":"3845:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1280,"mutability":"mutable","name":"data","nameLocation":"3877:4:23","nodeType":"VariableDeclaration","scope":1283,"src":"3862:19:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1279,"name":"bytes","nodeType":"ElementaryTypeName","src":"3862:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3818:64:23"},"returnParameters":{"id":1282,"nodeType":"ParameterList","parameters":[],"src":"3891:0:23"},"scope":1318,"src":"3793:99:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1284,"nodeType":"StructuredDocumentation","src":"3898:209:23","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1291,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4121:9:23","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"owner","nameLocation":"4139:5:23","nodeType":"VariableDeclaration","scope":1291,"src":"4131:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1285,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:23"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"balance","nameLocation":"4177:7:23","nodeType":"VariableDeclaration","scope":1291,"src":"4169:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1288,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:23"},"scope":1318,"src":"4112:74:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1292,"nodeType":"StructuredDocumentation","src":"4192:217:23","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1299,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4423:7:23","nodeType":"FunctionDefinition","parameters":{"id":1295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1294,"mutability":"mutable","name":"tokenId","nameLocation":"4439:7:23","nodeType":"VariableDeclaration","scope":1299,"src":"4431:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1293,"name":"uint256","nodeType":"ElementaryTypeName","src":"4431:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4430:17:23"},"returnParameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1297,"mutability":"mutable","name":"tokenOwner","nameLocation":"4479:10:23","nodeType":"VariableDeclaration","scope":1299,"src":"4471:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1296,"name":"address","nodeType":"ElementaryTypeName","src":"4471:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4470:20:23"},"scope":1318,"src":"4414:77:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1300,"nodeType":"StructuredDocumentation","src":"4497:285:23","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1307,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4796:11:23","nodeType":"FunctionDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1302,"mutability":"mutable","name":"tokenId","nameLocation":"4816:7:23","nodeType":"VariableDeclaration","scope":1307,"src":"4808:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1301,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4807:17:23"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"approved","nameLocation":"4856:8:23","nodeType":"VariableDeclaration","scope":1307,"src":"4848:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1304,"name":"address","nodeType":"ElementaryTypeName","src":"4848:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4847:18:23"},"scope":1318,"src":"4787:79:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1308,"nodeType":"StructuredDocumentation","src":"4872:323:23","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1317,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5209:16:23","nodeType":"FunctionDefinition","parameters":{"id":1313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1310,"mutability":"mutable","name":"owner","nameLocation":"5234:5:23","nodeType":"VariableDeclaration","scope":1317,"src":"5226:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1309,"name":"address","nodeType":"ElementaryTypeName","src":"5226:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1312,"mutability":"mutable","name":"operator","nameLocation":"5249:8:23","nodeType":"VariableDeclaration","scope":1317,"src":"5241:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1311,"name":"address","nodeType":"ElementaryTypeName","src":"5241:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5225:33:23"},"returnParameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1315,"mutability":"mutable","name":"approvedForAll","nameLocation":"5287:14:23","nodeType":"VariableDeclaration","scope":1317,"src":"5282:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1314,"name":"bool","nodeType":"ElementaryTypeName","src":"5282:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5281:21:23"},"scope":1318,"src":"5200:103:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1319,"src":"354:4951:23","usedErrors":[],"usedEvents":[]}],"src":"32:5274:23"},"id":23},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","exportedSymbols":{"Address":[1338]},"id":1339,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1320,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:24"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1338,"linearizedBaseContracts":[1338],"name":"Address","nameLocation":"66:7:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":1336,"nodeType":"Block","src":"344:122:24","statements":[{"assignments":[1329],"declarations":[{"constant":false,"id":1329,"mutability":"mutable","name":"size","nameLocation":"362:4:24","nodeType":"VariableDeclaration","scope":1336,"src":"354:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"354:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1330,"nodeType":"VariableDeclarationStatement","src":"354:12:24"},{"AST":{"nativeSrc":"385:49:24","nodeType":"YulBlock","src":"385:49:24","statements":[{"nativeSrc":"399:25:24","nodeType":"YulAssignment","src":"399:25:24","value":{"arguments":[{"name":"addr","nativeSrc":"419:4:24","nodeType":"YulIdentifier","src":"419:4:24"}],"functionName":{"name":"extcodesize","nativeSrc":"407:11:24","nodeType":"YulIdentifier","src":"407:11:24"},"nativeSrc":"407:17:24","nodeType":"YulFunctionCall","src":"407:17:24"},"variableNames":[{"name":"size","nativeSrc":"399:4:24","nodeType":"YulIdentifier","src":"399:4:24"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1323,"isOffset":false,"isSlot":false,"src":"419:4:24","valueSize":1},{"declaration":1329,"isOffset":false,"isSlot":false,"src":"399:4:24","valueSize":1}],"id":1331,"nodeType":"InlineAssembly","src":"376:58:24"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1332,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1329,"src":"450:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"458:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"450:9:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1327,"id":1335,"nodeType":"Return","src":"443:16:24"}]},"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"80:195:24","text":"@notice Checks if the address is a deployed smart contract.\n @param addr The address to check.\n @return hasBytecode True if `addr` is a deployed smart contract, false otherwise."},"id":1337,"implemented":true,"kind":"function","modifiers":[],"name":"hasBytecode","nameLocation":"289:11:24","nodeType":"FunctionDefinition","parameters":{"id":1324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1323,"mutability":"mutable","name":"addr","nameLocation":"309:4:24","nodeType":"VariableDeclaration","scope":1337,"src":"301:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1322,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"300:14:24"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"338:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1325,"name":"bool","nodeType":"ElementaryTypeName","src":"338:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"337:6:24"},"scope":1338,"src":"280:186:24","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1339,"src":"58:410:24","usedErrors":[],"usedEvents":[]}],"src":"32:437:24"},"id":24},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","exportedSymbols":{"IERC1363":[1420],"IERC165":[2363],"IERC20":[1506]},"id":1421,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1340,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:25"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"./IERC20.sol","id":1342,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1421,"sourceUnit":1429,"src":"133:36:25","symbolAliases":[{"foreign":{"id":1341,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"141:6:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":1344,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1421,"sourceUnit":1425,"src":"170:38:25","symbolAliases":[{"foreign":{"id":1343,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"178:7:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1346,"name":"IERC20","nameLocations":["590:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"590:6:25"},"id":1347,"nodeType":"InheritanceSpecifier","src":"590:6:25"},{"baseName":{"id":1348,"name":"IERC165","nameLocations":["598:7:25"],"nodeType":"IdentifierPath","referencedDeclaration":2363,"src":"598:7:25"},"id":1349,"nodeType":"InheritanceSpecifier","src":"598:7:25"}],"canonicalName":"IERC1363","contractDependencies":[],"contractKind":"interface","documentation":{"id":1345,"nodeType":"StructuredDocumentation","src":"210:357:25","text":" @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."},"fullyImplemented":false,"id":1420,"linearizedBaseContracts":[1420,2363,1506],"name":"IERC1363","nameLocation":"578:8:25","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"1148:370:25","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"1296ee62","id":1359,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"1532:15:25","nodeType":"FunctionDefinition","parameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"to","nameLocation":"1556:2:25","nodeType":"VariableDeclaration","scope":1359,"src":"1548:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1351,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1354,"mutability":"mutable","name":"value","nameLocation":"1568:5:25","nodeType":"VariableDeclaration","scope":1359,"src":"1560:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1353,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1547:27:25"},"returnParameters":{"id":1358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1359,"src":"1593:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1356,"name":"bool","nodeType":"ElementaryTypeName","src":"1593:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1592:6:25"},"scope":1420,"src":"1523:76:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1360,"nodeType":"StructuredDocumentation","src":"1605:453:25","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"4000aea0","id":1371,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"2072:15:25","nodeType":"FunctionDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1362,"mutability":"mutable","name":"to","nameLocation":"2096:2:25","nodeType":"VariableDeclaration","scope":1371,"src":"2088:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1361,"name":"address","nodeType":"ElementaryTypeName","src":"2088:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"value","nameLocation":"2108:5:25","nodeType":"VariableDeclaration","scope":1371,"src":"2100:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"2100:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1366,"mutability":"mutable","name":"data","nameLocation":"2130:4:25","nodeType":"VariableDeclaration","scope":1371,"src":"2115:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1365,"name":"bytes","nodeType":"ElementaryTypeName","src":"2115:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2087:48:25"},"returnParameters":{"id":1370,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1371,"src":"2154:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1368,"name":"bool","nodeType":"ElementaryTypeName","src":"2154:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2153:6:25"},"scope":1420,"src":"2063:97:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1372,"nodeType":"StructuredDocumentation","src":"2166:453:25","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"d8fbe994","id":1383,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"2633:19:25","nodeType":"FunctionDefinition","parameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1374,"mutability":"mutable","name":"from","nameLocation":"2661:4:25","nodeType":"VariableDeclaration","scope":1383,"src":"2653:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1373,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1376,"mutability":"mutable","name":"to","nameLocation":"2675:2:25","nodeType":"VariableDeclaration","scope":1383,"src":"2667:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1375,"name":"address","nodeType":"ElementaryTypeName","src":"2667:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1378,"mutability":"mutable","name":"value","nameLocation":"2687:5:25","nodeType":"VariableDeclaration","scope":1383,"src":"2679:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1377,"name":"uint256","nodeType":"ElementaryTypeName","src":"2679:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2652:41:25"},"returnParameters":{"id":1382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1383,"src":"2712:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1380,"name":"bool","nodeType":"ElementaryTypeName","src":"2712:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2711:6:25"},"scope":1420,"src":"2624:94:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1384,"nodeType":"StructuredDocumentation","src":"2724:536:25","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"c1d34b89","id":1397,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"3274:19:25","nodeType":"FunctionDefinition","parameters":{"id":1393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1386,"mutability":"mutable","name":"from","nameLocation":"3302:4:25","nodeType":"VariableDeclaration","scope":1397,"src":"3294:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1385,"name":"address","nodeType":"ElementaryTypeName","src":"3294:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1388,"mutability":"mutable","name":"to","nameLocation":"3316:2:25","nodeType":"VariableDeclaration","scope":1397,"src":"3308:10:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1387,"name":"address","nodeType":"ElementaryTypeName","src":"3308:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1390,"mutability":"mutable","name":"value","nameLocation":"3328:5:25","nodeType":"VariableDeclaration","scope":1397,"src":"3320:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1389,"name":"uint256","nodeType":"ElementaryTypeName","src":"3320:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1392,"mutability":"mutable","name":"data","nameLocation":"3350:4:25","nodeType":"VariableDeclaration","scope":1397,"src":"3335:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1391,"name":"bytes","nodeType":"ElementaryTypeName","src":"3335:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3293:62:25"},"returnParameters":{"id":1396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1395,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1397,"src":"3374:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1394,"name":"bool","nodeType":"ElementaryTypeName","src":"3374:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3373:6:25"},"scope":1420,"src":"3265:115:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1398,"nodeType":"StructuredDocumentation","src":"3386:390:25","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"3177029f","id":1407,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"3790:14:25","nodeType":"FunctionDefinition","parameters":{"id":1403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1400,"mutability":"mutable","name":"spender","nameLocation":"3813:7:25","nodeType":"VariableDeclaration","scope":1407,"src":"3805:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1399,"name":"address","nodeType":"ElementaryTypeName","src":"3805:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1402,"mutability":"mutable","name":"value","nameLocation":"3830:5:25","nodeType":"VariableDeclaration","scope":1407,"src":"3822:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1401,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3804:32:25"},"returnParameters":{"id":1406,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1405,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1407,"src":"3855:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1404,"name":"bool","nodeType":"ElementaryTypeName","src":"3855:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3854:6:25"},"scope":1420,"src":"3781:80:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"3867:478:25","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"cae9ca51","id":1419,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"4359:14:25","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1410,"mutability":"mutable","name":"spender","nameLocation":"4382:7:25","nodeType":"VariableDeclaration","scope":1419,"src":"4374:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1409,"name":"address","nodeType":"ElementaryTypeName","src":"4374:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1412,"mutability":"mutable","name":"value","nameLocation":"4399:5:25","nodeType":"VariableDeclaration","scope":1419,"src":"4391:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1411,"name":"uint256","nodeType":"ElementaryTypeName","src":"4391:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"data","nameLocation":"4421:4:25","nodeType":"VariableDeclaration","scope":1419,"src":"4406:19:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1413,"name":"bytes","nodeType":"ElementaryTypeName","src":"4406:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4373:53:25"},"returnParameters":{"id":1418,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1417,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1419,"src":"4445:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1416,"name":"bool","nodeType":"ElementaryTypeName","src":"4445:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4444:6:25"},"scope":1420,"src":"4350:101:25","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1421,"src":"568:3885:25","usedErrors":[],"usedEvents":[1440,1449]}],"src":"107:4347:25"},"id":25},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[2363]},"id":1425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1422,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:26"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":1424,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1425,"sourceUnit":2364,"src":"132:59:26","symbolAliases":[{"foreign":{"id":1423,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"140:7:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:26"},"id":26},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[1506]},"id":1429,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1426,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:27"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":1428,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1429,"sourceUnit":1507,"src":"131:49:27","symbolAliases":[{"foreign":{"id":1427,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"139:6:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"105:76:27"},"id":27},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1506]},"id":1507,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1430,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"132:71:28","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":1506,"linearizedBaseContracts":[1506],"name":"IERC20","nameLocation":"214:6:28","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1432,"nodeType":"StructuredDocumentation","src":"227:158:28","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1440,"name":"Transfer","nameLocation":"396:8:28","nodeType":"EventDefinition","parameters":{"id":1439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1434,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:28","nodeType":"VariableDeclaration","scope":1440,"src":"405:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1433,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1436,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:28","nodeType":"VariableDeclaration","scope":1440,"src":"427:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1435,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1438,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:28","nodeType":"VariableDeclaration","scope":1440,"src":"447:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1437,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:28"},"src":"390:72:28"},{"anonymous":false,"documentation":{"id":1441,"nodeType":"StructuredDocumentation","src":"468:148:28","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1449,"name":"Approval","nameLocation":"627:8:28","nodeType":"EventDefinition","parameters":{"id":1448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1443,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:28","nodeType":"VariableDeclaration","scope":1449,"src":"636:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1442,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1445,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:28","nodeType":"VariableDeclaration","scope":1449,"src":"659:23:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1444,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1447,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:28","nodeType":"VariableDeclaration","scope":1449,"src":"684:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1446,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:28"},"src":"621:78:28"},{"documentation":{"id":1450,"nodeType":"StructuredDocumentation","src":"705:65:28","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":1455,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:28","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[],"src":"795:2:28"},"returnParameters":{"id":1454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1453,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1455,"src":"821:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1452,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:28"},"scope":1506,"src":"775:55:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1456,"nodeType":"StructuredDocumentation","src":"836:71:28","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":1463,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:28","nodeType":"FunctionDefinition","parameters":{"id":1459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1458,"mutability":"mutable","name":"account","nameLocation":"939:7:28","nodeType":"VariableDeclaration","scope":1463,"src":"931:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1457,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:28"},"returnParameters":{"id":1462,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1461,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1463,"src":"971:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1460,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:28"},"scope":1506,"src":"912:68:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1464,"nodeType":"StructuredDocumentation","src":"986:213:28","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1473,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:28","nodeType":"FunctionDefinition","parameters":{"id":1469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"to","nameLocation":"1230:2:28","nodeType":"VariableDeclaration","scope":1473,"src":"1222:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1465,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"value","nameLocation":"1242:5:28","nodeType":"VariableDeclaration","scope":1473,"src":"1234:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:28"},"returnParameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1473,"src":"1267:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1470,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:28"},"scope":1506,"src":"1204:69:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"1279:264:28","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1483,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:28","nodeType":"FunctionDefinition","parameters":{"id":1479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1476,"mutability":"mutable","name":"owner","nameLocation":"1575:5:28","nodeType":"VariableDeclaration","scope":1483,"src":"1567:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1475,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1478,"mutability":"mutable","name":"spender","nameLocation":"1590:7:28","nodeType":"VariableDeclaration","scope":1483,"src":"1582:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1477,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:28"},"returnParameters":{"id":1482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1481,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1483,"src":"1622:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1480,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:28"},"scope":1506,"src":"1548:83:28","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1484,"nodeType":"StructuredDocumentation","src":"1637:667:28","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1493,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:28","nodeType":"FunctionDefinition","parameters":{"id":1489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"spender","nameLocation":"2334:7:28","nodeType":"VariableDeclaration","scope":1493,"src":"2326:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1485,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1488,"mutability":"mutable","name":"value","nameLocation":"2351:5:28","nodeType":"VariableDeclaration","scope":1493,"src":"2343:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1487,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:28"},"returnParameters":{"id":1492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1491,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1493,"src":"2376:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1490,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:28"},"scope":1506,"src":"2309:73:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1494,"nodeType":"StructuredDocumentation","src":"2388:297:28","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1505,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:28","nodeType":"FunctionDefinition","parameters":{"id":1501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1496,"mutability":"mutable","name":"from","nameLocation":"2720:4:28","nodeType":"VariableDeclaration","scope":1505,"src":"2712:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1495,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"to","nameLocation":"2734:2:28","nodeType":"VariableDeclaration","scope":1505,"src":"2726:10:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1497,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1500,"mutability":"mutable","name":"value","nameLocation":"2746:5:28","nodeType":"VariableDeclaration","scope":1505,"src":"2738:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1499,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:28"},"returnParameters":{"id":1504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1505,"src":"2771:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1502,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:28"},"scope":1506,"src":"2690:87:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1507,"src":"204:2575:28","usedErrors":[],"usedEvents":[1440,1449]}],"src":"106:2674:28"},"id":28},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"IERC1363":[1420],"IERC20":[1506],"SafeERC20":[1915]},"id":1916,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1508,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:29"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1916,"sourceUnit":1507,"src":"141:37:29","symbolAliases":[{"foreign":{"id":1509,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"149:6:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","file":"../../../interfaces/IERC1363.sol","id":1512,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1916,"sourceUnit":1421,"src":"179:58:29","symbolAliases":[{"foreign":{"id":1511,"name":"IERC1363","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1420,"src":"187:8:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1513,"nodeType":"StructuredDocumentation","src":"239:458:29","text":" @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1915,"linearizedBaseContracts":[1915],"name":"SafeERC20","nameLocation":"706:9:29","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1514,"nodeType":"StructuredDocumentation","src":"722:65:29","text":" @dev An operation with an ERC-20 token failed."},"errorSelector":"5274afe7","id":1518,"name":"SafeERC20FailedOperation","nameLocation":"798:24:29","nodeType":"ErrorDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"token","nameLocation":"831:5:29","nodeType":"VariableDeclaration","scope":1518,"src":"823:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1515,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"822:15:29"},"src":"792:46:29"},{"documentation":{"id":1519,"nodeType":"StructuredDocumentation","src":"844:71:29","text":" @dev Indicates a failed `decreaseAllowance` request."},"errorSelector":"e570110f","id":1527,"name":"SafeERC20FailedDecreaseAllowance","nameLocation":"926:32:29","nodeType":"ErrorDefinition","parameters":{"id":1526,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"spender","nameLocation":"967:7:29","nodeType":"VariableDeclaration","scope":1527,"src":"959:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1520,"name":"address","nodeType":"ElementaryTypeName","src":"959:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"currentAllowance","nameLocation":"984:16:29","nodeType":"VariableDeclaration","scope":1527,"src":"976:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1522,"name":"uint256","nodeType":"ElementaryTypeName","src":"976:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"requestedDecrease","nameLocation":"1010:17:29","nodeType":"VariableDeclaration","scope":1527,"src":"1002:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"1002:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"958:70:29"},"src":"920:109:29"},{"body":{"id":1550,"nodeType":"Block","src":"1291:88:29","statements":[{"expression":{"arguments":[{"id":1539,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1321:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":1542,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1531,"src":"1343:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1349:8:29","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1473,"src":"1343:14:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":1544,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"1360:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1545,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"1364:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1546,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1359:11:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":1540,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1328:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1541,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1332:10:29","memberName":"encodeCall","nodeType":"MemberAccess","src":"1328:14:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1328:43:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1538,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"1301:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1301:71:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1549,"nodeType":"ExpressionStatement","src":"1301:71:29"}]},"documentation":{"id":1528,"nodeType":"StructuredDocumentation","src":"1035:179:29","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1551,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1228:12:29","nodeType":"FunctionDefinition","parameters":{"id":1536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1531,"mutability":"mutable","name":"token","nameLocation":"1248:5:29","nodeType":"VariableDeclaration","scope":1551,"src":"1241:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},"typeName":{"id":1530,"nodeType":"UserDefinedTypeName","pathNode":{"id":1529,"name":"IERC20","nameLocations":["1241:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"1241:6:29"},"referencedDeclaration":1506,"src":"1241:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1533,"mutability":"mutable","name":"to","nameLocation":"1263:2:29","nodeType":"VariableDeclaration","scope":1551,"src":"1255:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1532,"name":"address","nodeType":"ElementaryTypeName","src":"1255:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1535,"mutability":"mutable","name":"value","nameLocation":"1275:5:29","nodeType":"VariableDeclaration","scope":1551,"src":"1267:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1534,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1240:41:29"},"returnParameters":{"id":1537,"nodeType":"ParameterList","parameters":[],"src":"1291:0:29"},"scope":1915,"src":"1219:160:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1577,"nodeType":"Block","src":"1708:98:29","statements":[{"expression":{"arguments":[{"id":1565,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"1738:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":1568,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1555,"src":"1760:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1766:12:29","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1505,"src":"1760:18:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},{"components":[{"id":1570,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1557,"src":"1781:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1571,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1559,"src":"1787:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1572,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"1791:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1573,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1780:17:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}],"expression":{"id":1566,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1745:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1749:10:29","memberName":"encodeCall","nodeType":"MemberAccess","src":"1745:14:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1745:53:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1564,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"1718:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:81:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1576,"nodeType":"ExpressionStatement","src":"1718:81:29"}]},"documentation":{"id":1552,"nodeType":"StructuredDocumentation","src":"1385:228:29","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":1578,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1627:16:29","nodeType":"FunctionDefinition","parameters":{"id":1562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1555,"mutability":"mutable","name":"token","nameLocation":"1651:5:29","nodeType":"VariableDeclaration","scope":1578,"src":"1644:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},"typeName":{"id":1554,"nodeType":"UserDefinedTypeName","pathNode":{"id":1553,"name":"IERC20","nameLocations":["1644:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"1644:6:29"},"referencedDeclaration":1506,"src":"1644:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1557,"mutability":"mutable","name":"from","nameLocation":"1666:4:29","nodeType":"VariableDeclaration","scope":1578,"src":"1658:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1556,"name":"address","nodeType":"ElementaryTypeName","src":"1658:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1559,"mutability":"mutable","name":"to","nameLocation":"1680:2:29","nodeType":"VariableDeclaration","scope":1578,"src":"1672:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1558,"name":"address","nodeType":"ElementaryTypeName","src":"1672:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1561,"mutability":"mutable","name":"value","nameLocation":"1692:5:29","nodeType":"VariableDeclaration","scope":1578,"src":"1684:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1560,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1643:55:29"},"returnParameters":{"id":1563,"nodeType":"ParameterList","parameters":[],"src":"1708:0:29"},"scope":1915,"src":"1618:188:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1608,"nodeType":"Block","src":"2548:139:29","statements":[{"assignments":[1590],"declarations":[{"constant":false,"id":1590,"mutability":"mutable","name":"oldAllowance","nameLocation":"2566:12:29","nodeType":"VariableDeclaration","scope":1608,"src":"2558:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1589,"name":"uint256","nodeType":"ElementaryTypeName","src":"2558:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1599,"initialValue":{"arguments":[{"arguments":[{"id":1595,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2605:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1915","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1915","typeString":"library SafeERC20"}],"id":1594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2597:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1593,"name":"address","nodeType":"ElementaryTypeName","src":"2597:7:29","typeDescriptions":{}}},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2597:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1597,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"2612:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1591,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"2581:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2587:9:29","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1483,"src":"2581:15:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2581:39:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2558:62:29"},{"expression":{"arguments":[{"id":1601,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"2643:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},{"id":1602,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"2650:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1603,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"2659:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1586,"src":"2674:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2659:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1600,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"2630:12:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:50:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1607,"nodeType":"ExpressionStatement","src":"2630:50:29"}]},"documentation":{"id":1579,"nodeType":"StructuredDocumentation","src":"1812:645:29","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":1609,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2471:21:29","nodeType":"FunctionDefinition","parameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1582,"mutability":"mutable","name":"token","nameLocation":"2500:5:29","nodeType":"VariableDeclaration","scope":1609,"src":"2493:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},"typeName":{"id":1581,"nodeType":"UserDefinedTypeName","pathNode":{"id":1580,"name":"IERC20","nameLocations":["2493:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"2493:6:29"},"referencedDeclaration":1506,"src":"2493:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"spender","nameLocation":"2515:7:29","nodeType":"VariableDeclaration","scope":1609,"src":"2507:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1583,"name":"address","nodeType":"ElementaryTypeName","src":"2507:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1586,"mutability":"mutable","name":"value","nameLocation":"2532:5:29","nodeType":"VariableDeclaration","scope":1609,"src":"2524:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1585,"name":"uint256","nodeType":"ElementaryTypeName","src":"2524:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2492:46:29"},"returnParameters":{"id":1588,"nodeType":"ParameterList","parameters":[],"src":"2548:0:29"},"scope":1915,"src":"2462:225:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1651,"nodeType":"Block","src":"3453:370:29","statements":[{"id":1650,"nodeType":"UncheckedBlock","src":"3463:354:29","statements":[{"assignments":[1621],"declarations":[{"constant":false,"id":1621,"mutability":"mutable","name":"currentAllowance","nameLocation":"3495:16:29","nodeType":"VariableDeclaration","scope":1650,"src":"3487:24:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1620,"name":"uint256","nodeType":"ElementaryTypeName","src":"3487:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1630,"initialValue":{"arguments":[{"arguments":[{"id":1626,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3538:4:29","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1915","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1915","typeString":"library SafeERC20"}],"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3530:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1624,"name":"address","nodeType":"ElementaryTypeName","src":"3530:7:29","typeDescriptions":{}}},"id":1627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3530:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1628,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"3545:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1622,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"3514:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3520:9:29","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1483,"src":"3514:15:29","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:39:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3487:66:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1631,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"3571:16:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1632,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"3590:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3571:36:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1641,"nodeType":"IfStatement","src":"3567:160:29","trueBody":{"id":1640,"nodeType":"Block","src":"3609:118:29","statements":[{"errorCall":{"arguments":[{"id":1635,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"3667:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1636,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"3676:16:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1637,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"3694:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1634,"name":"SafeERC20FailedDecreaseAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"3634:32:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:78:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1639,"nodeType":"RevertStatement","src":"3627:85:29"}]}},{"expression":{"arguments":[{"id":1643,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"3753:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},{"id":1644,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1615,"src":"3760:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1645,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"3769:16:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1646,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"3788:17:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3769:36:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1642,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"3740:12:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3740:66:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1649,"nodeType":"ExpressionStatement","src":"3740:66:29"}]}]},"documentation":{"id":1610,"nodeType":"StructuredDocumentation","src":"2693:657:29","text":" @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":1652,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3364:21:29","nodeType":"FunctionDefinition","parameters":{"id":1618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1613,"mutability":"mutable","name":"token","nameLocation":"3393:5:29","nodeType":"VariableDeclaration","scope":1652,"src":"3386:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},"typeName":{"id":1612,"nodeType":"UserDefinedTypeName","pathNode":{"id":1611,"name":"IERC20","nameLocations":["3386:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"3386:6:29"},"referencedDeclaration":1506,"src":"3386:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1615,"mutability":"mutable","name":"spender","nameLocation":"3408:7:29","nodeType":"VariableDeclaration","scope":1652,"src":"3400:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1614,"name":"address","nodeType":"ElementaryTypeName","src":"3400:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"requestedDecrease","nameLocation":"3425:17:29","nodeType":"VariableDeclaration","scope":1652,"src":"3417:25:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1616,"name":"uint256","nodeType":"ElementaryTypeName","src":"3417:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3385:58:29"},"returnParameters":{"id":1619,"nodeType":"ParameterList","parameters":[],"src":"3453:0:29"},"scope":1915,"src":"3355:468:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1698,"nodeType":"Block","src":"4477:303:29","statements":[{"assignments":[1664],"declarations":[{"constant":false,"id":1664,"mutability":"mutable","name":"approvalCall","nameLocation":"4500:12:29","nodeType":"VariableDeclaration","scope":1698,"src":"4487:25:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1663,"name":"bytes","nodeType":"ElementaryTypeName","src":"4487:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1673,"initialValue":{"arguments":[{"expression":{"id":1667,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4530:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4536:7:29","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1493,"src":"4530:13:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":1669,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"4546:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1670,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1660,"src":"4555:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1671,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4545:16:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":1665,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4515:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1666,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4519:10:29","memberName":"encodeCall","nodeType":"MemberAccess","src":"4515:14:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4515:47:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4487:75:29"},{"condition":{"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4577:45:29","subExpression":{"arguments":[{"id":1675,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4602:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},{"id":1676,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"4609:12:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1674,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"4578:23:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:44:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1697,"nodeType":"IfStatement","src":"4573:201:29","trueBody":{"id":1696,"nodeType":"Block","src":"4624:150:29","statements":[{"expression":{"arguments":[{"id":1680,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4658:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":1683,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4680:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4686:7:29","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1493,"src":"4680:13:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":1685,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"4696:7:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4705:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":1687,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4695:12:29","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}],"expression":{"id":1681,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4665:3:29","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4669:10:29","memberName":"encodeCall","nodeType":"MemberAccess","src":"4665:14:29","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4665:43:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1679,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"4638:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4638:71:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1690,"nodeType":"ExpressionStatement","src":"4638:71:29"},{"expression":{"arguments":[{"id":1692,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"4743:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},{"id":1693,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1664,"src":"4750:12:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1691,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"4723:19:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4723:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1695,"nodeType":"ExpressionStatement","src":"4723:40:29"}]}}]},"documentation":{"id":1653,"nodeType":"StructuredDocumentation","src":"3829:566:29","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."},"id":1699,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"4409:12:29","nodeType":"FunctionDefinition","parameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1656,"mutability":"mutable","name":"token","nameLocation":"4429:5:29","nodeType":"VariableDeclaration","scope":1699,"src":"4422:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},"typeName":{"id":1655,"nodeType":"UserDefinedTypeName","pathNode":{"id":1654,"name":"IERC20","nameLocations":["4422:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"4422:6:29"},"referencedDeclaration":1506,"src":"4422:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1658,"mutability":"mutable","name":"spender","nameLocation":"4444:7:29","nodeType":"VariableDeclaration","scope":1699,"src":"4436:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1657,"name":"address","nodeType":"ElementaryTypeName","src":"4436:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1660,"mutability":"mutable","name":"value","nameLocation":"4461:5:29","nodeType":"VariableDeclaration","scope":1699,"src":"4453:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1659,"name":"uint256","nodeType":"ElementaryTypeName","src":"4453:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4421:46:29"},"returnParameters":{"id":1662,"nodeType":"ParameterList","parameters":[],"src":"4477:0:29"},"scope":1915,"src":"4400:380:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1741,"nodeType":"Block","src":"5227:219:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1712,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5241:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5244:4:29","memberName":"code","nodeType":"MemberAccess","src":"5241:7:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5249:6:29","memberName":"length","nodeType":"MemberAccess","src":"5241:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5259:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5241:19:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5327:39:29","subExpression":{"arguments":[{"id":1726,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5350:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1727,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5354:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1728,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"5361:4:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1724,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"5328:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5334:15:29","memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":1371,"src":"5328:21:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:38:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1739,"nodeType":"IfStatement","src":"5323:117:29","trueBody":{"id":1738,"nodeType":"Block","src":"5368:72:29","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1734,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"5422:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}],"id":1733,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5414:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1732,"name":"address","nodeType":"ElementaryTypeName","src":"5414:7:29","typeDescriptions":{}}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5414:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1731,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"5389:24:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1737,"nodeType":"RevertStatement","src":"5382:47:29"}]}},"id":1740,"nodeType":"IfStatement","src":"5237:203:29","trueBody":{"id":1723,"nodeType":"Block","src":"5262:55:29","statements":[{"expression":{"arguments":[{"id":1718,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"5289:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},{"id":1719,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5296:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1720,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"5300:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1717,"name":"safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"5276:12:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5276:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1722,"nodeType":"ExpressionStatement","src":"5276:30:29"}]}}]},"documentation":{"id":1700,"nodeType":"StructuredDocumentation","src":"4786:333:29","text":" @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":1742,"implemented":true,"kind":"function","modifiers":[],"name":"transferAndCallRelaxed","nameLocation":"5133:22:29","nodeType":"FunctionDefinition","parameters":{"id":1710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"token","nameLocation":"5165:5:29","nodeType":"VariableDeclaration","scope":1742,"src":"5156:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"},"typeName":{"id":1702,"nodeType":"UserDefinedTypeName","pathNode":{"id":1701,"name":"IERC1363","nameLocations":["5156:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"5156:8:29"},"referencedDeclaration":1420,"src":"5156:8:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":1705,"mutability":"mutable","name":"to","nameLocation":"5180:2:29","nodeType":"VariableDeclaration","scope":1742,"src":"5172:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1704,"name":"address","nodeType":"ElementaryTypeName","src":"5172:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1707,"mutability":"mutable","name":"value","nameLocation":"5192:5:29","nodeType":"VariableDeclaration","scope":1742,"src":"5184:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1706,"name":"uint256","nodeType":"ElementaryTypeName","src":"5184:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1709,"mutability":"mutable","name":"data","nameLocation":"5212:4:29","nodeType":"VariableDeclaration","scope":1742,"src":"5199:17:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1708,"name":"bytes","nodeType":"ElementaryTypeName","src":"5199:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5155:62:29"},"returnParameters":{"id":1711,"nodeType":"ParameterList","parameters":[],"src":"5227:0:29"},"scope":1915,"src":"5124:322:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1788,"nodeType":"Block","src":"5965:239:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1757,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"5979:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5982:4:29","memberName":"code","nodeType":"MemberAccess","src":"5979:7:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5987:6:29","memberName":"length","nodeType":"MemberAccess","src":"5979:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5997:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5979:19:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6075:49:29","subExpression":{"arguments":[{"id":1772,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"6102:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1773,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"6108:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1774,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"6112:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1775,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"6119:4:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1770,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6076:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},"id":1771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6082:19:29","memberName":"transferFromAndCall","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"6076:25:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) external returns (bool)"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6076:48:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1786,"nodeType":"IfStatement","src":"6071:127:29","trueBody":{"id":1785,"nodeType":"Block","src":"6126:72:29","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1781,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6180:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}],"id":1780,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6172:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1779,"name":"address","nodeType":"ElementaryTypeName","src":"6172:7:29","typeDescriptions":{}}},"id":1782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6172:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1778,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"6147:24:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6147:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1784,"nodeType":"RevertStatement","src":"6140:47:29"}]}},"id":1787,"nodeType":"IfStatement","src":"5975:223:29","trueBody":{"id":1769,"nodeType":"Block","src":"6000:65:29","statements":[{"expression":{"arguments":[{"id":1763,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6031:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},{"id":1764,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1748,"src":"6038:4:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1765,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1750,"src":"6044:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"6048:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1762,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"6014:16:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6014:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1768,"nodeType":"ExpressionStatement","src":"6014:40:29"}]}}]},"documentation":{"id":1743,"nodeType":"StructuredDocumentation","src":"5452:341:29","text":" @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":1789,"implemented":true,"kind":"function","modifiers":[],"name":"transferFromAndCallRelaxed","nameLocation":"5807:26:29","nodeType":"FunctionDefinition","parameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"token","nameLocation":"5852:5:29","nodeType":"VariableDeclaration","scope":1789,"src":"5843:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"},"typeName":{"id":1745,"nodeType":"UserDefinedTypeName","pathNode":{"id":1744,"name":"IERC1363","nameLocations":["5843:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"5843:8:29"},"referencedDeclaration":1420,"src":"5843:8:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":1748,"mutability":"mutable","name":"from","nameLocation":"5875:4:29","nodeType":"VariableDeclaration","scope":1789,"src":"5867:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1747,"name":"address","nodeType":"ElementaryTypeName","src":"5867:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1750,"mutability":"mutable","name":"to","nameLocation":"5897:2:29","nodeType":"VariableDeclaration","scope":1789,"src":"5889:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1749,"name":"address","nodeType":"ElementaryTypeName","src":"5889:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1752,"mutability":"mutable","name":"value","nameLocation":"5917:5:29","nodeType":"VariableDeclaration","scope":1789,"src":"5909:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1751,"name":"uint256","nodeType":"ElementaryTypeName","src":"5909:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1754,"mutability":"mutable","name":"data","nameLocation":"5945:4:29","nodeType":"VariableDeclaration","scope":1789,"src":"5932:17:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1753,"name":"bytes","nodeType":"ElementaryTypeName","src":"5932:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5833:122:29"},"returnParameters":{"id":1756,"nodeType":"ParameterList","parameters":[],"src":"5965:0:29"},"scope":1915,"src":"5798:406:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1831,"nodeType":"Block","src":"6971:218:29","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1802,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"6985:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6988:4:29","memberName":"code","nodeType":"MemberAccess","src":"6985:7:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6993:6:29","memberName":"length","nodeType":"MemberAccess","src":"6985:14:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7003:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:19:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7071:38:29","subExpression":{"arguments":[{"id":1816,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"7093:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"7097:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1818,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"7104:4:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1814,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"7072:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7078:14:29","memberName":"approveAndCall","nodeType":"MemberAccess","referencedDeclaration":1419,"src":"7072:20:29","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:37:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1829,"nodeType":"IfStatement","src":"7067:116:29","trueBody":{"id":1828,"nodeType":"Block","src":"7111:72:29","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1824,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"7165:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}],"id":1823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7157:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1822,"name":"address","nodeType":"ElementaryTypeName","src":"7157:7:29","typeDescriptions":{}}},"id":1825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7157:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1821,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"7132:24:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7132:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1827,"nodeType":"RevertStatement","src":"7125:47:29"}]}},"id":1830,"nodeType":"IfStatement","src":"6981:202:29","trueBody":{"id":1813,"nodeType":"Block","src":"7006:55:29","statements":[{"expression":{"arguments":[{"id":1808,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"7033:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},{"id":1809,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1795,"src":"7040:2:29","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1810,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1797,"src":"7044:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1807,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1699,"src":"7020:12:29","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1506_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":1811,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7020:30:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1812,"nodeType":"ExpressionStatement","src":"7020:30:29"}]}}]},"documentation":{"id":1790,"nodeType":"StructuredDocumentation","src":"6210:654:29","text":" @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."},"id":1832,"implemented":true,"kind":"function","modifiers":[],"name":"approveAndCallRelaxed","nameLocation":"6878:21:29","nodeType":"FunctionDefinition","parameters":{"id":1800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1793,"mutability":"mutable","name":"token","nameLocation":"6909:5:29","nodeType":"VariableDeclaration","scope":1832,"src":"6900:14:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"},"typeName":{"id":1792,"nodeType":"UserDefinedTypeName","pathNode":{"id":1791,"name":"IERC1363","nameLocations":["6900:8:29"],"nodeType":"IdentifierPath","referencedDeclaration":1420,"src":"6900:8:29"},"referencedDeclaration":1420,"src":"6900:8:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$1420","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":1795,"mutability":"mutable","name":"to","nameLocation":"6924:2:29","nodeType":"VariableDeclaration","scope":1832,"src":"6916:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1794,"name":"address","nodeType":"ElementaryTypeName","src":"6916:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1797,"mutability":"mutable","name":"value","nameLocation":"6936:5:29","nodeType":"VariableDeclaration","scope":1832,"src":"6928:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1796,"name":"uint256","nodeType":"ElementaryTypeName","src":"6928:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1799,"mutability":"mutable","name":"data","nameLocation":"6956:4:29","nodeType":"VariableDeclaration","scope":1832,"src":"6943:17:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1798,"name":"bytes","nodeType":"ElementaryTypeName","src":"6943:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6899:62:29"},"returnParameters":{"id":1801,"nodeType":"ParameterList","parameters":[],"src":"6971:0:29"},"scope":1915,"src":"6869:320:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1872,"nodeType":"Block","src":"7756:650:29","statements":[{"assignments":[1842],"declarations":[{"constant":false,"id":1842,"mutability":"mutable","name":"returnSize","nameLocation":"7774:10:29","nodeType":"VariableDeclaration","scope":1872,"src":"7766:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1841,"name":"uint256","nodeType":"ElementaryTypeName","src":"7766:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1843,"nodeType":"VariableDeclarationStatement","src":"7766:18:29"},{"assignments":[1845],"declarations":[{"constant":false,"id":1845,"mutability":"mutable","name":"returnValue","nameLocation":"7802:11:29","nodeType":"VariableDeclaration","scope":1872,"src":"7794:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1844,"name":"uint256","nodeType":"ElementaryTypeName","src":"7794:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1846,"nodeType":"VariableDeclarationStatement","src":"7794:19:29"},{"AST":{"nativeSrc":"7848:396:29","nodeType":"YulBlock","src":"7848:396:29","statements":[{"nativeSrc":"7862:75:29","nodeType":"YulVariableDeclaration","src":"7862:75:29","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"7882:3:29","nodeType":"YulIdentifier","src":"7882:3:29"},"nativeSrc":"7882:5:29","nodeType":"YulFunctionCall","src":"7882:5:29"},{"name":"token","nativeSrc":"7889:5:29","nodeType":"YulIdentifier","src":"7889:5:29"},{"kind":"number","nativeSrc":"7896:1:29","nodeType":"YulLiteral","src":"7896:1:29","type":"","value":"0"},{"arguments":[{"name":"data","nativeSrc":"7903:4:29","nodeType":"YulIdentifier","src":"7903:4:29"},{"kind":"number","nativeSrc":"7909:4:29","nodeType":"YulLiteral","src":"7909:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7899:3:29","nodeType":"YulIdentifier","src":"7899:3:29"},"nativeSrc":"7899:15:29","nodeType":"YulFunctionCall","src":"7899:15:29"},{"arguments":[{"name":"data","nativeSrc":"7922:4:29","nodeType":"YulIdentifier","src":"7922:4:29"}],"functionName":{"name":"mload","nativeSrc":"7916:5:29","nodeType":"YulIdentifier","src":"7916:5:29"},"nativeSrc":"7916:11:29","nodeType":"YulFunctionCall","src":"7916:11:29"},{"kind":"number","nativeSrc":"7929:1:29","nodeType":"YulLiteral","src":"7929:1:29","type":"","value":"0"},{"kind":"number","nativeSrc":"7932:4:29","nodeType":"YulLiteral","src":"7932:4:29","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"7877:4:29","nodeType":"YulIdentifier","src":"7877:4:29"},"nativeSrc":"7877:60:29","nodeType":"YulFunctionCall","src":"7877:60:29"},"variables":[{"name":"success","nativeSrc":"7866:7:29","nodeType":"YulTypedName","src":"7866:7:29","type":""}]},{"body":{"nativeSrc":"7998:157:29","nodeType":"YulBlock","src":"7998:157:29","statements":[{"nativeSrc":"8016:22:29","nodeType":"YulVariableDeclaration","src":"8016:22:29","value":{"arguments":[{"kind":"number","nativeSrc":"8033:4:29","nodeType":"YulLiteral","src":"8033:4:29","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"8027:5:29","nodeType":"YulIdentifier","src":"8027:5:29"},"nativeSrc":"8027:11:29","nodeType":"YulFunctionCall","src":"8027:11:29"},"variables":[{"name":"ptr","nativeSrc":"8020:3:29","nodeType":"YulTypedName","src":"8020:3:29","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8070:3:29","nodeType":"YulIdentifier","src":"8070:3:29"},{"kind":"number","nativeSrc":"8075:1:29","nodeType":"YulLiteral","src":"8075:1:29","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8078:14:29","nodeType":"YulIdentifier","src":"8078:14:29"},"nativeSrc":"8078:16:29","nodeType":"YulFunctionCall","src":"8078:16:29"}],"functionName":{"name":"returndatacopy","nativeSrc":"8055:14:29","nodeType":"YulIdentifier","src":"8055:14:29"},"nativeSrc":"8055:40:29","nodeType":"YulFunctionCall","src":"8055:40:29"},"nativeSrc":"8055:40:29","nodeType":"YulExpressionStatement","src":"8055:40:29"},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8119:3:29","nodeType":"YulIdentifier","src":"8119:3:29"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8124:14:29","nodeType":"YulIdentifier","src":"8124:14:29"},"nativeSrc":"8124:16:29","nodeType":"YulFunctionCall","src":"8124:16:29"}],"functionName":{"name":"revert","nativeSrc":"8112:6:29","nodeType":"YulIdentifier","src":"8112:6:29"},"nativeSrc":"8112:29:29","nodeType":"YulFunctionCall","src":"8112:29:29"},"nativeSrc":"8112:29:29","nodeType":"YulExpressionStatement","src":"8112:29:29"}]},"condition":{"arguments":[{"name":"success","nativeSrc":"7989:7:29","nodeType":"YulIdentifier","src":"7989:7:29"}],"functionName":{"name":"iszero","nativeSrc":"7982:6:29","nodeType":"YulIdentifier","src":"7982:6:29"},"nativeSrc":"7982:15:29","nodeType":"YulFunctionCall","src":"7982:15:29"},"nativeSrc":"7979:176:29","nodeType":"YulIf","src":"7979:176:29"},{"nativeSrc":"8168:30:29","nodeType":"YulAssignment","src":"8168:30:29","value":{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8182:14:29","nodeType":"YulIdentifier","src":"8182:14:29"},"nativeSrc":"8182:16:29","nodeType":"YulFunctionCall","src":"8182:16:29"},"variableNames":[{"name":"returnSize","nativeSrc":"8168:10:29","nodeType":"YulIdentifier","src":"8168:10:29"}]},{"nativeSrc":"8211:23:29","nodeType":"YulAssignment","src":"8211:23:29","value":{"arguments":[{"kind":"number","nativeSrc":"8232:1:29","nodeType":"YulLiteral","src":"8232:1:29","type":"","value":"0"}],"functionName":{"name":"mload","nativeSrc":"8226:5:29","nodeType":"YulIdentifier","src":"8226:5:29"},"nativeSrc":"8226:8:29","nodeType":"YulFunctionCall","src":"8226:8:29"},"variableNames":[{"name":"returnValue","nativeSrc":"8211:11:29","nodeType":"YulIdentifier","src":"8211:11:29"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1838,"isOffset":false,"isSlot":false,"src":"7903:4:29","valueSize":1},{"declaration":1838,"isOffset":false,"isSlot":false,"src":"7922:4:29","valueSize":1},{"declaration":1842,"isOffset":false,"isSlot":false,"src":"8168:10:29","valueSize":1},{"declaration":1845,"isOffset":false,"isSlot":false,"src":"8211:11:29","valueSize":1},{"declaration":1836,"isOffset":false,"isSlot":false,"src":"7889:5:29","valueSize":1}],"flags":["memory-safe"],"id":1847,"nodeType":"InlineAssembly","src":"7823:421:29"},{"condition":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1848,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"8258:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8272:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8258:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1859,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"8310:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":1860,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8325:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8310:16:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8258:68:29","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":1853,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"8284:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}],"id":1852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8276:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1851,"name":"address","nodeType":"ElementaryTypeName","src":"8276:7:29","typeDescriptions":{}}},"id":1854,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8276:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8291:4:29","memberName":"code","nodeType":"MemberAccess","src":"8276:19:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8296:6:29","memberName":"length","nodeType":"MemberAccess","src":"8276:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8306:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8276:31:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1871,"nodeType":"IfStatement","src":"8254:146:29","trueBody":{"id":1870,"nodeType":"Block","src":"8328:72:29","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1866,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"8382:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}],"id":1865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8374:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1864,"name":"address","nodeType":"ElementaryTypeName","src":"8374:7:29","typeDescriptions":{}}},"id":1867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8374:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1863,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"8349:24:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8349:40:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1869,"nodeType":"RevertStatement","src":"8342:47:29"}]}}]},"documentation":{"id":1833,"nodeType":"StructuredDocumentation","src":"7195:486:29","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."},"id":1873,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"7695:19:29","nodeType":"FunctionDefinition","parameters":{"id":1839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"token","nameLocation":"7722:5:29","nodeType":"VariableDeclaration","scope":1873,"src":"7715:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},"typeName":{"id":1835,"nodeType":"UserDefinedTypeName","pathNode":{"id":1834,"name":"IERC20","nameLocations":["7715:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"7715:6:29"},"referencedDeclaration":1506,"src":"7715:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"data","nameLocation":"7742:4:29","nodeType":"VariableDeclaration","scope":1873,"src":"7729:17:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1837,"name":"bytes","nodeType":"ElementaryTypeName","src":"7729:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7714:33:29"},"returnParameters":{"id":1840,"nodeType":"ParameterList","parameters":[],"src":"7756:0:29"},"scope":1915,"src":"7686:720:29","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1913,"nodeType":"Block","src":"8997:391:29","statements":[{"assignments":[1885],"declarations":[{"constant":false,"id":1885,"mutability":"mutable","name":"success","nameLocation":"9012:7:29","nodeType":"VariableDeclaration","scope":1913,"src":"9007:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1884,"name":"bool","nodeType":"ElementaryTypeName","src":"9007:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1886,"nodeType":"VariableDeclarationStatement","src":"9007:12:29"},{"assignments":[1888],"declarations":[{"constant":false,"id":1888,"mutability":"mutable","name":"returnSize","nameLocation":"9037:10:29","nodeType":"VariableDeclaration","scope":1913,"src":"9029:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1887,"name":"uint256","nodeType":"ElementaryTypeName","src":"9029:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1889,"nodeType":"VariableDeclarationStatement","src":"9029:18:29"},{"assignments":[1891],"declarations":[{"constant":false,"id":1891,"mutability":"mutable","name":"returnValue","nameLocation":"9065:11:29","nodeType":"VariableDeclaration","scope":1913,"src":"9057:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1890,"name":"uint256","nodeType":"ElementaryTypeName","src":"9057:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1892,"nodeType":"VariableDeclarationStatement","src":"9057:19:29"},{"AST":{"nativeSrc":"9111:174:29","nodeType":"YulBlock","src":"9111:174:29","statements":[{"nativeSrc":"9125:71:29","nodeType":"YulAssignment","src":"9125:71:29","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"9141:3:29","nodeType":"YulIdentifier","src":"9141:3:29"},"nativeSrc":"9141:5:29","nodeType":"YulFunctionCall","src":"9141:5:29"},{"name":"token","nativeSrc":"9148:5:29","nodeType":"YulIdentifier","src":"9148:5:29"},{"kind":"number","nativeSrc":"9155:1:29","nodeType":"YulLiteral","src":"9155:1:29","type":"","value":"0"},{"arguments":[{"name":"data","nativeSrc":"9162:4:29","nodeType":"YulIdentifier","src":"9162:4:29"},{"kind":"number","nativeSrc":"9168:4:29","nodeType":"YulLiteral","src":"9168:4:29","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9158:3:29","nodeType":"YulIdentifier","src":"9158:3:29"},"nativeSrc":"9158:15:29","nodeType":"YulFunctionCall","src":"9158:15:29"},{"arguments":[{"name":"data","nativeSrc":"9181:4:29","nodeType":"YulIdentifier","src":"9181:4:29"}],"functionName":{"name":"mload","nativeSrc":"9175:5:29","nodeType":"YulIdentifier","src":"9175:5:29"},"nativeSrc":"9175:11:29","nodeType":"YulFunctionCall","src":"9175:11:29"},{"kind":"number","nativeSrc":"9188:1:29","nodeType":"YulLiteral","src":"9188:1:29","type":"","value":"0"},{"kind":"number","nativeSrc":"9191:4:29","nodeType":"YulLiteral","src":"9191:4:29","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"9136:4:29","nodeType":"YulIdentifier","src":"9136:4:29"},"nativeSrc":"9136:60:29","nodeType":"YulFunctionCall","src":"9136:60:29"},"variableNames":[{"name":"success","nativeSrc":"9125:7:29","nodeType":"YulIdentifier","src":"9125:7:29"}]},{"nativeSrc":"9209:30:29","nodeType":"YulAssignment","src":"9209:30:29","value":{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"9223:14:29","nodeType":"YulIdentifier","src":"9223:14:29"},"nativeSrc":"9223:16:29","nodeType":"YulFunctionCall","src":"9223:16:29"},"variableNames":[{"name":"returnSize","nativeSrc":"9209:10:29","nodeType":"YulIdentifier","src":"9209:10:29"}]},{"nativeSrc":"9252:23:29","nodeType":"YulAssignment","src":"9252:23:29","value":{"arguments":[{"kind":"number","nativeSrc":"9273:1:29","nodeType":"YulLiteral","src":"9273:1:29","type":"","value":"0"}],"functionName":{"name":"mload","nativeSrc":"9267:5:29","nodeType":"YulIdentifier","src":"9267:5:29"},"nativeSrc":"9267:8:29","nodeType":"YulFunctionCall","src":"9267:8:29"},"variableNames":[{"name":"returnValue","nativeSrc":"9252:11:29","nodeType":"YulIdentifier","src":"9252:11:29"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1879,"isOffset":false,"isSlot":false,"src":"9162:4:29","valueSize":1},{"declaration":1879,"isOffset":false,"isSlot":false,"src":"9181:4:29","valueSize":1},{"declaration":1888,"isOffset":false,"isSlot":false,"src":"9209:10:29","valueSize":1},{"declaration":1891,"isOffset":false,"isSlot":false,"src":"9252:11:29","valueSize":1},{"declaration":1885,"isOffset":false,"isSlot":false,"src":"9125:7:29","valueSize":1},{"declaration":1877,"isOffset":false,"isSlot":false,"src":"9148:5:29","valueSize":1}],"flags":["memory-safe"],"id":1893,"nodeType":"InlineAssembly","src":"9086:199:29"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1894,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"9301:7:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1895,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"9313:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9327:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9313:15:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1906,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1891,"src":"9364:11:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9379:1:29","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9364:16:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1909,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9313:67:29","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":1900,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1877,"src":"9339:5:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}],"id":1899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9331:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1898,"name":"address","nodeType":"ElementaryTypeName","src":"9331:7:29","typeDescriptions":{}}},"id":1901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9331:14:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9346:4:29","memberName":"code","nodeType":"MemberAccess","src":"9331:19:29","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9351:6:29","memberName":"length","nodeType":"MemberAccess","src":"9331:26:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:29","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9331:30:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1910,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9312:69:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9301:80:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1883,"id":1912,"nodeType":"Return","src":"9294:87:29"}]},"documentation":{"id":1874,"nodeType":"StructuredDocumentation","src":"8412:491:29","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."},"id":1914,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"8917:23:29","nodeType":"FunctionDefinition","parameters":{"id":1880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"token","nameLocation":"8948:5:29","nodeType":"VariableDeclaration","scope":1914,"src":"8941:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"},"typeName":{"id":1876,"nodeType":"UserDefinedTypeName","pathNode":{"id":1875,"name":"IERC20","nameLocations":["8941:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":1506,"src":"8941:6:29"},"referencedDeclaration":1506,"src":"8941:6:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1506","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1879,"mutability":"mutable","name":"data","nameLocation":"8968:4:29","nodeType":"VariableDeclaration","scope":1914,"src":"8955:17:29","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1878,"name":"bytes","nodeType":"ElementaryTypeName","src":"8955:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8940:33:29"},"returnParameters":{"id":1883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1914,"src":"8991:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1881,"name":"bool","nodeType":"ElementaryTypeName","src":"8991:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8990:6:29"},"scope":1915,"src":"8908:480:29","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1916,"src":"698:8692:29","usedErrors":[1518,1527],"usedEvents":[]}],"src":"115:9276:29"},"id":29},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2175],"Errors":[2227]},"id":2176,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1917,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:30"},{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","file":"./Errors.sol","id":1919,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2176,"sourceUnit":2228,"src":"127:36:30","symbolAliases":[{"foreign":{"id":1918,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"135:6:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1920,"nodeType":"StructuredDocumentation","src":"165:67:30","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2175,"linearizedBaseContracts":[2175],"name":"Address","nameLocation":"241:7:30","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1921,"nodeType":"StructuredDocumentation","src":"255:75:30","text":" @dev There's no code at `target` (it is not a contract)."},"errorSelector":"9996b315","id":1925,"name":"AddressEmptyCode","nameLocation":"341:16:30","nodeType":"ErrorDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"target","nameLocation":"366:6:30","nodeType":"VariableDeclaration","scope":1925,"src":"358:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1922,"name":"address","nodeType":"ElementaryTypeName","src":"358:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"357:16:30"},"src":"335:39:30"},{"body":{"id":1972,"nodeType":"Block","src":"1361:294:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1935,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1383:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}],"id":1934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1375:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1933,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:30","typeDescriptions":{}}},"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1375:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1389:7:30","memberName":"balance","nodeType":"MemberAccess","src":"1375:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1938,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1399:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1375:30:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1952,"nodeType":"IfStatement","src":"1371:125:30","trueBody":{"id":1951,"nodeType":"Block","src":"1407:89:30","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":1945,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1463:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}],"id":1944,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1455:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1943,"name":"address","nodeType":"ElementaryTypeName","src":"1455:7:30","typeDescriptions":{}}},"id":1946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1469:7:30","memberName":"balance","nodeType":"MemberAccess","src":"1455:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1948,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1478:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1940,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"1428:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$2227_$","typeString":"type(library Errors)"}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1435:19:30","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":2215,"src":"1428:26:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1428:57:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1950,"nodeType":"RevertStatement","src":"1421:64:30"}]}},{"assignments":[1954,1956],"declarations":[{"constant":false,"id":1954,"mutability":"mutable","name":"success","nameLocation":"1512:7:30","nodeType":"VariableDeclaration","scope":1972,"src":"1507:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1953,"name":"bool","nodeType":"ElementaryTypeName","src":"1507:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1956,"mutability":"mutable","name":"returndata","nameLocation":"1534:10:30","nodeType":"VariableDeclaration","scope":1972,"src":"1521:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1955,"name":"bytes","nodeType":"ElementaryTypeName","src":"1521:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1963,"initialValue":{"arguments":[{"hexValue":"","id":1961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1578:2:30","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1957,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1928,"src":"1548:9:30","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1558:4:30","memberName":"call","nodeType":"MemberAccess","src":"1548:14:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1959,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1930,"src":"1570:6:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"1548:29:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:33:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1506:75:30"},{"condition":{"id":1965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1595:8:30","subExpression":{"id":1964,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"1596:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1971,"nodeType":"IfStatement","src":"1591:58:30","trueBody":{"id":1970,"nodeType":"Block","src":"1605:44:30","statements":[{"expression":{"arguments":[{"id":1967,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"1627:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1966,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"1619:7:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":1968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1619:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1969,"nodeType":"ExpressionStatement","src":"1619:19:30"}]}}]},"documentation":{"id":1926,"nodeType":"StructuredDocumentation","src":"380:905:30","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1973,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"1299:9:30","nodeType":"FunctionDefinition","parameters":{"id":1931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1928,"mutability":"mutable","name":"recipient","nameLocation":"1325:9:30","nodeType":"VariableDeclaration","scope":1973,"src":"1309:25:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1927,"name":"address","nodeType":"ElementaryTypeName","src":"1309:15:30","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1930,"mutability":"mutable","name":"amount","nameLocation":"1344:6:30","nodeType":"VariableDeclaration","scope":1973,"src":"1336:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1929,"name":"uint256","nodeType":"ElementaryTypeName","src":"1336:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1308:43:30"},"returnParameters":{"id":1932,"nodeType":"ParameterList","parameters":[],"src":"1361:0:30"},"scope":2175,"src":"1290:365:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1989,"nodeType":"Block","src":"2589:62:30","statements":[{"expression":{"arguments":[{"id":1984,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"2628:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1985,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1978,"src":"2636:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2642:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1983,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2040,"src":"2606:21:30","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256) returns (bytes memory)"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2606:38:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1982,"id":1988,"nodeType":"Return","src":"2599:45:30"}]},"documentation":{"id":1974,"nodeType":"StructuredDocumentation","src":"1661:834:30","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {Errors.FailedCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."},"id":1990,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"2509:12:30","nodeType":"FunctionDefinition","parameters":{"id":1979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1976,"mutability":"mutable","name":"target","nameLocation":"2530:6:30","nodeType":"VariableDeclaration","scope":1990,"src":"2522:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1975,"name":"address","nodeType":"ElementaryTypeName","src":"2522:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1978,"mutability":"mutable","name":"data","nameLocation":"2551:4:30","nodeType":"VariableDeclaration","scope":1990,"src":"2538:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1977,"name":"bytes","nodeType":"ElementaryTypeName","src":"2538:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2521:35:30"},"returnParameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1981,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1990,"src":"2575:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1980,"name":"bytes","nodeType":"ElementaryTypeName","src":"2575:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2574:14:30"},"scope":2175,"src":"2500:151:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2039,"nodeType":"Block","src":"3088:294:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2004,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3110:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}],"id":2003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3102:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2002,"name":"address","nodeType":"ElementaryTypeName","src":"3102:7:30","typeDescriptions":{}}},"id":2005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3102:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3116:7:30","memberName":"balance","nodeType":"MemberAccess","src":"3102:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"3126:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3102:29:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2021,"nodeType":"IfStatement","src":"3098:123:30","trueBody":{"id":2020,"nodeType":"Block","src":"3133:88:30","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":2014,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3189:4:30","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2175","typeString":"library Address"}],"id":2013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3181:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2012,"name":"address","nodeType":"ElementaryTypeName","src":"3181:7:30","typeDescriptions":{}}},"id":2015,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3181:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3195:7:30","memberName":"balance","nodeType":"MemberAccess","src":"3181:21:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"3204:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2009,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"3154:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$2227_$","typeString":"type(library Errors)"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3161:19:30","memberName":"InsufficientBalance","nodeType":"MemberAccess","referencedDeclaration":2215,"src":"3154:26:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3154:56:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2019,"nodeType":"RevertStatement","src":"3147:63:30"}]}},{"assignments":[2023,2025],"declarations":[{"constant":false,"id":2023,"mutability":"mutable","name":"success","nameLocation":"3236:7:30","nodeType":"VariableDeclaration","scope":2039,"src":"3231:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2022,"name":"bool","nodeType":"ElementaryTypeName","src":"3231:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2025,"mutability":"mutable","name":"returndata","nameLocation":"3258:10:30","nodeType":"VariableDeclaration","scope":2039,"src":"3245:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2024,"name":"bytes","nodeType":"ElementaryTypeName","src":"3245:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2032,"initialValue":{"arguments":[{"id":2030,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1995,"src":"3298:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2026,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"3272:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3279:4:30","memberName":"call","nodeType":"MemberAccess","src":"3272:11:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1997,"src":"3291:5:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3272:25:30","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3272:31:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3230:73:30"},{"expression":{"arguments":[{"id":2034,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"3347:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2035,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2023,"src":"3355:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2036,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2025,"src":"3364:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2033,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"3320:26:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3320:55:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2001,"id":2038,"nodeType":"Return","src":"3313:62:30"}]},"documentation":{"id":1991,"nodeType":"StructuredDocumentation","src":"2657:313:30","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."},"id":2040,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"2984:21:30","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"target","nameLocation":"3014:6:30","nodeType":"VariableDeclaration","scope":2040,"src":"3006:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1992,"name":"address","nodeType":"ElementaryTypeName","src":"3006:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1995,"mutability":"mutable","name":"data","nameLocation":"3035:4:30","nodeType":"VariableDeclaration","scope":2040,"src":"3022:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1994,"name":"bytes","nodeType":"ElementaryTypeName","src":"3022:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"value","nameLocation":"3049:5:30","nodeType":"VariableDeclaration","scope":2040,"src":"3041:13:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1996,"name":"uint256","nodeType":"ElementaryTypeName","src":"3041:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3005:50:30"},"returnParameters":{"id":2001,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2000,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2040,"src":"3074:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1999,"name":"bytes","nodeType":"ElementaryTypeName","src":"3074:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3073:14:30"},"scope":2175,"src":"2975:407:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2065,"nodeType":"Block","src":"3621:154:30","statements":[{"assignments":[2051,2053],"declarations":[{"constant":false,"id":2051,"mutability":"mutable","name":"success","nameLocation":"3637:7:30","nodeType":"VariableDeclaration","scope":2065,"src":"3632:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2050,"name":"bool","nodeType":"ElementaryTypeName","src":"3632:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2053,"mutability":"mutable","name":"returndata","nameLocation":"3659:10:30","nodeType":"VariableDeclaration","scope":2065,"src":"3646:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2052,"name":"bytes","nodeType":"ElementaryTypeName","src":"3646:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2058,"initialValue":{"arguments":[{"id":2056,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"3691:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2054,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"3673:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3680:10:30","memberName":"staticcall","nodeType":"MemberAccess","src":"3673:17:30","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3673:23:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3631:65:30"},{"expression":{"arguments":[{"id":2060,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"3740:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2061,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"3748:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2062,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"3757:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2059,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"3713:26:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3713:55:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2049,"id":2064,"nodeType":"Return","src":"3706:62:30"}]},"documentation":{"id":2041,"nodeType":"StructuredDocumentation","src":"3388:128:30","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."},"id":2066,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"3530:18:30","nodeType":"FunctionDefinition","parameters":{"id":2046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2043,"mutability":"mutable","name":"target","nameLocation":"3557:6:30","nodeType":"VariableDeclaration","scope":2066,"src":"3549:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2042,"name":"address","nodeType":"ElementaryTypeName","src":"3549:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2045,"mutability":"mutable","name":"data","nameLocation":"3578:4:30","nodeType":"VariableDeclaration","scope":2066,"src":"3565:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2044,"name":"bytes","nodeType":"ElementaryTypeName","src":"3565:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3548:35:30"},"returnParameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2048,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2066,"src":"3607:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2047,"name":"bytes","nodeType":"ElementaryTypeName","src":"3607:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3606:14:30"},"scope":2175,"src":"3521:254:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2091,"nodeType":"Block","src":"4013:156:30","statements":[{"assignments":[2077,2079],"declarations":[{"constant":false,"id":2077,"mutability":"mutable","name":"success","nameLocation":"4029:7:30","nodeType":"VariableDeclaration","scope":2091,"src":"4024:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2076,"name":"bool","nodeType":"ElementaryTypeName","src":"4024:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2079,"mutability":"mutable","name":"returndata","nameLocation":"4051:10:30","nodeType":"VariableDeclaration","scope":2091,"src":"4038:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2078,"name":"bytes","nodeType":"ElementaryTypeName","src":"4038:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2084,"initialValue":{"arguments":[{"id":2082,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2071,"src":"4085:4:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2080,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"4065:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4072:12:30","memberName":"delegatecall","nodeType":"MemberAccess","src":"4065:19:30","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4065:25:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"4023:67:30"},{"expression":{"arguments":[{"id":2086,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"4134:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2087,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"4142:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2088,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"4151:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2085,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"4107:26:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory) view returns (bytes memory)"}},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4107:55:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2075,"id":2090,"nodeType":"Return","src":"4100:62:30"}]},"documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"3781:130:30","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."},"id":2092,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"3925:20:30","nodeType":"FunctionDefinition","parameters":{"id":2072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2069,"mutability":"mutable","name":"target","nameLocation":"3954:6:30","nodeType":"VariableDeclaration","scope":2092,"src":"3946:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2068,"name":"address","nodeType":"ElementaryTypeName","src":"3946:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2071,"mutability":"mutable","name":"data","nameLocation":"3975:4:30","nodeType":"VariableDeclaration","scope":2092,"src":"3962:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2070,"name":"bytes","nodeType":"ElementaryTypeName","src":"3962:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3945:35:30"},"returnParameters":{"id":2075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2074,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2092,"src":"3999:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2073,"name":"bytes","nodeType":"ElementaryTypeName","src":"3999:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3998:14:30"},"scope":2175,"src":"3916:253:30","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2131,"nodeType":"Block","src":"4595:424:30","statements":[{"condition":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4609:8:30","subExpression":{"id":2104,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"4610:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2129,"nodeType":"Block","src":"4669:344:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2111,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"4857:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4868:6:30","memberName":"length","nodeType":"MemberAccess","src":"4857:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4878:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4857:22:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2115,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"4883:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4890:4:30","memberName":"code","nodeType":"MemberAccess","src":"4883:11:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4895:6:30","memberName":"length","nodeType":"MemberAccess","src":"4883:18:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4905:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4883:23:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4857:49:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2126,"nodeType":"IfStatement","src":"4853:119:30","trueBody":{"id":2125,"nodeType":"Block","src":"4908:64:30","statements":[{"errorCall":{"arguments":[{"id":2122,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"4950:6:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2121,"name":"AddressEmptyCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"4933:16:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4933:24:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2124,"nodeType":"RevertStatement","src":"4926:31:30"}]}},{"expression":{"id":2127,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"4992:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2103,"id":2128,"nodeType":"Return","src":"4985:17:30"}]},"id":2130,"nodeType":"IfStatement","src":"4605:408:30","trueBody":{"id":2110,"nodeType":"Block","src":"4619:44:30","statements":[{"expression":{"arguments":[{"id":2107,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2099,"src":"4641:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2106,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"4633:7:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4633:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"ExpressionStatement","src":"4633:19:30"}]}}]},"documentation":{"id":2093,"nodeType":"StructuredDocumentation","src":"4175:257:30","text":" @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n of an unsuccessful call."},"id":2132,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"4446:26:30","nodeType":"FunctionDefinition","parameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2095,"mutability":"mutable","name":"target","nameLocation":"4490:6:30","nodeType":"VariableDeclaration","scope":2132,"src":"4482:14:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2094,"name":"address","nodeType":"ElementaryTypeName","src":"4482:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2097,"mutability":"mutable","name":"success","nameLocation":"4511:7:30","nodeType":"VariableDeclaration","scope":2132,"src":"4506:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2096,"name":"bool","nodeType":"ElementaryTypeName","src":"4506:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2099,"mutability":"mutable","name":"returndata","nameLocation":"4541:10:30","nodeType":"VariableDeclaration","scope":2132,"src":"4528:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2098,"name":"bytes","nodeType":"ElementaryTypeName","src":"4528:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4472:85:30"},"returnParameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2132,"src":"4581:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2101,"name":"bytes","nodeType":"ElementaryTypeName","src":"4581:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4580:14:30"},"scope":2175,"src":"4437:582:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2153,"nodeType":"Block","src":"5323:122:30","statements":[{"condition":{"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5337:8:30","subExpression":{"id":2142,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"5338:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2151,"nodeType":"Block","src":"5397:42:30","statements":[{"expression":{"id":2149,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"5418:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2141,"id":2150,"nodeType":"Return","src":"5411:17:30"}]},"id":2152,"nodeType":"IfStatement","src":"5333:106:30","trueBody":{"id":2148,"nodeType":"Block","src":"5347:44:30","statements":[{"expression":{"arguments":[{"id":2145,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"5369:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2144,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2174,"src":"5361:7:30","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$","typeString":"function (bytes memory) pure"}},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5361:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2147,"nodeType":"ExpressionStatement","src":"5361:19:30"}]}}]},"documentation":{"id":2133,"nodeType":"StructuredDocumentation","src":"5025:191:30","text":" @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {Errors.FailedCall} error."},"id":2154,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"5230:16:30","nodeType":"FunctionDefinition","parameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2135,"mutability":"mutable","name":"success","nameLocation":"5252:7:30","nodeType":"VariableDeclaration","scope":2154,"src":"5247:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2134,"name":"bool","nodeType":"ElementaryTypeName","src":"5247:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2137,"mutability":"mutable","name":"returndata","nameLocation":"5274:10:30","nodeType":"VariableDeclaration","scope":2154,"src":"5261:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2136,"name":"bytes","nodeType":"ElementaryTypeName","src":"5261:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5246:39:30"},"returnParameters":{"id":2141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2140,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2154,"src":"5309:12:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2139,"name":"bytes","nodeType":"ElementaryTypeName","src":"5309:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5308:14:30"},"scope":2175,"src":"5221:224:30","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2173,"nodeType":"Block","src":"5614:432:30","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2160,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2157,"src":"5690:10:30","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5701:6:30","memberName":"length","nodeType":"MemberAccess","src":"5690:17:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5710:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5690:21:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2171,"nodeType":"Block","src":"5989:51:30","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2166,"name":"Errors","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"6010:6:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Errors_$2227_$","typeString":"type(library Errors)"}},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6017:10:30","memberName":"FailedCall","nodeType":"MemberAccess","referencedDeclaration":2218,"src":"6010:17:30","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6010:19:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2170,"nodeType":"RevertStatement","src":"6003:26:30"}]},"id":2172,"nodeType":"IfStatement","src":"5686:354:30","trueBody":{"id":2165,"nodeType":"Block","src":"5713:270:30","statements":[{"AST":{"nativeSrc":"5840:133:30","nodeType":"YulBlock","src":"5840:133:30","statements":[{"nativeSrc":"5858:40:30","nodeType":"YulVariableDeclaration","src":"5858:40:30","value":{"arguments":[{"name":"returndata","nativeSrc":"5887:10:30","nodeType":"YulIdentifier","src":"5887:10:30"}],"functionName":{"name":"mload","nativeSrc":"5881:5:30","nodeType":"YulIdentifier","src":"5881:5:30"},"nativeSrc":"5881:17:30","nodeType":"YulFunctionCall","src":"5881:17:30"},"variables":[{"name":"returndata_size","nativeSrc":"5862:15:30","nodeType":"YulTypedName","src":"5862:15:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5926:2:30","nodeType":"YulLiteral","src":"5926:2:30","type":"","value":"32"},{"name":"returndata","nativeSrc":"5930:10:30","nodeType":"YulIdentifier","src":"5930:10:30"}],"functionName":{"name":"add","nativeSrc":"5922:3:30","nodeType":"YulIdentifier","src":"5922:3:30"},"nativeSrc":"5922:19:30","nodeType":"YulFunctionCall","src":"5922:19:30"},{"name":"returndata_size","nativeSrc":"5943:15:30","nodeType":"YulIdentifier","src":"5943:15:30"}],"functionName":{"name":"revert","nativeSrc":"5915:6:30","nodeType":"YulIdentifier","src":"5915:6:30"},"nativeSrc":"5915:44:30","nodeType":"YulFunctionCall","src":"5915:44:30"},"nativeSrc":"5915:44:30","nodeType":"YulExpressionStatement","src":"5915:44:30"}]},"evmVersion":"paris","externalReferences":[{"declaration":2157,"isOffset":false,"isSlot":false,"src":"5887:10:30","valueSize":1},{"declaration":2157,"isOffset":false,"isSlot":false,"src":"5930:10:30","valueSize":1}],"flags":["memory-safe"],"id":2164,"nodeType":"InlineAssembly","src":"5815:158:30"}]}}]},"documentation":{"id":2155,"nodeType":"StructuredDocumentation","src":"5451:103:30","text":" @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}."},"id":2174,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"5568:7:30","nodeType":"FunctionDefinition","parameters":{"id":2158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"returndata","nameLocation":"5589:10:30","nodeType":"VariableDeclaration","scope":2174,"src":"5576:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2156,"name":"bytes","nodeType":"ElementaryTypeName","src":"5576:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5575:25:30"},"returnParameters":{"id":2159,"nodeType":"ParameterList","parameters":[],"src":"5614:0:30"},"scope":2175,"src":"5559:487:30","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2176,"src":"233:5815:30","usedErrors":[1925],"usedEvents":[]}],"src":"101:5948:30"},"id":30},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2205]},"id":2206,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2177,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:31"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2178,"nodeType":"StructuredDocumentation","src":"127:496:31","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2205,"linearizedBaseContracts":[2205],"name":"Context","nameLocation":"642:7:31","nodeType":"ContractDefinition","nodes":[{"body":{"id":2186,"nodeType":"Block","src":"718:34:31","statements":[{"expression":{"expression":{"id":2183,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:31","memberName":"sender","nodeType":"MemberAccess","src":"735:10:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2182,"id":2185,"nodeType":"Return","src":"728:17:31"}]},"id":2187,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:31","nodeType":"FunctionDefinition","parameters":{"id":2179,"nodeType":"ParameterList","parameters":[],"src":"675:2:31"},"returnParameters":{"id":2182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2187,"src":"709:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2180,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:31"},"scope":2205,"src":"656:96:31","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2195,"nodeType":"Block","src":"825:32:31","statements":[{"expression":{"expression":{"id":2192,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:31","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:31","memberName":"data","nodeType":"MemberAccess","src":"842:8:31","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2191,"id":2194,"nodeType":"Return","src":"835:15:31"}]},"id":2196,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:31","nodeType":"FunctionDefinition","parameters":{"id":2188,"nodeType":"ParameterList","parameters":[],"src":"775:2:31"},"returnParameters":{"id":2191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2190,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2196,"src":"809:14:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2189,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:31"},"scope":2205,"src":"758:99:31","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2203,"nodeType":"Block","src":"935:25:31","statements":[{"expression":{"hexValue":"30","id":2201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:31","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2200,"id":2202,"nodeType":"Return","src":"945:8:31"}]},"id":2204,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:31","nodeType":"FunctionDefinition","parameters":{"id":2197,"nodeType":"ParameterList","parameters":[],"src":"892:2:31"},"returnParameters":{"id":2200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2204,"src":"926:7:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2198,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:31"},"scope":2205,"src":"863:97:31","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2206,"src":"624:338:31","usedErrors":[],"usedEvents":[]}],"src":"101:862:31"},"id":31},"@openzeppelin/contracts/utils/Errors.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Errors.sol","exportedSymbols":{"Errors":[2227]},"id":2228,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2207,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"100:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"Errors","contractDependencies":[],"contractKind":"library","documentation":{"id":2208,"nodeType":"StructuredDocumentation","src":"126:284:32","text":" @dev Collection of common custom errors used in multiple contracts\n IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n It is recommended to avoid relying on the error API for critical functionality.\n _Available since v5.1._"},"fullyImplemented":true,"id":2227,"linearizedBaseContracts":[2227],"name":"Errors","nameLocation":"419:6:32","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2209,"nodeType":"StructuredDocumentation","src":"432:94:32","text":" @dev The ETH balance of the account is not enough to perform the operation."},"errorSelector":"cf479181","id":2215,"name":"InsufficientBalance","nameLocation":"537:19:32","nodeType":"ErrorDefinition","parameters":{"id":2214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2211,"mutability":"mutable","name":"balance","nameLocation":"565:7:32","nodeType":"VariableDeclaration","scope":2215,"src":"557:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2210,"name":"uint256","nodeType":"ElementaryTypeName","src":"557:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2213,"mutability":"mutable","name":"needed","nameLocation":"582:6:32","nodeType":"VariableDeclaration","scope":2215,"src":"574:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2212,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"556:33:32"},"src":"531:59:32"},{"documentation":{"id":2216,"nodeType":"StructuredDocumentation","src":"596:89:32","text":" @dev A call to an address target failed. The target may have reverted."},"errorSelector":"d6bda275","id":2218,"name":"FailedCall","nameLocation":"696:10:32","nodeType":"ErrorDefinition","parameters":{"id":2217,"nodeType":"ParameterList","parameters":[],"src":"706:2:32"},"src":"690:19:32"},{"documentation":{"id":2219,"nodeType":"StructuredDocumentation","src":"715:46:32","text":" @dev The deployment failed."},"errorSelector":"b06ebf3d","id":2221,"name":"FailedDeployment","nameLocation":"772:16:32","nodeType":"ErrorDefinition","parameters":{"id":2220,"nodeType":"ParameterList","parameters":[],"src":"788:2:32"},"src":"766:25:32"},{"documentation":{"id":2222,"nodeType":"StructuredDocumentation","src":"797:58:32","text":" @dev A necessary precompile is missing."},"errorSelector":"42b01bce","id":2226,"name":"MissingPrecompile","nameLocation":"866:17:32","nodeType":"ErrorDefinition","parameters":{"id":2225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2226,"src":"884:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2223,"name":"address","nodeType":"ElementaryTypeName","src":"884:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"883:9:32"},"src":"860:33:32"}],"scope":2228,"src":"411:484:32","usedErrors":[2215,2218,2221,2226],"usedEvents":[]}],"src":"100:796:32"},"id":32},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2351]},"id":2352,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2229,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:33"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2230,"nodeType":"StructuredDocumentation","src":"219:1187:33","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC-1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":2351,"linearizedBaseContracts":[2351],"name":"StorageSlot","nameLocation":"1415:11:33","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2233,"members":[{"constant":false,"id":2232,"mutability":"mutable","name":"value","nameLocation":"1470:5:33","nodeType":"VariableDeclaration","scope":2233,"src":"1462:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2231,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1440:11:33","nodeType":"StructDefinition","scope":2351,"src":"1433:49:33","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2236,"members":[{"constant":false,"id":2235,"mutability":"mutable","name":"value","nameLocation":"1522:5:33","nodeType":"VariableDeclaration","scope":2236,"src":"1517:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2234,"name":"bool","nodeType":"ElementaryTypeName","src":"1517:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1495:11:33","nodeType":"StructDefinition","scope":2351,"src":"1488:46:33","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2239,"members":[{"constant":false,"id":2238,"mutability":"mutable","name":"value","nameLocation":"1577:5:33","nodeType":"VariableDeclaration","scope":2239,"src":"1569:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1569:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1547:11:33","nodeType":"StructDefinition","scope":2351,"src":"1540:49:33","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2242,"members":[{"constant":false,"id":2241,"mutability":"mutable","name":"value","nameLocation":"1632:5:33","nodeType":"VariableDeclaration","scope":2242,"src":"1624:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2240,"name":"uint256","nodeType":"ElementaryTypeName","src":"1624:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1602:11:33","nodeType":"StructDefinition","scope":2351,"src":"1595:49:33","visibility":"public"},{"canonicalName":"StorageSlot.Int256Slot","id":2245,"members":[{"constant":false,"id":2244,"mutability":"mutable","name":"value","nameLocation":"1685:5:33","nodeType":"VariableDeclaration","scope":2245,"src":"1678:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2243,"name":"int256","nodeType":"ElementaryTypeName","src":"1678:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"1657:10:33","nodeType":"StructDefinition","scope":2351,"src":"1650:47:33","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2248,"members":[{"constant":false,"id":2247,"mutability":"mutable","name":"value","nameLocation":"1738:5:33","nodeType":"VariableDeclaration","scope":2248,"src":"1731:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2246,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1710:10:33","nodeType":"StructDefinition","scope":2351,"src":"1703:47:33","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2251,"members":[{"constant":false,"id":2250,"mutability":"mutable","name":"value","nameLocation":"1789:5:33","nodeType":"VariableDeclaration","scope":2251,"src":"1783:11:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2249,"name":"bytes","nodeType":"ElementaryTypeName","src":"1783:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1763:9:33","nodeType":"StructDefinition","scope":2351,"src":"1756:45:33","visibility":"public"},{"body":{"id":2261,"nodeType":"Block","src":"1983:79:33","statements":[{"AST":{"nativeSrc":"2018:38:33","nodeType":"YulBlock","src":"2018:38:33","statements":[{"nativeSrc":"2032:14:33","nodeType":"YulAssignment","src":"2032:14:33","value":{"name":"slot","nativeSrc":"2042:4:33","nodeType":"YulIdentifier","src":"2042:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2032:6:33","nodeType":"YulIdentifier","src":"2032:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2258,"isOffset":false,"isSlot":true,"src":"2032:6:33","suffix":"slot","valueSize":1},{"declaration":2254,"isOffset":false,"isSlot":false,"src":"2042:4:33","valueSize":1}],"flags":["memory-safe"],"id":2260,"nodeType":"InlineAssembly","src":"1993:63:33"}]},"documentation":{"id":2252,"nodeType":"StructuredDocumentation","src":"1807:87:33","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2262,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1908:14:33","nodeType":"FunctionDefinition","parameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"slot","nameLocation":"1931:4:33","nodeType":"VariableDeclaration","scope":2262,"src":"1923:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1923:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1922:14:33"},"returnParameters":{"id":2259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2258,"mutability":"mutable","name":"r","nameLocation":"1980:1:33","nodeType":"VariableDeclaration","scope":2262,"src":"1960:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2233_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2257,"nodeType":"UserDefinedTypeName","pathNode":{"id":2256,"name":"AddressSlot","nameLocations":["1960:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2233,"src":"1960:11:33"},"referencedDeclaration":2233,"src":"1960:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2233_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1959:23:33"},"scope":2351,"src":"1899:163:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2272,"nodeType":"Block","src":"2243:79:33","statements":[{"AST":{"nativeSrc":"2278:38:33","nodeType":"YulBlock","src":"2278:38:33","statements":[{"nativeSrc":"2292:14:33","nodeType":"YulAssignment","src":"2292:14:33","value":{"name":"slot","nativeSrc":"2302:4:33","nodeType":"YulIdentifier","src":"2302:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2292:6:33","nodeType":"YulIdentifier","src":"2292:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2269,"isOffset":false,"isSlot":true,"src":"2292:6:33","suffix":"slot","valueSize":1},{"declaration":2265,"isOffset":false,"isSlot":false,"src":"2302:4:33","valueSize":1}],"flags":["memory-safe"],"id":2271,"nodeType":"InlineAssembly","src":"2253:63:33"}]},"documentation":{"id":2263,"nodeType":"StructuredDocumentation","src":"2068:86:33","text":" @dev Returns a `BooleanSlot` with member `value` located at `slot`."},"id":2273,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2168:14:33","nodeType":"FunctionDefinition","parameters":{"id":2266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2265,"mutability":"mutable","name":"slot","nameLocation":"2191:4:33","nodeType":"VariableDeclaration","scope":2273,"src":"2183:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2183:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2182:14:33"},"returnParameters":{"id":2270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2269,"mutability":"mutable","name":"r","nameLocation":"2240:1:33","nodeType":"VariableDeclaration","scope":2273,"src":"2220:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2236_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2268,"nodeType":"UserDefinedTypeName","pathNode":{"id":2267,"name":"BooleanSlot","nameLocations":["2220:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2236,"src":"2220:11:33"},"referencedDeclaration":2236,"src":"2220:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2236_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2219:23:33"},"scope":2351,"src":"2159:163:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2283,"nodeType":"Block","src":"2503:79:33","statements":[{"AST":{"nativeSrc":"2538:38:33","nodeType":"YulBlock","src":"2538:38:33","statements":[{"nativeSrc":"2552:14:33","nodeType":"YulAssignment","src":"2552:14:33","value":{"name":"slot","nativeSrc":"2562:4:33","nodeType":"YulIdentifier","src":"2562:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2552:6:33","nodeType":"YulIdentifier","src":"2552:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2280,"isOffset":false,"isSlot":true,"src":"2552:6:33","suffix":"slot","valueSize":1},{"declaration":2276,"isOffset":false,"isSlot":false,"src":"2562:4:33","valueSize":1}],"flags":["memory-safe"],"id":2282,"nodeType":"InlineAssembly","src":"2513:63:33"}]},"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"2328:86:33","text":" @dev Returns a `Bytes32Slot` with member `value` located at `slot`."},"id":2284,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2428:14:33","nodeType":"FunctionDefinition","parameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"slot","nameLocation":"2451:4:33","nodeType":"VariableDeclaration","scope":2284,"src":"2443:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2442:14:33"},"returnParameters":{"id":2281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2280,"mutability":"mutable","name":"r","nameLocation":"2500:1:33","nodeType":"VariableDeclaration","scope":2284,"src":"2480:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2239_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2279,"nodeType":"UserDefinedTypeName","pathNode":{"id":2278,"name":"Bytes32Slot","nameLocations":["2480:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2239,"src":"2480:11:33"},"referencedDeclaration":2239,"src":"2480:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2239_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2479:23:33"},"scope":2351,"src":"2419:163:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"2763:79:33","statements":[{"AST":{"nativeSrc":"2798:38:33","nodeType":"YulBlock","src":"2798:38:33","statements":[{"nativeSrc":"2812:14:33","nodeType":"YulAssignment","src":"2812:14:33","value":{"name":"slot","nativeSrc":"2822:4:33","nodeType":"YulIdentifier","src":"2822:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"2812:6:33","nodeType":"YulIdentifier","src":"2812:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2291,"isOffset":false,"isSlot":true,"src":"2812:6:33","suffix":"slot","valueSize":1},{"declaration":2287,"isOffset":false,"isSlot":false,"src":"2822:4:33","valueSize":1}],"flags":["memory-safe"],"id":2293,"nodeType":"InlineAssembly","src":"2773:63:33"}]},"documentation":{"id":2285,"nodeType":"StructuredDocumentation","src":"2588:86:33","text":" @dev Returns a `Uint256Slot` with member `value` located at `slot`."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2688:14:33","nodeType":"FunctionDefinition","parameters":{"id":2288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2287,"mutability":"mutable","name":"slot","nameLocation":"2711:4:33","nodeType":"VariableDeclaration","scope":2295,"src":"2703:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2286,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2703:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2702:14:33"},"returnParameters":{"id":2292,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2291,"mutability":"mutable","name":"r","nameLocation":"2760:1:33","nodeType":"VariableDeclaration","scope":2295,"src":"2740:21:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2242_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2290,"nodeType":"UserDefinedTypeName","pathNode":{"id":2289,"name":"Uint256Slot","nameLocations":["2740:11:33"],"nodeType":"IdentifierPath","referencedDeclaration":2242,"src":"2740:11:33"},"referencedDeclaration":2242,"src":"2740:11:33","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2242_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2739:23:33"},"scope":2351,"src":"2679:163:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2305,"nodeType":"Block","src":"3020:79:33","statements":[{"AST":{"nativeSrc":"3055:38:33","nodeType":"YulBlock","src":"3055:38:33","statements":[{"nativeSrc":"3069:14:33","nodeType":"YulAssignment","src":"3069:14:33","value":{"name":"slot","nativeSrc":"3079:4:33","nodeType":"YulIdentifier","src":"3079:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"3069:6:33","nodeType":"YulIdentifier","src":"3069:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2302,"isOffset":false,"isSlot":true,"src":"3069:6:33","suffix":"slot","valueSize":1},{"declaration":2298,"isOffset":false,"isSlot":false,"src":"3079:4:33","valueSize":1}],"flags":["memory-safe"],"id":2304,"nodeType":"InlineAssembly","src":"3030:63:33"}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"2848:85:33","text":" @dev Returns a `Int256Slot` with member `value` located at `slot`."},"id":2306,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"2947:13:33","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2298,"mutability":"mutable","name":"slot","nameLocation":"2969:4:33","nodeType":"VariableDeclaration","scope":2306,"src":"2961:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2961:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2960:14:33"},"returnParameters":{"id":2303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2302,"mutability":"mutable","name":"r","nameLocation":"3017:1:33","nodeType":"VariableDeclaration","scope":2306,"src":"2998:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$2245_storage_ptr","typeString":"struct StorageSlot.Int256Slot"},"typeName":{"id":2301,"nodeType":"UserDefinedTypeName","pathNode":{"id":2300,"name":"Int256Slot","nameLocations":["2998:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":2245,"src":"2998:10:33"},"referencedDeclaration":2245,"src":"2998:10:33","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$2245_storage_ptr","typeString":"struct StorageSlot.Int256Slot"}},"visibility":"internal"}],"src":"2997:22:33"},"scope":2351,"src":"2938:161:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2316,"nodeType":"Block","src":"3277:79:33","statements":[{"AST":{"nativeSrc":"3312:38:33","nodeType":"YulBlock","src":"3312:38:33","statements":[{"nativeSrc":"3326:14:33","nodeType":"YulAssignment","src":"3326:14:33","value":{"name":"slot","nativeSrc":"3336:4:33","nodeType":"YulIdentifier","src":"3336:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"3326:6:33","nodeType":"YulIdentifier","src":"3326:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2313,"isOffset":false,"isSlot":true,"src":"3326:6:33","suffix":"slot","valueSize":1},{"declaration":2309,"isOffset":false,"isSlot":false,"src":"3336:4:33","valueSize":1}],"flags":["memory-safe"],"id":2315,"nodeType":"InlineAssembly","src":"3287:63:33"}]},"documentation":{"id":2307,"nodeType":"StructuredDocumentation","src":"3105:85:33","text":" @dev Returns a `StringSlot` with member `value` located at `slot`."},"id":2317,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3204:13:33","nodeType":"FunctionDefinition","parameters":{"id":2310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"slot","nameLocation":"3226:4:33","nodeType":"VariableDeclaration","scope":2317,"src":"3218:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3218:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3217:14:33"},"returnParameters":{"id":2314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2313,"mutability":"mutable","name":"r","nameLocation":"3274:1:33","nodeType":"VariableDeclaration","scope":2317,"src":"3255:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2248_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2312,"nodeType":"UserDefinedTypeName","pathNode":{"id":2311,"name":"StringSlot","nameLocations":["3255:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":2248,"src":"3255:10:33"},"referencedDeclaration":2248,"src":"3255:10:33","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2248_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3254:22:33"},"scope":2351,"src":"3195:161:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2327,"nodeType":"Block","src":"3558:85:33","statements":[{"AST":{"nativeSrc":"3593:44:33","nodeType":"YulBlock","src":"3593:44:33","statements":[{"nativeSrc":"3607:20:33","nodeType":"YulAssignment","src":"3607:20:33","value":{"name":"store.slot","nativeSrc":"3617:10:33","nodeType":"YulIdentifier","src":"3617:10:33"},"variableNames":[{"name":"r.slot","nativeSrc":"3607:6:33","nodeType":"YulIdentifier","src":"3607:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2324,"isOffset":false,"isSlot":true,"src":"3607:6:33","suffix":"slot","valueSize":1},{"declaration":2320,"isOffset":false,"isSlot":true,"src":"3617:10:33","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":2326,"nodeType":"InlineAssembly","src":"3568:69:33"}]},"documentation":{"id":2318,"nodeType":"StructuredDocumentation","src":"3362:101:33","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2328,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3477:13:33","nodeType":"FunctionDefinition","parameters":{"id":2321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2320,"mutability":"mutable","name":"store","nameLocation":"3506:5:33","nodeType":"VariableDeclaration","scope":2328,"src":"3491:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2319,"name":"string","nodeType":"ElementaryTypeName","src":"3491:6:33","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3490:22:33"},"returnParameters":{"id":2325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2324,"mutability":"mutable","name":"r","nameLocation":"3555:1:33","nodeType":"VariableDeclaration","scope":2328,"src":"3536:20:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2248_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2323,"nodeType":"UserDefinedTypeName","pathNode":{"id":2322,"name":"StringSlot","nameLocations":["3536:10:33"],"nodeType":"IdentifierPath","referencedDeclaration":2248,"src":"3536:10:33"},"referencedDeclaration":2248,"src":"3536:10:33","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2248_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3535:22:33"},"scope":2351,"src":"3468:175:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2338,"nodeType":"Block","src":"3818:79:33","statements":[{"AST":{"nativeSrc":"3853:38:33","nodeType":"YulBlock","src":"3853:38:33","statements":[{"nativeSrc":"3867:14:33","nodeType":"YulAssignment","src":"3867:14:33","value":{"name":"slot","nativeSrc":"3877:4:33","nodeType":"YulIdentifier","src":"3877:4:33"},"variableNames":[{"name":"r.slot","nativeSrc":"3867:6:33","nodeType":"YulIdentifier","src":"3867:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2335,"isOffset":false,"isSlot":true,"src":"3867:6:33","suffix":"slot","valueSize":1},{"declaration":2331,"isOffset":false,"isSlot":false,"src":"3877:4:33","valueSize":1}],"flags":["memory-safe"],"id":2337,"nodeType":"InlineAssembly","src":"3828:63:33"}]},"documentation":{"id":2329,"nodeType":"StructuredDocumentation","src":"3649:84:33","text":" @dev Returns a `BytesSlot` with member `value` located at `slot`."},"id":2339,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3747:12:33","nodeType":"FunctionDefinition","parameters":{"id":2332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2331,"mutability":"mutable","name":"slot","nameLocation":"3768:4:33","nodeType":"VariableDeclaration","scope":2339,"src":"3760:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2330,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3760:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3759:14:33"},"returnParameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"r","nameLocation":"3815:1:33","nodeType":"VariableDeclaration","scope":2339,"src":"3797:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2251_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2334,"nodeType":"UserDefinedTypeName","pathNode":{"id":2333,"name":"BytesSlot","nameLocations":["3797:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":2251,"src":"3797:9:33"},"referencedDeclaration":2251,"src":"3797:9:33","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2251_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3796:21:33"},"scope":2351,"src":"3738:159:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2349,"nodeType":"Block","src":"4094:85:33","statements":[{"AST":{"nativeSrc":"4129:44:33","nodeType":"YulBlock","src":"4129:44:33","statements":[{"nativeSrc":"4143:20:33","nodeType":"YulAssignment","src":"4143:20:33","value":{"name":"store.slot","nativeSrc":"4153:10:33","nodeType":"YulIdentifier","src":"4153:10:33"},"variableNames":[{"name":"r.slot","nativeSrc":"4143:6:33","nodeType":"YulIdentifier","src":"4143:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2346,"isOffset":false,"isSlot":true,"src":"4143:6:33","suffix":"slot","valueSize":1},{"declaration":2342,"isOffset":false,"isSlot":true,"src":"4153:10:33","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":2348,"nodeType":"InlineAssembly","src":"4104:69:33"}]},"documentation":{"id":2340,"nodeType":"StructuredDocumentation","src":"3903:99:33","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2350,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"4016:12:33","nodeType":"FunctionDefinition","parameters":{"id":2343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"store","nameLocation":"4043:5:33","nodeType":"VariableDeclaration","scope":2350,"src":"4029:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2341,"name":"bytes","nodeType":"ElementaryTypeName","src":"4029:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4028:21:33"},"returnParameters":{"id":2347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2346,"mutability":"mutable","name":"r","nameLocation":"4091:1:33","nodeType":"VariableDeclaration","scope":2350,"src":"4073:19:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2251_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2345,"nodeType":"UserDefinedTypeName","pathNode":{"id":2344,"name":"BytesSlot","nameLocations":["4073:9:33"],"nodeType":"IdentifierPath","referencedDeclaration":2251,"src":"4073:9:33"},"referencedDeclaration":2251,"src":"4073:9:33","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2251_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"4072:21:33"},"scope":2351,"src":"4007:172:33","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2352,"src":"1407:2774:33","usedErrors":[],"usedEvents":[]}],"src":"193:3989:33"},"id":33},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2363]},"id":2364,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2353,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:34"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2354,"nodeType":"StructuredDocumentation","src":"141:280:34","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2363,"linearizedBaseContracts":[2363],"name":"IERC165","nameLocation":"432:7:34","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2355,"nodeType":"StructuredDocumentation","src":"446:340:34","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2362,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"800:17:34","nodeType":"FunctionDefinition","parameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"interfaceId","nameLocation":"825:11:34","nodeType":"VariableDeclaration","scope":2362,"src":"818:18:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2356,"name":"bytes4","nodeType":"ElementaryTypeName","src":"818:6:34","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"817:20:34"},"returnParameters":{"id":2361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2362,"src":"861:4:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2359,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:34","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:34"},"scope":2363,"src":"791:76:34","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2364,"src":"422:447:34","usedErrors":[],"usedEvents":[]}],"src":"115:755:34"},"id":34},"contracts/MyContract.sol":{"ast":{"absolutePath":"contracts/MyContract.sol","exportedSymbols":{"Context":[2205],"ContractOwnership":[43],"ContractOwnershipStorage":[405],"ForwarderRegistryContext":[602],"ForwarderRegistryContextBase":[730],"IForwarderRegistry":[758],"MyContract":[2491],"TokenRecovery":[855]},"id":2492,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2365,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:35"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2367,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":759,"src":"57:114:35","symbolAliases":[{"foreign":{"id":2366,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"65:18:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2369,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":406,"src":"172:125:35","symbolAliases":[{"foreign":{"id":2368,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"180:24:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2371,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":44,"src":"298:101:35","symbolAliases":[{"foreign":{"id":2370,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43,"src":"306:17:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","id":2373,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":856,"src":"400:95:35","symbolAliases":[{"foreign":{"id":2372,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"408:13:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2375,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":2206,"src":"496:66:35","symbolAliases":[{"foreign":{"id":2374,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"504:7:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2377,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":731,"src":"563:128:35","symbolAliases":[{"foreign":{"id":2376,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"571:28:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2379,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2492,"sourceUnit":603,"src":"692:115:35","symbolAliases":[{"foreign":{"id":2378,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"700:24:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2380,"name":"TokenRecovery","nameLocations":["832:13:35"],"nodeType":"IdentifierPath","referencedDeclaration":855,"src":"832:13:35"},"id":2381,"nodeType":"InheritanceSpecifier","src":"832:13:35"},{"baseName":{"id":2382,"name":"ForwarderRegistryContext","nameLocations":["847:24:35"],"nodeType":"IdentifierPath","referencedDeclaration":602,"src":"847:24:35"},"id":2383,"nodeType":"InheritanceSpecifier","src":"847:24:35"}],"canonicalName":"MyContract","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2491,"linearizedBaseContracts":[2491,602,742,730,855,43,435,452,91,970,2205,147,1016],"name":"MyContract","nameLocation":"818:10:35","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2387,"libraryName":{"id":2384,"name":"ContractOwnershipStorage","nameLocations":["884:24:35"],"nodeType":"IdentifierPath","referencedDeclaration":405,"src":"884:24:35"},"nodeType":"UsingForDirective","src":"878:67:35","typeName":{"id":2386,"nodeType":"UserDefinedTypeName","pathNode":{"id":2385,"name":"ContractOwnershipStorage.Layout","nameLocations":["913:24:35","938:6:35"],"nodeType":"IdentifierPath","referencedDeclaration":178,"src":"913:31:35"},"referencedDeclaration":178,"src":"913:31:35","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"functionSelector":"2bb14104","id":2389,"mutability":"mutable","name":"myData","nameLocation":"966:6:35","nodeType":"VariableDeclaration","scope":2491,"src":"951:21:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"951:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec","id":2393,"name":"DataSet","nameLocation":"985:7:35","nodeType":"EventDefinition","parameters":{"id":2392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2391,"indexed":false,"mutability":"mutable","name":"data","nameLocation":"1001:4:35","nodeType":"VariableDeclaration","scope":2393,"src":"993:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2390,"name":"address","nodeType":"ElementaryTypeName","src":"993:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"992:14:35"},"src":"979:28:35"},{"errorSelector":"f6a5e704","id":2395,"name":"InvalidZeroData","nameLocation":"1019:15:35","nodeType":"ErrorDefinition","parameters":{"id":2394,"nodeType":"ParameterList","parameters":[],"src":"1034:2:35"},"src":"1013:24:35"},{"body":{"id":2428,"nodeType":"Block","src":"1181:116:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2410,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"1195:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1211:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2412,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1203:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2411,"name":"address","nodeType":"ElementaryTypeName","src":"1203:7:35","typeDescriptions":{}}},"id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1203:10:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1195:18:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2419,"nodeType":"IfStatement","src":"1191:48:35","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2416,"name":"InvalidZeroData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"1222:15:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1222:17:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2418,"nodeType":"RevertStatement","src":"1215:24:35"}},{"expression":{"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2420,"name":"myData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"1249:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2421,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"1258:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1249:13:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2423,"nodeType":"ExpressionStatement","src":"1249:13:35"},{"eventCall":{"arguments":[{"id":2425,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"1285:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2424,"name":"DataSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"1277:7:35","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1277:13:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2427,"nodeType":"EmitStatement","src":"1272:18:35"}]},"id":2429,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2403,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1125:3:35","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1129:6:35","memberName":"sender","nodeType":"MemberAccess","src":"1125:10:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2405,"kind":"baseConstructorSpecifier","modifierName":{"id":2402,"name":"ContractOwnership","nameLocations":["1107:17:35"],"nodeType":"IdentifierPath","referencedDeclaration":43,"src":"1107:17:35"},"nodeType":"ModifierInvocation","src":"1107:29:35"},{"arguments":[{"id":2407,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2400,"src":"1162:17:35","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}}],"id":2408,"kind":"baseConstructorSpecifier","modifierName":{"id":2406,"name":"ForwarderRegistryContext","nameLocations":["1137:24:35"],"nodeType":"IdentifierPath","referencedDeclaration":602,"src":"1137:24:35"},"nodeType":"ModifierInvocation","src":"1137:43:35"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2397,"mutability":"mutable","name":"data","nameLocation":"1063:4:35","nodeType":"VariableDeclaration","scope":2429,"src":"1055:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2396,"name":"address","nodeType":"ElementaryTypeName","src":"1055:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2400,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"1088:17:35","nodeType":"VariableDeclaration","scope":2429,"src":"1069:36:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"},"typeName":{"id":2399,"nodeType":"UserDefinedTypeName","pathNode":{"id":2398,"name":"IForwarderRegistry","nameLocations":["1069:18:35"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"1069:18:35"},"referencedDeclaration":758,"src":"1069:18:35","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"1054:52:35"},"returnParameters":{"id":2409,"nodeType":"ParameterList","parameters":[],"src":"1181:0:35"},"scope":2491,"src":"1043:254:35","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2461,"nodeType":"Block","src":"1343:197:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2434,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"1357:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1373:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2436,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1365:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2435,"name":"address","nodeType":"ElementaryTypeName","src":"1365:7:35","typeDescriptions":{}}},"id":2438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1365:10:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1357:18:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2443,"nodeType":"IfStatement","src":"1353:48:35","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2440,"name":"InvalidZeroData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"1384:15:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1384:17:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2442,"nodeType":"RevertStatement","src":"1377:24:35"}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2449,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2476],"referencedDeclaration":2476,"src":"1468:10:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1468:12:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2444,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":405,"src":"1411:24:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$405_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1436:6:35","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":404,"src":"1411:31:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1411:33:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$178_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2448,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1445:22:35","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":372,"src":"1411:56:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$178_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$178_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1411:70:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2452,"nodeType":"ExpressionStatement","src":"1411:70:35"},{"expression":{"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2453,"name":"myData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"1492:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2454,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"1501:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1492:13:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2456,"nodeType":"ExpressionStatement","src":"1492:13:35"},{"eventCall":{"arguments":[{"id":2458,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"1528:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2457,"name":"DataSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"1520:7:35","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1520:13:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2460,"nodeType":"EmitStatement","src":"1515:18:35"}]},"functionSelector":"61dfdae6","id":2462,"implemented":true,"kind":"function","modifiers":[],"name":"setData","nameLocation":"1312:7:35","nodeType":"FunctionDefinition","parameters":{"id":2432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2431,"mutability":"mutable","name":"data","nameLocation":"1328:4:35","nodeType":"VariableDeclaration","scope":2462,"src":"1320:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2430,"name":"address","nodeType":"ElementaryTypeName","src":"1320:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1319:14:35"},"returnParameters":{"id":2433,"nodeType":"ParameterList","parameters":[],"src":"1343:0:35"},"scope":2491,"src":"1303:237:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[677,2187],"body":{"id":2475,"nodeType":"Block","src":"1705:65:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2471,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"1722:28:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$730_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1751:10:35","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":677,"src":"1722:39:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:41:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2470,"id":2474,"nodeType":"Return","src":"1715:48:35"}]},"documentation":{"id":2463,"nodeType":"StructuredDocumentation","src":"1546:44:35","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2476,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"1604:10:35","nodeType":"FunctionDefinition","overrides":{"id":2467,"nodeType":"OverrideSpecifier","overrides":[{"id":2465,"name":"Context","nameLocations":["1648:7:35"],"nodeType":"IdentifierPath","referencedDeclaration":2205,"src":"1648:7:35"},{"id":2466,"name":"ForwarderRegistryContextBase","nameLocations":["1657:28:35"],"nodeType":"IdentifierPath","referencedDeclaration":730,"src":"1657:28:35"}],"src":"1639:47:35"},"parameters":{"id":2464,"nodeType":"ParameterList","parameters":[],"src":"1614:2:35"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2476,"src":"1696:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2468,"name":"address","nodeType":"ElementaryTypeName","src":"1696:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1695:9:35"},"scope":2491,"src":"1595:175:35","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[729,2196],"body":{"id":2489,"nodeType":"Block","src":"1940:63:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2485,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"1957:28:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$730_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1986:8:35","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":729,"src":"1957:37:35","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1957:39:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2484,"id":2488,"nodeType":"Return","src":"1950:46:35"}]},"documentation":{"id":2477,"nodeType":"StructuredDocumentation","src":"1776:44:35","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2490,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1834:8:35","nodeType":"FunctionDefinition","overrides":{"id":2481,"nodeType":"OverrideSpecifier","overrides":[{"id":2479,"name":"Context","nameLocations":["1876:7:35"],"nodeType":"IdentifierPath","referencedDeclaration":2205,"src":"1876:7:35"},{"id":2480,"name":"ForwarderRegistryContextBase","nameLocations":["1885:28:35"],"nodeType":"IdentifierPath","referencedDeclaration":730,"src":"1885:28:35"}],"src":"1867:47:35"},"parameters":{"id":2478,"nodeType":"ParameterList","parameters":[],"src":"1842:2:35"},"returnParameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2483,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2490,"src":"1924:14:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2482,"name":"bytes","nodeType":"ElementaryTypeName","src":"1924:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1923:16:35"},"scope":2491,"src":"1825:178:35","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2492,"src":"809:1196:35","usedErrors":[7,105,440,1042,1518,2215,2218,2395],"usedEvents":[126,2393]}],"src":"32:1974:35"},"id":35},"contracts/mocks/MyContractMock.sol":{"ast":{"absolutePath":"contracts/mocks/MyContractMock.sol","exportedSymbols":{"IForwarderRegistry":[758],"MyContract":[2491],"MyContractMock":[2522]},"id":2523,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2493,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:36"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2495,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2523,"sourceUnit":759,"src":"57:114:36","symbolAliases":[{"foreign":{"id":2494,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":758,"src":"65:18:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/MyContract.sol","file":"./../MyContract.sol","id":2497,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2523,"sourceUnit":2492,"src":"172:47:36","symbolAliases":[{"foreign":{"id":2496,"name":"MyContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"180:10:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2498,"name":"MyContract","nameLocations":["248:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":2491,"src":"248:10:36"},"id":2499,"nodeType":"InheritanceSpecifier","src":"248:10:36"}],"canonicalName":"MyContractMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2522,"linearizedBaseContracts":[2522,2491,602,742,730,855,43,435,452,91,970,2205,147,1016],"name":"MyContractMock","nameLocation":"230:14:36","nodeType":"ContractDefinition","nodes":[{"body":{"id":2511,"nodeType":"Block","src":"365:2:36","statements":[]},"id":2512,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2507,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2501,"src":"340:4:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2508,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2504,"src":"346:17:36","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}}],"id":2509,"kind":"baseConstructorSpecifier","modifierName":{"id":2506,"name":"MyContract","nameLocations":["329:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":2491,"src":"329:10:36"},"nodeType":"ModifierInvocation","src":"329:35:36"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2501,"mutability":"mutable","name":"data","nameLocation":"285:4:36","nodeType":"VariableDeclaration","scope":2512,"src":"277:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2500,"name":"address","nodeType":"ElementaryTypeName","src":"277:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2504,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"310:17:36","nodeType":"VariableDeclaration","scope":2512,"src":"291:36:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"},"typeName":{"id":2503,"nodeType":"UserDefinedTypeName","pathNode":{"id":2502,"name":"IForwarderRegistry","nameLocations":["291:18:36"],"nodeType":"IdentifierPath","referencedDeclaration":758,"src":"291:18:36"},"referencedDeclaration":758,"src":"291:18:36","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$758","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"276:52:36"},"returnParameters":{"id":2510,"nodeType":"ParameterList","parameters":[],"src":"365:0:36"},"scope":2522,"src":"265:102:36","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2520,"nodeType":"Block","src":"433:34:36","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2517,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[2490],"referencedDeclaration":2490,"src":"450:8:36","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"450:10:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2516,"id":2519,"nodeType":"Return","src":"443:17:36"}]},"functionSelector":"31e66e1e","id":2521,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"382:9:36","nodeType":"FunctionDefinition","parameters":{"id":2513,"nodeType":"ParameterList","parameters":[],"src":"391:2:36"},"returnParameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2521,"src":"417:14:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2514,"name":"bytes","nodeType":"ElementaryTypeName","src":"417:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"416:16:36"},"scope":2522,"src":"373:94:36","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2523,"src":"221:248:36","usedErrors":[7,105,440,1042,1518,2215,2218,2395],"usedEvents":[126,2393]}],"src":"32:438:36"},"id":36}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:7:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;589:4647:7;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:7:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"},{"internalType":"address","name":"target","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isApprovedForwarder(address,address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account.","target":"The target contract."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."}}},"title":"Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address,address)":"019a2028"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\",\"target\":\"The target contract.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\"}}},\"title\":\"Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol":{"ITokenRecovery":{"abi":[{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Uniquely identified seals management.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Uniquely identified seals management.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":\"ITokenRecovery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol":{"TokenRecoveryLibrary":{"abi":[{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"}],"devdoc":{"errors":{"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207da9a67842eb4b71f0701f060b4d0953ff3e74485935f33f0a5d1c115a8f0ba364736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xA9A67842EB4B71F0701F060B4D0953FF3E74485935F33F0A5D1C115A8F0B LOG3 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"485:3843:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;485:3843:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207da9a67842eb4b71f0701f060b4d0953ff3e74485935f33f0a5d1c115a8f0ba364736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xA9A67842EB4B71F0701F060B4D0953FF3E74485935F33F0A5D1C115A8F0B LOG3 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"485:3843:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"recoverERC20s(address[] calldata,contract IERC20[] calldata,uint256[] calldata)":"infinite","recoverERC721s(address[] calldata,contract IERC721[] calldata,uint256[] calldata)":"infinite","recoverETH(address payable[] calldata,uint256[] calldata)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"}],\"devdoc\":{\"errors\":{\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"errors\":{\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}]},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":\"TokenRecoveryLibrary\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}]},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"Address":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:410:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"hasBytecode(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"IERC1363":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"approveAndCall(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"approveAndCall(address,uint256,bytes)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"data":"Additional data with no specified format, sent in call to `spender`.","spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferAndCall(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferAndCall(address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFromAndCall(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}}},"title":"IERC1363","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","approveAndCall(address,uint256)":"3177029f","approveAndCall(address,uint256,bytes)":"cae9ca51","balanceOf(address)":"70a08231","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256)":"1296ee62","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd","transferFromAndCall(address,address,uint256)":"d8fbe994","transferFromAndCall(address,address,uint256,bytes)":"c1d34b89"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-20 standard as defined in the ERC.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"devdoc":{"details":"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","errors":{"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)":[{"details":"Indicates a failed `decreaseAllowance` request."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220607550b4c6a633bc8d1bcca1ae00bd7e6a16f7cd0cab8030df71f92b25cfe28864736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x75 POP 0xB4 0xC6 0xA6 CALLER 0xBC DUP14 SHL 0xCC LOG1 0xAE STOP 0xBD PUSH31 0x6A16F7CD0CAB8030DF71F92B25CFE28864736F6C634300081C003300000000 ","sourceMap":"698:8692:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;698:8692:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220607550b4c6a633bc8d1bcca1ae00bd7e6a16f7cd0cab8030df71f92b25cfe28864736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x75 POP 0xB4 0xC6 0xA6 CALLER 0xBC DUP14 SHL 0xCC LOG1 0xAE STOP 0xBD PUSH31 0x6A16F7CD0CAB8030DF71F92B25CFE28864736F6C634300081C003300000000 ","sourceMap":"698:8692:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite","transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"}],"devdoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4d6505cfba92dca4ae35db03d1ed0cc224b445372e9fb25f2ed11209600cf3764736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xD6 POP TLOAD 0xFB 0xA9 0x2D 0xCA BLOBBASEFEE 0xE3 TSTORE 0xB0 RETURNDATASIZE 0x1E 0xD0 0xCC 0x22 0x4B PREVRANDAO MSTORE8 PUSH19 0xE9FB25F2ED11209600CF3764736F6C63430008 SHR STOP CALLER ","sourceMap":"233:5815:30:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;233:5815:30;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b4d6505cfba92dca4ae35db03d1ed0cc224b445372e9fb25f2ed11209600cf3764736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB4 0xD6 POP TLOAD 0xFB 0xA9 0x2D 0xCA BLOBBASEFEE 0xE3 TSTORE 0xB0 RETURNDATASIZE 0x1E 0xD0 0xCC 0x22 0x4B PREVRANDAO MSTORE8 PUSH19 0xE9FB25F2ED11209600CF3764736F6C63430008 SHR STOP CALLER ","sourceMap":"233:5815:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Errors.sol":{"Errors":{"abi":[{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"FailedDeployment","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"MissingPrecompile","type":"error"}],"devdoc":{"details":"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._","errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"FailedDeployment()":[{"details":"The deployment failed."}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"MissingPrecompile(address)":[{"details":"A necessary precompile is missing."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091fed336c2a6257b00acfb7a966e90e7e627e141d220b481e3ae4abf3c4a8ca564736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 INVALID 0xD3 CALLDATASIZE 0xC2 0xA6 0x25 PUSH28 0xACFB7A966E90E7E627E141D220B481E3AE4ABF3C4A8CA564736F6C PUSH4 0x4300081C STOP CALLER ","sourceMap":"411:484:32:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;411:484:32;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122091fed336c2a6257b00acfb7a966e90e7e627e141d220b481e3ae4abf3c4a8ca564736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 INVALID 0xD3 CALLDATASIZE 0xC2 0xA6 0x25 PUSH28 0xACFB7A966E90E7E627E141D220B481E3AE4ABF3C4A8CA564736F6C PUSH4 0x4300081C STOP CALLER ","sourceMap":"411:484:32:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"MissingPrecompile\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of common custom errors used in multiple contracts IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library. It is recommended to avoid relying on the error API for critical functionality. _Available since v5.1._\",\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"MissingPrecompile(address)\":[{\"details\":\"A necessary precompile is missing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Errors.sol\":\"Errors\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:33:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1407:2774:33;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getInt256Slot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/MyContract.sol":{"MyContract":{"abi":[{"inputs":[{"internalType":"address","name":"data","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidZeroData","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"data","type":"address"}],"name":"DataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"myData","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"data","type":"address"}],"name":"setData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2429":{"entryPoint":null,"id":2429,"parameterSlots":2,"returnSlots":0},"@_42":{"entryPoint":null,"id":42,"parameterSlots":1,"returnSlots":0},"@_576":{"entryPoint":null,"id":576,"parameterSlots":1,"returnSlots":0},"@_623":{"entryPoint":null,"id":623,"parameterSlots":1,"returnSlots":0},"@constructorInit_248":{"entryPoint":256,"id":248,"parameterSlots":2,"returnSlots":0},"@layout_404":{"entryPoint":204,"id":404,"parameterSlots":0,"returnSlots":1},"@layout_552":{"entryPoint":374,"id":552,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_506":{"entryPoint":420,"id":506,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$758_fromMemory":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":594,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":512,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1001:37","nodeType":"YulBlock","src":"0:1001:37","statements":[{"nativeSrc":"6:3:37","nodeType":"YulBlock","src":"6:3:37","statements":[]},{"body":{"nativeSrc":"59:86:37","nodeType":"YulBlock","src":"59:86:37","statements":[{"body":{"nativeSrc":"123:16:37","nodeType":"YulBlock","src":"123:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:37","nodeType":"YulLiteral","src":"132:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:37","nodeType":"YulLiteral","src":"135:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:37","nodeType":"YulIdentifier","src":"125:6:37"},"nativeSrc":"125:12:37","nodeType":"YulFunctionCall","src":"125:12:37"},"nativeSrc":"125:12:37","nodeType":"YulExpressionStatement","src":"125:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:37","nodeType":"YulIdentifier","src":"82:5:37"},{"arguments":[{"name":"value","nativeSrc":"93:5:37","nodeType":"YulIdentifier","src":"93:5:37"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:37","nodeType":"YulLiteral","src":"108:3:37","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:37","nodeType":"YulLiteral","src":"113:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:37","nodeType":"YulIdentifier","src":"104:3:37"},"nativeSrc":"104:11:37","nodeType":"YulFunctionCall","src":"104:11:37"},{"kind":"number","nativeSrc":"117:1:37","nodeType":"YulLiteral","src":"117:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:37","nodeType":"YulIdentifier","src":"100:3:37"},"nativeSrc":"100:19:37","nodeType":"YulFunctionCall","src":"100:19:37"}],"functionName":{"name":"and","nativeSrc":"89:3:37","nodeType":"YulIdentifier","src":"89:3:37"},"nativeSrc":"89:31:37","nodeType":"YulFunctionCall","src":"89:31:37"}],"functionName":{"name":"eq","nativeSrc":"79:2:37","nodeType":"YulIdentifier","src":"79:2:37"},"nativeSrc":"79:42:37","nodeType":"YulFunctionCall","src":"79:42:37"}],"functionName":{"name":"iszero","nativeSrc":"72:6:37","nodeType":"YulIdentifier","src":"72:6:37"},"nativeSrc":"72:50:37","nodeType":"YulFunctionCall","src":"72:50:37"},"nativeSrc":"69:70:37","nodeType":"YulIf","src":"69:70:37"}]},"name":"validator_revert_address","nativeSrc":"14:131:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:37","nodeType":"YulTypedName","src":"48:5:37","type":""}],"src":"14:131:37"},{"body":{"nativeSrc":"274:287:37","nodeType":"YulBlock","src":"274:287:37","statements":[{"body":{"nativeSrc":"320:16:37","nodeType":"YulBlock","src":"320:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"329:1:37","nodeType":"YulLiteral","src":"329:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"332:1:37","nodeType":"YulLiteral","src":"332:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"322:6:37","nodeType":"YulIdentifier","src":"322:6:37"},"nativeSrc":"322:12:37","nodeType":"YulFunctionCall","src":"322:12:37"},"nativeSrc":"322:12:37","nodeType":"YulExpressionStatement","src":"322:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"295:7:37","nodeType":"YulIdentifier","src":"295:7:37"},{"name":"headStart","nativeSrc":"304:9:37","nodeType":"YulIdentifier","src":"304:9:37"}],"functionName":{"name":"sub","nativeSrc":"291:3:37","nodeType":"YulIdentifier","src":"291:3:37"},"nativeSrc":"291:23:37","nodeType":"YulFunctionCall","src":"291:23:37"},{"kind":"number","nativeSrc":"316:2:37","nodeType":"YulLiteral","src":"316:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"287:3:37","nodeType":"YulIdentifier","src":"287:3:37"},"nativeSrc":"287:32:37","nodeType":"YulFunctionCall","src":"287:32:37"},"nativeSrc":"284:52:37","nodeType":"YulIf","src":"284:52:37"},{"nativeSrc":"345:29:37","nodeType":"YulVariableDeclaration","src":"345:29:37","value":{"arguments":[{"name":"headStart","nativeSrc":"364:9:37","nodeType":"YulIdentifier","src":"364:9:37"}],"functionName":{"name":"mload","nativeSrc":"358:5:37","nodeType":"YulIdentifier","src":"358:5:37"},"nativeSrc":"358:16:37","nodeType":"YulFunctionCall","src":"358:16:37"},"variables":[{"name":"value","nativeSrc":"349:5:37","nodeType":"YulTypedName","src":"349:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"408:5:37","nodeType":"YulIdentifier","src":"408:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"383:24:37","nodeType":"YulIdentifier","src":"383:24:37"},"nativeSrc":"383:31:37","nodeType":"YulFunctionCall","src":"383:31:37"},"nativeSrc":"383:31:37","nodeType":"YulExpressionStatement","src":"383:31:37"},{"nativeSrc":"423:15:37","nodeType":"YulAssignment","src":"423:15:37","value":{"name":"value","nativeSrc":"433:5:37","nodeType":"YulIdentifier","src":"433:5:37"},"variableNames":[{"name":"value0","nativeSrc":"423:6:37","nodeType":"YulIdentifier","src":"423:6:37"}]},{"nativeSrc":"447:40:37","nodeType":"YulVariableDeclaration","src":"447:40:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"472:9:37","nodeType":"YulIdentifier","src":"472:9:37"},{"kind":"number","nativeSrc":"483:2:37","nodeType":"YulLiteral","src":"483:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"468:3:37","nodeType":"YulIdentifier","src":"468:3:37"},"nativeSrc":"468:18:37","nodeType":"YulFunctionCall","src":"468:18:37"}],"functionName":{"name":"mload","nativeSrc":"462:5:37","nodeType":"YulIdentifier","src":"462:5:37"},"nativeSrc":"462:25:37","nodeType":"YulFunctionCall","src":"462:25:37"},"variables":[{"name":"value_1","nativeSrc":"451:7:37","nodeType":"YulTypedName","src":"451:7:37","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"521:7:37","nodeType":"YulIdentifier","src":"521:7:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"496:24:37","nodeType":"YulIdentifier","src":"496:24:37"},"nativeSrc":"496:33:37","nodeType":"YulFunctionCall","src":"496:33:37"},"nativeSrc":"496:33:37","nodeType":"YulExpressionStatement","src":"496:33:37"},{"nativeSrc":"538:17:37","nodeType":"YulAssignment","src":"538:17:37","value":{"name":"value_1","nativeSrc":"548:7:37","nodeType":"YulIdentifier","src":"548:7:37"},"variableNames":[{"name":"value1","nativeSrc":"538:6:37","nodeType":"YulIdentifier","src":"538:6:37"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$758_fromMemory","nativeSrc":"150:411:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"232:9:37","nodeType":"YulTypedName","src":"232:9:37","type":""},{"name":"dataEnd","nativeSrc":"243:7:37","nodeType":"YulTypedName","src":"243:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"255:6:37","nodeType":"YulTypedName","src":"255:6:37","type":""},{"name":"value1","nativeSrc":"263:6:37","nodeType":"YulTypedName","src":"263:6:37","type":""}],"src":"150:411:37"},{"body":{"nativeSrc":"667:102:37","nodeType":"YulBlock","src":"667:102:37","statements":[{"nativeSrc":"677:26:37","nodeType":"YulAssignment","src":"677:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"689:9:37","nodeType":"YulIdentifier","src":"689:9:37"},{"kind":"number","nativeSrc":"700:2:37","nodeType":"YulLiteral","src":"700:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"685:3:37","nodeType":"YulIdentifier","src":"685:3:37"},"nativeSrc":"685:18:37","nodeType":"YulFunctionCall","src":"685:18:37"},"variableNames":[{"name":"tail","nativeSrc":"677:4:37","nodeType":"YulIdentifier","src":"677:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"719:9:37","nodeType":"YulIdentifier","src":"719:9:37"},{"arguments":[{"name":"value0","nativeSrc":"734:6:37","nodeType":"YulIdentifier","src":"734:6:37"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"750:3:37","nodeType":"YulLiteral","src":"750:3:37","type":"","value":"160"},{"kind":"number","nativeSrc":"755:1:37","nodeType":"YulLiteral","src":"755:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"746:3:37","nodeType":"YulIdentifier","src":"746:3:37"},"nativeSrc":"746:11:37","nodeType":"YulFunctionCall","src":"746:11:37"},{"kind":"number","nativeSrc":"759:1:37","nodeType":"YulLiteral","src":"759:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"742:3:37","nodeType":"YulIdentifier","src":"742:3:37"},"nativeSrc":"742:19:37","nodeType":"YulFunctionCall","src":"742:19:37"}],"functionName":{"name":"and","nativeSrc":"730:3:37","nodeType":"YulIdentifier","src":"730:3:37"},"nativeSrc":"730:32:37","nodeType":"YulFunctionCall","src":"730:32:37"}],"functionName":{"name":"mstore","nativeSrc":"712:6:37","nodeType":"YulIdentifier","src":"712:6:37"},"nativeSrc":"712:51:37","nodeType":"YulFunctionCall","src":"712:51:37"},"nativeSrc":"712:51:37","nodeType":"YulExpressionStatement","src":"712:51:37"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"566:203:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"636:9:37","nodeType":"YulTypedName","src":"636:9:37","type":""},{"name":"value0","nativeSrc":"647:6:37","nodeType":"YulTypedName","src":"647:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"658:4:37","nodeType":"YulTypedName","src":"658:4:37","type":""}],"src":"566:203:37"},{"body":{"nativeSrc":"823:176:37","nodeType":"YulBlock","src":"823:176:37","statements":[{"nativeSrc":"833:17:37","nodeType":"YulAssignment","src":"833:17:37","value":{"arguments":[{"name":"x","nativeSrc":"845:1:37","nodeType":"YulIdentifier","src":"845:1:37"},{"name":"y","nativeSrc":"848:1:37","nodeType":"YulIdentifier","src":"848:1:37"}],"functionName":{"name":"sub","nativeSrc":"841:3:37","nodeType":"YulIdentifier","src":"841:3:37"},"nativeSrc":"841:9:37","nodeType":"YulFunctionCall","src":"841:9:37"},"variableNames":[{"name":"diff","nativeSrc":"833:4:37","nodeType":"YulIdentifier","src":"833:4:37"}]},{"body":{"nativeSrc":"882:111:37","nodeType":"YulBlock","src":"882:111:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:37","nodeType":"YulLiteral","src":"903:1:37","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"910:3:37","nodeType":"YulLiteral","src":"910:3:37","type":"","value":"224"},{"kind":"number","nativeSrc":"915:10:37","nodeType":"YulLiteral","src":"915:10:37","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"906:3:37","nodeType":"YulIdentifier","src":"906:3:37"},"nativeSrc":"906:20:37","nodeType":"YulFunctionCall","src":"906:20:37"}],"functionName":{"name":"mstore","nativeSrc":"896:6:37","nodeType":"YulIdentifier","src":"896:6:37"},"nativeSrc":"896:31:37","nodeType":"YulFunctionCall","src":"896:31:37"},"nativeSrc":"896:31:37","nodeType":"YulExpressionStatement","src":"896:31:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"947:1:37","nodeType":"YulLiteral","src":"947:1:37","type":"","value":"4"},{"kind":"number","nativeSrc":"950:4:37","nodeType":"YulLiteral","src":"950:4:37","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"940:6:37","nodeType":"YulIdentifier","src":"940:6:37"},"nativeSrc":"940:15:37","nodeType":"YulFunctionCall","src":"940:15:37"},"nativeSrc":"940:15:37","nodeType":"YulExpressionStatement","src":"940:15:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"975:1:37","nodeType":"YulLiteral","src":"975:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"978:4:37","nodeType":"YulLiteral","src":"978:4:37","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"968:6:37","nodeType":"YulIdentifier","src":"968:6:37"},"nativeSrc":"968:15:37","nodeType":"YulFunctionCall","src":"968:15:37"},"nativeSrc":"968:15:37","nodeType":"YulExpressionStatement","src":"968:15:37"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"865:4:37","nodeType":"YulIdentifier","src":"865:4:37"},{"name":"x","nativeSrc":"871:1:37","nodeType":"YulIdentifier","src":"871:1:37"}],"functionName":{"name":"gt","nativeSrc":"862:2:37","nodeType":"YulIdentifier","src":"862:2:37"},"nativeSrc":"862:11:37","nodeType":"YulFunctionCall","src":"862:11:37"},"nativeSrc":"859:134:37","nodeType":"YulIf","src":"859:134:37"}]},"name":"checked_sub_t_uint256","nativeSrc":"774:225:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"805:1:37","nodeType":"YulTypedName","src":"805:1:37","type":""},{"name":"y","nativeSrc":"808:1:37","nodeType":"YulTypedName","src":"808:1:37","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"814:4:37","nodeType":"YulTypedName","src":"814:4:37","type":""}],"src":"774:225:37"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$758_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":37,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b5060405161136038038061136083398101604081905261002f91610218565b8080336100448161003e6100cc565b90610100565b506001600160a01b039081166080528316905061007457604051633da979c160e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0384169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a15050610273565b6000806100fa60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610252565b92915050565b6001600160a01b038116156101565781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6101726307f5828d60e41b600161016b610176565b91906101a4565b5050565b6000806100fa60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610252565b600160e01b6001600160e01b03198316016101d2576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b038116811461021557600080fd5b50565b6000806040838503121561022b57600080fd5b825161023681610200565b602084015190925061024781610200565b809150509250929050565b818103818111156100fa57634e487b7160e01b600052601160045260246000fd5b6080516110be6102a26000396000818160ed0152818161016201528181610ada0152610b6801526110be6000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806373c8a95811610076578063c3666c361161005b578063c3666c36146101cf578063f2fde38b146101e2578063f7ba94bd146101f557600080fd5b806373c8a958146101b45780638da5cb5b146101c757600080fd5b80632bb14104116100a75780632bb1410414610132578063572b6c051461015257806361dfdae61461019f57600080fd5b806301ffc9a7146100c35780632b4c9f16146100eb575b600080fd5b6100d66100d1366004610e12565b610208565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e2565b60005461010d9073ffffffffffffffffffffffffffffffffffffffff1681565b6100d6610160366004610e7d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101b26101ad366004610e7d565b610222565b005b6101b26101c2366004610ee6565b610301565b61010d610322565b6101b26101dd366004610ee6565b61034e565b6101b26101f0366004610e7d565b610367565b6101b2610203366004610f8c565b610385565b600061021c826102166103a2565b906103d0565b92915050565b73ffffffffffffffffffffffffffffffffffffffff811661026f576040517ff6a5e70400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61028861027a6104aa565b6102826104b4565b906104e2565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150565b61030c61027a6104aa565b61031a868686868686610556565b505050505050565b600061034961032f6104b4565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61035961027a6104aa565b61031a868686868686610641565b6103826103726104aa565b8261037b6104b4565b91906108d7565b50565b61039061027a6104aa565b61039c848484846109eb565b50505050565b60008061021c60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610ffd565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016104205750600061021c565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016104715750600161021c565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610349610a97565b60008061021c60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610ffd565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610552576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b8483811415806105665750808214155b1561059d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106375761062f8888838181106105bd576105bd611037565b90506020020160208101906105d29190610e7d565b8585848181106105e4576105e4611037565b905060200201358888858181106105fd576105fd611037565b90506020020160208101906106129190610e7d565b73ffffffffffffffffffffffffffffffffffffffff169190610be4565b6001016105a0565b5050505050505050565b8483811415806106515750808214155b15610688576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106375760008686838181106106a7576106a7611037565b90506020020160208101906106bc9190610e7d565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190611066565b6107bb576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610549565b8686838181106107cd576107cd611037565b90506020020160208101906107e29190610e7d565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b8681811061081057610810611037565b90506020020160208101906108259190610e7d565b88888781811061083757610837611037565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156108b357600080fd5b505af11580156108c7573d6000803e3d6000fd5b505050505080600101905061068b565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610944576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610549565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461039c5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b82818114610a25576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561031a57610a8f848483818110610a4557610a45611037565b90506020020135878784818110610a5e57610a5e611037565b9050602002016020810190610a739190610e7d565b73ffffffffffffffffffffffffffffffffffffffff1690610c76565b600101610a28565b600033321480610aa75750601836105b15610ab157503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610bd357506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015610baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd39190611066565b15610bdd57919050565b3391505090565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610c71908490610d2c565b505050565b80471015610cb9576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610549565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114610d14576040519150601f19603f3d011682016040523d82523d6000602084013e610d19565b606091505b50915091508161039c5761039c81610dd0565b600080602060008451602086016000885af180610d4f576040513d6000823e3d81fd5b50506000513d91508115610d67578060011415610d81565b73ffffffffffffffffffffffffffffffffffffffff84163b155b1561039c576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610549565b805115610de05780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208284031215610e2457600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e5457600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461038257600080fd5b600060208284031215610e8f57600080fd5b8135610e5481610e5b565b60008083601f840112610eac57600080fd5b50813567ffffffffffffffff811115610ec457600080fd5b6020830191508360208260051b8501011115610edf57600080fd5b9250929050565b60008060008060008060608789031215610eff57600080fd5b863567ffffffffffffffff811115610f1657600080fd5b610f2289828a01610e9a565b909750955050602087013567ffffffffffffffff811115610f4257600080fd5b610f4e89828a01610e9a565b909550935050604087013567ffffffffffffffff811115610f6e57600080fd5b610f7a89828a01610e9a565b979a9699509497509295939492505050565b60008060008060408587031215610fa257600080fd5b843567ffffffffffffffff811115610fb957600080fd5b610fc587828801610e9a565b909550935050602085013567ffffffffffffffff811115610fe557600080fd5b610ff187828801610e9a565b95989497509550505050565b8181038181111561021c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561107857600080fd5b81518015158114610e5457600080fdfea26469706673582212200f380ad921ba5824fa6663dbb884105edfa37c3b5d56370cd1e18a0564134c4d64736f6c634300081c0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1360 CODESIZE SUB DUP1 PUSH2 0x1360 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x218 JUMP JUMPDEST DUP1 DUP1 CALLER PUSH2 0x44 DUP2 PUSH2 0x3E PUSH2 0xCC JUMP JUMPDEST SWAP1 PUSH2 0x100 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP4 AND SWAP1 POP PUSH2 0x74 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DA979C1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP PUSH2 0x273 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFA PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x252 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x156 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x172 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x16B PUSH2 0x176 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A4 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFA PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x252 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1D2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x215 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x236 DUP2 PUSH2 0x200 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x247 DUP2 PUSH2 0x200 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xFA JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x10BE PUSH2 0x2A2 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xED ADD MSTORE DUP2 DUP2 PUSH2 0x162 ADD MSTORE DUP2 DUP2 PUSH2 0xADA ADD MSTORE PUSH2 0xB68 ADD MSTORE PUSH2 0x10BE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x132 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x208 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x10D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0xE7D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0xE7D JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x301 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x322 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x34E JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1F0 CALLDATASIZE PUSH1 0x4 PUSH2 0xE7D JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0xF8C JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C DUP3 PUSH2 0x216 PUSH2 0x3A2 JUMP JUMPDEST SWAP1 PUSH2 0x3D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x26F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x288 PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x282 PUSH2 0x4B4 JUMP JUMPDEST SWAP1 PUSH2 0x4E2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x30C PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x31A DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x556 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x349 PUSH2 0x32F PUSH2 0x4B4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x359 PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x31A DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x641 JUMP JUMPDEST PUSH2 0x382 PUSH2 0x372 PUSH2 0x4AA JUMP JUMPDEST DUP3 PUSH2 0x37B PUSH2 0x4B4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x390 PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x39C DUP5 DUP5 DUP5 DUP5 PUSH2 0x9EB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21C PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x420 JUMPI POP PUSH1 0x0 PUSH2 0x21C JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x471 JUMPI POP PUSH1 0x1 PUSH2 0x21C JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x349 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21C PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xFFD JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x566 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x637 JUMPI PUSH2 0x62F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x5BD JUMPI PUSH2 0x5BD PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5D2 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x5E4 JUMPI PUSH2 0x5E4 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x5FD JUMPI PUSH2 0x5FD PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x612 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xBE4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5A0 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x651 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x6A7 JUMPI PUSH2 0x6A7 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x749 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76D SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x549 JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x7CD JUMPI PUSH2 0x7CD PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7E2 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x810 JUMPI PUSH2 0x810 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x825 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x837 JUMPI PUSH2 0x837 PUSH2 0x1037 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x68B JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x944 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x549 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x39C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xA25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x31A JUMPI PUSH2 0xA8F DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xA45 JUMPI PUSH2 0xA45 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xA5E JUMPI PUSH2 0xA5E PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA73 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA28 JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xAA7 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xAB1 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xBD3 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBAF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBD3 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST ISZERO PUSH2 0xBDD JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xC71 SWAP1 DUP5 SWAP1 PUSH2 0xD2C JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x549 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD14 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x39C JUMPI PUSH2 0x39C DUP2 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0xD4F JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0xD67 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xD81 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x39C JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x549 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xDE0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE54 DUP2 PUSH2 0xE5B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xEAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xEDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF22 DUP10 DUP3 DUP11 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF4E DUP10 DUP3 DUP11 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7A DUP10 DUP3 DUP11 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xFA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFC5 DUP8 DUP3 DUP9 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFF1 DUP8 DUP3 DUP9 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x21C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF CODESIZE EXP 0xD9 0x21 0xBA PC 0x24 STATICCALL PUSH7 0x63DBB884105EDF LOG3 PUSH29 0x3B5D56370CD1E18A0564134C4D64736F6C634300081C00330000000000 ","sourceMap":"809:1196:35:-:0;;;1043:254;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1162:17;;1125:10;1008:63:1;1125:10:35;1008:33:1;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:13;;;;;1195:18:35;::::2;::::0;-1:-1:-1;1191:48:35::2;;1222:17;;-1:-1:-1::0;;;1222:17:35::2;;;;;;;;;;;1191:48;1249:6;:13:::0;;-1:-1:-1;;;;;;1249:13:35::2;-1:-1:-1::0;;;;;1249:13:35;::::2;::::0;;::::2;::::0;;;1277::::2;::::0;712:51:37;;;1277:13:35::2;::::0;700:2:37;685:18;1277:13:35::2;;;;;;;1043:254:::0;;809:1196;;5060:174:7;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:7:o;1561:341::-;-1:-1:-1;;;;;1649:26:7;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:7;-1:-1:-1;;;;;1691:30:7;;;;;;;1740:46;;-1:-1:-1;;1740:46:7;;-1:-1:-1;;1740:46:7;1645:152;1806:89;-1:-1:-1;;;1890:4:7;1806:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1561:341;;:::o;1705:174:11:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:11;;;877:68;;925:20;;-1:-1:-1;;;925:20:11;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:11;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:11;;;;;;;;;;773:235::o;14:131:37:-;-1:-1:-1;;;;;89:31:37;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:411::-;255:6;263;316:2;304:9;295:7;291:23;287:32;284:52;;;332:1;329;322:12;284:52;364:9;358:16;383:31;408:5;383:31;:::i;:::-;483:2;468:18;;462:25;433:5;;-1:-1:-1;496:33:37;462:25;496:33;:::i;:::-;548:7;538:17;;;150:411;;;;;:::o;774:225::-;841:9;;;862:11;;;859:134;;;915:10;910:3;906:20;903:1;896:31;950:4;947:1;940:15;978:4;975:1;968:15;774:225;809:1196:35;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_callOptionalReturn_1873":{"entryPoint":3372,"id":1873,"parameterSlots":2,"returnSlots":0},"@_msgSender_2476":{"entryPoint":1194,"id":2476,"parameterSlots":0,"returnSlots":1},"@_msgSender_677":{"entryPoint":2711,"id":677,"parameterSlots":0,"returnSlots":1},"@_revert_2174":{"entryPoint":3536,"id":2174,"parameterSlots":1,"returnSlots":0},"@enforceIsContractOwner_372":{"entryPoint":1250,"id":372,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_585":{"entryPoint":null,"id":585,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_601":{"entryPoint":null,"id":601,"parameterSlots":1,"returnSlots":1},"@layout_404":{"entryPoint":1204,"id":404,"parameterSlots":0,"returnSlots":1},"@layout_552":{"entryPoint":930,"id":552,"parameterSlots":0,"returnSlots":1},"@msgSender_769":{"entryPoint":null,"id":769,"parameterSlots":0,"returnSlots":1},"@myData_2389":{"entryPoint":null,"id":2389,"parameterSlots":0,"returnSlots":0},"@owner_325":{"entryPoint":null,"id":325,"parameterSlots":1,"returnSlots":1},"@owner_73":{"entryPoint":802,"id":73,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_1142":{"entryPoint":1366,"id":1142,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_937":{"entryPoint":769,"id":937,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1231":{"entryPoint":1601,"id":1231,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_969":{"entryPoint":846,"id":969,"parameterSlots":6,"returnSlots":0},"@recoverETH_1086":{"entryPoint":2539,"id":1086,"parameterSlots":4,"returnSlots":0},"@recoverETH_905":{"entryPoint":901,"id":905,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1551":{"entryPoint":3044,"id":1551,"parameterSlots":3,"returnSlots":0},"@sendValue_1973":{"entryPoint":3190,"id":1973,"parameterSlots":2,"returnSlots":0},"@setData_2462":{"entryPoint":546,"id":2462,"parameterSlots":1,"returnSlots":0},"@supportsInterface_434":{"entryPoint":520,"id":434,"parameterSlots":1,"returnSlots":1},"@supportsInterface_540":{"entryPoint":976,"id":540,"parameterSlots":2,"returnSlots":1},"@transferOwnership_312":{"entryPoint":2263,"id":312,"parameterSlots":3,"returnSlots":0},"@transferOwnership_90":{"entryPoint":871,"id":90,"parameterSlots":1,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":3738,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":3709,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":3814,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":3980,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4198,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":3602,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1506":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1318":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$758__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4093,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":4151,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":3675,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8295:37","nodeType":"YulBlock","src":"0:8295:37","statements":[{"nativeSrc":"6:3:37","nodeType":"YulBlock","src":"6:3:37","statements":[]},{"body":{"nativeSrc":"83:263:37","nodeType":"YulBlock","src":"83:263:37","statements":[{"body":{"nativeSrc":"129:16:37","nodeType":"YulBlock","src":"129:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:37","nodeType":"YulLiteral","src":"138:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:37","nodeType":"YulLiteral","src":"141:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:37","nodeType":"YulIdentifier","src":"131:6:37"},"nativeSrc":"131:12:37","nodeType":"YulFunctionCall","src":"131:12:37"},"nativeSrc":"131:12:37","nodeType":"YulExpressionStatement","src":"131:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:37","nodeType":"YulIdentifier","src":"104:7:37"},{"name":"headStart","nativeSrc":"113:9:37","nodeType":"YulIdentifier","src":"113:9:37"}],"functionName":{"name":"sub","nativeSrc":"100:3:37","nodeType":"YulIdentifier","src":"100:3:37"},"nativeSrc":"100:23:37","nodeType":"YulFunctionCall","src":"100:23:37"},{"kind":"number","nativeSrc":"125:2:37","nodeType":"YulLiteral","src":"125:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:37","nodeType":"YulIdentifier","src":"96:3:37"},"nativeSrc":"96:32:37","nodeType":"YulFunctionCall","src":"96:32:37"},"nativeSrc":"93:52:37","nodeType":"YulIf","src":"93:52:37"},{"nativeSrc":"154:36:37","nodeType":"YulVariableDeclaration","src":"154:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:37","nodeType":"YulIdentifier","src":"180:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:37","nodeType":"YulIdentifier","src":"167:12:37"},"nativeSrc":"167:23:37","nodeType":"YulFunctionCall","src":"167:23:37"},"variables":[{"name":"value","nativeSrc":"158:5:37","nodeType":"YulTypedName","src":"158:5:37","type":""}]},{"body":{"nativeSrc":"300:16:37","nodeType":"YulBlock","src":"300:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:37","nodeType":"YulLiteral","src":"309:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:37","nodeType":"YulLiteral","src":"312:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:37","nodeType":"YulIdentifier","src":"302:6:37"},"nativeSrc":"302:12:37","nodeType":"YulFunctionCall","src":"302:12:37"},"nativeSrc":"302:12:37","nodeType":"YulExpressionStatement","src":"302:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:37","nodeType":"YulIdentifier","src":"212:5:37"},{"arguments":[{"name":"value","nativeSrc":"223:5:37","nodeType":"YulIdentifier","src":"223:5:37"},{"kind":"number","nativeSrc":"230:66:37","nodeType":"YulLiteral","src":"230:66:37","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:37","nodeType":"YulIdentifier","src":"219:3:37"},"nativeSrc":"219:78:37","nodeType":"YulFunctionCall","src":"219:78:37"}],"functionName":{"name":"eq","nativeSrc":"209:2:37","nodeType":"YulIdentifier","src":"209:2:37"},"nativeSrc":"209:89:37","nodeType":"YulFunctionCall","src":"209:89:37"}],"functionName":{"name":"iszero","nativeSrc":"202:6:37","nodeType":"YulIdentifier","src":"202:6:37"},"nativeSrc":"202:97:37","nodeType":"YulFunctionCall","src":"202:97:37"},"nativeSrc":"199:117:37","nodeType":"YulIf","src":"199:117:37"},{"nativeSrc":"325:15:37","nodeType":"YulAssignment","src":"325:15:37","value":{"name":"value","nativeSrc":"335:5:37","nodeType":"YulIdentifier","src":"335:5:37"},"variableNames":[{"name":"value0","nativeSrc":"325:6:37","nodeType":"YulIdentifier","src":"325:6:37"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:37","nodeType":"YulTypedName","src":"49:9:37","type":""},{"name":"dataEnd","nativeSrc":"60:7:37","nodeType":"YulTypedName","src":"60:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:37","nodeType":"YulTypedName","src":"72:6:37","type":""}],"src":"14:332:37"},{"body":{"nativeSrc":"446:92:37","nodeType":"YulBlock","src":"446:92:37","statements":[{"nativeSrc":"456:26:37","nodeType":"YulAssignment","src":"456:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:37","nodeType":"YulIdentifier","src":"468:9:37"},{"kind":"number","nativeSrc":"479:2:37","nodeType":"YulLiteral","src":"479:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:37","nodeType":"YulIdentifier","src":"464:3:37"},"nativeSrc":"464:18:37","nodeType":"YulFunctionCall","src":"464:18:37"},"variableNames":[{"name":"tail","nativeSrc":"456:4:37","nodeType":"YulIdentifier","src":"456:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:37","nodeType":"YulIdentifier","src":"498:9:37"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:37","nodeType":"YulIdentifier","src":"523:6:37"}],"functionName":{"name":"iszero","nativeSrc":"516:6:37","nodeType":"YulIdentifier","src":"516:6:37"},"nativeSrc":"516:14:37","nodeType":"YulFunctionCall","src":"516:14:37"}],"functionName":{"name":"iszero","nativeSrc":"509:6:37","nodeType":"YulIdentifier","src":"509:6:37"},"nativeSrc":"509:22:37","nodeType":"YulFunctionCall","src":"509:22:37"}],"functionName":{"name":"mstore","nativeSrc":"491:6:37","nodeType":"YulIdentifier","src":"491:6:37"},"nativeSrc":"491:41:37","nodeType":"YulFunctionCall","src":"491:41:37"},"nativeSrc":"491:41:37","nodeType":"YulExpressionStatement","src":"491:41:37"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:37","nodeType":"YulTypedName","src":"415:9:37","type":""},{"name":"value0","nativeSrc":"426:6:37","nodeType":"YulTypedName","src":"426:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:37","nodeType":"YulTypedName","src":"437:4:37","type":""}],"src":"351:187:37"},{"body":{"nativeSrc":"670:125:37","nodeType":"YulBlock","src":"670:125:37","statements":[{"nativeSrc":"680:26:37","nodeType":"YulAssignment","src":"680:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"692:9:37","nodeType":"YulIdentifier","src":"692:9:37"},{"kind":"number","nativeSrc":"703:2:37","nodeType":"YulLiteral","src":"703:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"688:3:37","nodeType":"YulIdentifier","src":"688:3:37"},"nativeSrc":"688:18:37","nodeType":"YulFunctionCall","src":"688:18:37"},"variableNames":[{"name":"tail","nativeSrc":"680:4:37","nodeType":"YulIdentifier","src":"680:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"722:9:37","nodeType":"YulIdentifier","src":"722:9:37"},{"arguments":[{"name":"value0","nativeSrc":"737:6:37","nodeType":"YulIdentifier","src":"737:6:37"},{"kind":"number","nativeSrc":"745:42:37","nodeType":"YulLiteral","src":"745:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"733:3:37","nodeType":"YulIdentifier","src":"733:3:37"},"nativeSrc":"733:55:37","nodeType":"YulFunctionCall","src":"733:55:37"}],"functionName":{"name":"mstore","nativeSrc":"715:6:37","nodeType":"YulIdentifier","src":"715:6:37"},"nativeSrc":"715:74:37","nodeType":"YulFunctionCall","src":"715:74:37"},"nativeSrc":"715:74:37","nodeType":"YulExpressionStatement","src":"715:74:37"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$758__to_t_address__fromStack_reversed","nativeSrc":"543:252:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"639:9:37","nodeType":"YulTypedName","src":"639:9:37","type":""},{"name":"value0","nativeSrc":"650:6:37","nodeType":"YulTypedName","src":"650:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"661:4:37","nodeType":"YulTypedName","src":"661:4:37","type":""}],"src":"543:252:37"},{"body":{"nativeSrc":"901:125:37","nodeType":"YulBlock","src":"901:125:37","statements":[{"nativeSrc":"911:26:37","nodeType":"YulAssignment","src":"911:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"923:9:37","nodeType":"YulIdentifier","src":"923:9:37"},{"kind":"number","nativeSrc":"934:2:37","nodeType":"YulLiteral","src":"934:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"919:3:37","nodeType":"YulIdentifier","src":"919:3:37"},"nativeSrc":"919:18:37","nodeType":"YulFunctionCall","src":"919:18:37"},"variableNames":[{"name":"tail","nativeSrc":"911:4:37","nodeType":"YulIdentifier","src":"911:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"953:9:37","nodeType":"YulIdentifier","src":"953:9:37"},{"arguments":[{"name":"value0","nativeSrc":"968:6:37","nodeType":"YulIdentifier","src":"968:6:37"},{"kind":"number","nativeSrc":"976:42:37","nodeType":"YulLiteral","src":"976:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"964:3:37","nodeType":"YulIdentifier","src":"964:3:37"},"nativeSrc":"964:55:37","nodeType":"YulFunctionCall","src":"964:55:37"}],"functionName":{"name":"mstore","nativeSrc":"946:6:37","nodeType":"YulIdentifier","src":"946:6:37"},"nativeSrc":"946:74:37","nodeType":"YulFunctionCall","src":"946:74:37"},"nativeSrc":"946:74:37","nodeType":"YulExpressionStatement","src":"946:74:37"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"800:226:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"870:9:37","nodeType":"YulTypedName","src":"870:9:37","type":""},{"name":"value0","nativeSrc":"881:6:37","nodeType":"YulTypedName","src":"881:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"892:4:37","nodeType":"YulTypedName","src":"892:4:37","type":""}],"src":"800:226:37"},{"body":{"nativeSrc":"1076:109:37","nodeType":"YulBlock","src":"1076:109:37","statements":[{"body":{"nativeSrc":"1163:16:37","nodeType":"YulBlock","src":"1163:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1172:1:37","nodeType":"YulLiteral","src":"1172:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"1175:1:37","nodeType":"YulLiteral","src":"1175:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1165:6:37","nodeType":"YulIdentifier","src":"1165:6:37"},"nativeSrc":"1165:12:37","nodeType":"YulFunctionCall","src":"1165:12:37"},"nativeSrc":"1165:12:37","nodeType":"YulExpressionStatement","src":"1165:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1099:5:37","nodeType":"YulIdentifier","src":"1099:5:37"},{"arguments":[{"name":"value","nativeSrc":"1110:5:37","nodeType":"YulIdentifier","src":"1110:5:37"},{"kind":"number","nativeSrc":"1117:42:37","nodeType":"YulLiteral","src":"1117:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1106:3:37","nodeType":"YulIdentifier","src":"1106:3:37"},"nativeSrc":"1106:54:37","nodeType":"YulFunctionCall","src":"1106:54:37"}],"functionName":{"name":"eq","nativeSrc":"1096:2:37","nodeType":"YulIdentifier","src":"1096:2:37"},"nativeSrc":"1096:65:37","nodeType":"YulFunctionCall","src":"1096:65:37"}],"functionName":{"name":"iszero","nativeSrc":"1089:6:37","nodeType":"YulIdentifier","src":"1089:6:37"},"nativeSrc":"1089:73:37","nodeType":"YulFunctionCall","src":"1089:73:37"},"nativeSrc":"1086:93:37","nodeType":"YulIf","src":"1086:93:37"}]},"name":"validator_revert_address","nativeSrc":"1031:154:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1065:5:37","nodeType":"YulTypedName","src":"1065:5:37","type":""}],"src":"1031:154:37"},{"body":{"nativeSrc":"1260:177:37","nodeType":"YulBlock","src":"1260:177:37","statements":[{"body":{"nativeSrc":"1306:16:37","nodeType":"YulBlock","src":"1306:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1315:1:37","nodeType":"YulLiteral","src":"1315:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"1318:1:37","nodeType":"YulLiteral","src":"1318:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1308:6:37","nodeType":"YulIdentifier","src":"1308:6:37"},"nativeSrc":"1308:12:37","nodeType":"YulFunctionCall","src":"1308:12:37"},"nativeSrc":"1308:12:37","nodeType":"YulExpressionStatement","src":"1308:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1281:7:37","nodeType":"YulIdentifier","src":"1281:7:37"},{"name":"headStart","nativeSrc":"1290:9:37","nodeType":"YulIdentifier","src":"1290:9:37"}],"functionName":{"name":"sub","nativeSrc":"1277:3:37","nodeType":"YulIdentifier","src":"1277:3:37"},"nativeSrc":"1277:23:37","nodeType":"YulFunctionCall","src":"1277:23:37"},{"kind":"number","nativeSrc":"1302:2:37","nodeType":"YulLiteral","src":"1302:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1273:3:37","nodeType":"YulIdentifier","src":"1273:3:37"},"nativeSrc":"1273:32:37","nodeType":"YulFunctionCall","src":"1273:32:37"},"nativeSrc":"1270:52:37","nodeType":"YulIf","src":"1270:52:37"},{"nativeSrc":"1331:36:37","nodeType":"YulVariableDeclaration","src":"1331:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"1357:9:37","nodeType":"YulIdentifier","src":"1357:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"1344:12:37","nodeType":"YulIdentifier","src":"1344:12:37"},"nativeSrc":"1344:23:37","nodeType":"YulFunctionCall","src":"1344:23:37"},"variables":[{"name":"value","nativeSrc":"1335:5:37","nodeType":"YulTypedName","src":"1335:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1401:5:37","nodeType":"YulIdentifier","src":"1401:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1376:24:37","nodeType":"YulIdentifier","src":"1376:24:37"},"nativeSrc":"1376:31:37","nodeType":"YulFunctionCall","src":"1376:31:37"},"nativeSrc":"1376:31:37","nodeType":"YulExpressionStatement","src":"1376:31:37"},{"nativeSrc":"1416:15:37","nodeType":"YulAssignment","src":"1416:15:37","value":{"name":"value","nativeSrc":"1426:5:37","nodeType":"YulIdentifier","src":"1426:5:37"},"variableNames":[{"name":"value0","nativeSrc":"1416:6:37","nodeType":"YulIdentifier","src":"1416:6:37"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1190:247:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1226:9:37","nodeType":"YulTypedName","src":"1226:9:37","type":""},{"name":"dataEnd","nativeSrc":"1237:7:37","nodeType":"YulTypedName","src":"1237:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1249:6:37","nodeType":"YulTypedName","src":"1249:6:37","type":""}],"src":"1190:247:37"},{"body":{"nativeSrc":"1526:283:37","nodeType":"YulBlock","src":"1526:283:37","statements":[{"body":{"nativeSrc":"1575:16:37","nodeType":"YulBlock","src":"1575:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1584:1:37","nodeType":"YulLiteral","src":"1584:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"1587:1:37","nodeType":"YulLiteral","src":"1587:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1577:6:37","nodeType":"YulIdentifier","src":"1577:6:37"},"nativeSrc":"1577:12:37","nodeType":"YulFunctionCall","src":"1577:12:37"},"nativeSrc":"1577:12:37","nodeType":"YulExpressionStatement","src":"1577:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1554:6:37","nodeType":"YulIdentifier","src":"1554:6:37"},{"kind":"number","nativeSrc":"1562:4:37","nodeType":"YulLiteral","src":"1562:4:37","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1550:3:37","nodeType":"YulIdentifier","src":"1550:3:37"},"nativeSrc":"1550:17:37","nodeType":"YulFunctionCall","src":"1550:17:37"},{"name":"end","nativeSrc":"1569:3:37","nodeType":"YulIdentifier","src":"1569:3:37"}],"functionName":{"name":"slt","nativeSrc":"1546:3:37","nodeType":"YulIdentifier","src":"1546:3:37"},"nativeSrc":"1546:27:37","nodeType":"YulFunctionCall","src":"1546:27:37"}],"functionName":{"name":"iszero","nativeSrc":"1539:6:37","nodeType":"YulIdentifier","src":"1539:6:37"},"nativeSrc":"1539:35:37","nodeType":"YulFunctionCall","src":"1539:35:37"},"nativeSrc":"1536:55:37","nodeType":"YulIf","src":"1536:55:37"},{"nativeSrc":"1600:30:37","nodeType":"YulAssignment","src":"1600:30:37","value":{"arguments":[{"name":"offset","nativeSrc":"1623:6:37","nodeType":"YulIdentifier","src":"1623:6:37"}],"functionName":{"name":"calldataload","nativeSrc":"1610:12:37","nodeType":"YulIdentifier","src":"1610:12:37"},"nativeSrc":"1610:20:37","nodeType":"YulFunctionCall","src":"1610:20:37"},"variableNames":[{"name":"length","nativeSrc":"1600:6:37","nodeType":"YulIdentifier","src":"1600:6:37"}]},{"body":{"nativeSrc":"1673:16:37","nodeType":"YulBlock","src":"1673:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1682:1:37","nodeType":"YulLiteral","src":"1682:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"1685:1:37","nodeType":"YulLiteral","src":"1685:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1675:6:37","nodeType":"YulIdentifier","src":"1675:6:37"},"nativeSrc":"1675:12:37","nodeType":"YulFunctionCall","src":"1675:12:37"},"nativeSrc":"1675:12:37","nodeType":"YulExpressionStatement","src":"1675:12:37"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1645:6:37","nodeType":"YulIdentifier","src":"1645:6:37"},{"kind":"number","nativeSrc":"1653:18:37","nodeType":"YulLiteral","src":"1653:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1642:2:37","nodeType":"YulIdentifier","src":"1642:2:37"},"nativeSrc":"1642:30:37","nodeType":"YulFunctionCall","src":"1642:30:37"},"nativeSrc":"1639:50:37","nodeType":"YulIf","src":"1639:50:37"},{"nativeSrc":"1698:29:37","nodeType":"YulAssignment","src":"1698:29:37","value":{"arguments":[{"name":"offset","nativeSrc":"1714:6:37","nodeType":"YulIdentifier","src":"1714:6:37"},{"kind":"number","nativeSrc":"1722:4:37","nodeType":"YulLiteral","src":"1722:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1710:3:37","nodeType":"YulIdentifier","src":"1710:3:37"},"nativeSrc":"1710:17:37","nodeType":"YulFunctionCall","src":"1710:17:37"},"variableNames":[{"name":"arrayPos","nativeSrc":"1698:8:37","nodeType":"YulIdentifier","src":"1698:8:37"}]},{"body":{"nativeSrc":"1787:16:37","nodeType":"YulBlock","src":"1787:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1796:1:37","nodeType":"YulLiteral","src":"1796:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"1799:1:37","nodeType":"YulLiteral","src":"1799:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1789:6:37","nodeType":"YulIdentifier","src":"1789:6:37"},"nativeSrc":"1789:12:37","nodeType":"YulFunctionCall","src":"1789:12:37"},"nativeSrc":"1789:12:37","nodeType":"YulExpressionStatement","src":"1789:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1750:6:37","nodeType":"YulIdentifier","src":"1750:6:37"},{"arguments":[{"kind":"number","nativeSrc":"1762:1:37","nodeType":"YulLiteral","src":"1762:1:37","type":"","value":"5"},{"name":"length","nativeSrc":"1765:6:37","nodeType":"YulIdentifier","src":"1765:6:37"}],"functionName":{"name":"shl","nativeSrc":"1758:3:37","nodeType":"YulIdentifier","src":"1758:3:37"},"nativeSrc":"1758:14:37","nodeType":"YulFunctionCall","src":"1758:14:37"}],"functionName":{"name":"add","nativeSrc":"1746:3:37","nodeType":"YulIdentifier","src":"1746:3:37"},"nativeSrc":"1746:27:37","nodeType":"YulFunctionCall","src":"1746:27:37"},{"kind":"number","nativeSrc":"1775:4:37","nodeType":"YulLiteral","src":"1775:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1742:3:37","nodeType":"YulIdentifier","src":"1742:3:37"},"nativeSrc":"1742:38:37","nodeType":"YulFunctionCall","src":"1742:38:37"},{"name":"end","nativeSrc":"1782:3:37","nodeType":"YulIdentifier","src":"1782:3:37"}],"functionName":{"name":"gt","nativeSrc":"1739:2:37","nodeType":"YulIdentifier","src":"1739:2:37"},"nativeSrc":"1739:47:37","nodeType":"YulFunctionCall","src":"1739:47:37"},"nativeSrc":"1736:67:37","nodeType":"YulIf","src":"1736:67:37"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1442:367:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1489:6:37","nodeType":"YulTypedName","src":"1489:6:37","type":""},{"name":"end","nativeSrc":"1497:3:37","nodeType":"YulTypedName","src":"1497:3:37","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1505:8:37","nodeType":"YulTypedName","src":"1505:8:37","type":""},{"name":"length","nativeSrc":"1515:6:37","nodeType":"YulTypedName","src":"1515:6:37","type":""}],"src":"1442:367:37"},{"body":{"nativeSrc":"2038:890:37","nodeType":"YulBlock","src":"2038:890:37","statements":[{"body":{"nativeSrc":"2084:16:37","nodeType":"YulBlock","src":"2084:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2093:1:37","nodeType":"YulLiteral","src":"2093:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2096:1:37","nodeType":"YulLiteral","src":"2096:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2086:6:37","nodeType":"YulIdentifier","src":"2086:6:37"},"nativeSrc":"2086:12:37","nodeType":"YulFunctionCall","src":"2086:12:37"},"nativeSrc":"2086:12:37","nodeType":"YulExpressionStatement","src":"2086:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2059:7:37","nodeType":"YulIdentifier","src":"2059:7:37"},{"name":"headStart","nativeSrc":"2068:9:37","nodeType":"YulIdentifier","src":"2068:9:37"}],"functionName":{"name":"sub","nativeSrc":"2055:3:37","nodeType":"YulIdentifier","src":"2055:3:37"},"nativeSrc":"2055:23:37","nodeType":"YulFunctionCall","src":"2055:23:37"},{"kind":"number","nativeSrc":"2080:2:37","nodeType":"YulLiteral","src":"2080:2:37","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2051:3:37","nodeType":"YulIdentifier","src":"2051:3:37"},"nativeSrc":"2051:32:37","nodeType":"YulFunctionCall","src":"2051:32:37"},"nativeSrc":"2048:52:37","nodeType":"YulIf","src":"2048:52:37"},{"nativeSrc":"2109:37:37","nodeType":"YulVariableDeclaration","src":"2109:37:37","value":{"arguments":[{"name":"headStart","nativeSrc":"2136:9:37","nodeType":"YulIdentifier","src":"2136:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"2123:12:37","nodeType":"YulIdentifier","src":"2123:12:37"},"nativeSrc":"2123:23:37","nodeType":"YulFunctionCall","src":"2123:23:37"},"variables":[{"name":"offset","nativeSrc":"2113:6:37","nodeType":"YulTypedName","src":"2113:6:37","type":""}]},{"body":{"nativeSrc":"2189:16:37","nodeType":"YulBlock","src":"2189:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2198:1:37","nodeType":"YulLiteral","src":"2198:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2201:1:37","nodeType":"YulLiteral","src":"2201:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2191:6:37","nodeType":"YulIdentifier","src":"2191:6:37"},"nativeSrc":"2191:12:37","nodeType":"YulFunctionCall","src":"2191:12:37"},"nativeSrc":"2191:12:37","nodeType":"YulExpressionStatement","src":"2191:12:37"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2161:6:37","nodeType":"YulIdentifier","src":"2161:6:37"},{"kind":"number","nativeSrc":"2169:18:37","nodeType":"YulLiteral","src":"2169:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2158:2:37","nodeType":"YulIdentifier","src":"2158:2:37"},"nativeSrc":"2158:30:37","nodeType":"YulFunctionCall","src":"2158:30:37"},"nativeSrc":"2155:50:37","nodeType":"YulIf","src":"2155:50:37"},{"nativeSrc":"2214:96:37","nodeType":"YulVariableDeclaration","src":"2214:96:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2282:9:37","nodeType":"YulIdentifier","src":"2282:9:37"},{"name":"offset","nativeSrc":"2293:6:37","nodeType":"YulIdentifier","src":"2293:6:37"}],"functionName":{"name":"add","nativeSrc":"2278:3:37","nodeType":"YulIdentifier","src":"2278:3:37"},"nativeSrc":"2278:22:37","nodeType":"YulFunctionCall","src":"2278:22:37"},{"name":"dataEnd","nativeSrc":"2302:7:37","nodeType":"YulIdentifier","src":"2302:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2240:37:37","nodeType":"YulIdentifier","src":"2240:37:37"},"nativeSrc":"2240:70:37","nodeType":"YulFunctionCall","src":"2240:70:37"},"variables":[{"name":"value0_1","nativeSrc":"2218:8:37","nodeType":"YulTypedName","src":"2218:8:37","type":""},{"name":"value1_1","nativeSrc":"2228:8:37","nodeType":"YulTypedName","src":"2228:8:37","type":""}]},{"nativeSrc":"2319:18:37","nodeType":"YulAssignment","src":"2319:18:37","value":{"name":"value0_1","nativeSrc":"2329:8:37","nodeType":"YulIdentifier","src":"2329:8:37"},"variableNames":[{"name":"value0","nativeSrc":"2319:6:37","nodeType":"YulIdentifier","src":"2319:6:37"}]},{"nativeSrc":"2346:18:37","nodeType":"YulAssignment","src":"2346:18:37","value":{"name":"value1_1","nativeSrc":"2356:8:37","nodeType":"YulIdentifier","src":"2356:8:37"},"variableNames":[{"name":"value1","nativeSrc":"2346:6:37","nodeType":"YulIdentifier","src":"2346:6:37"}]},{"nativeSrc":"2373:48:37","nodeType":"YulVariableDeclaration","src":"2373:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2406:9:37","nodeType":"YulIdentifier","src":"2406:9:37"},{"kind":"number","nativeSrc":"2417:2:37","nodeType":"YulLiteral","src":"2417:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2402:3:37","nodeType":"YulIdentifier","src":"2402:3:37"},"nativeSrc":"2402:18:37","nodeType":"YulFunctionCall","src":"2402:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"2389:12:37","nodeType":"YulIdentifier","src":"2389:12:37"},"nativeSrc":"2389:32:37","nodeType":"YulFunctionCall","src":"2389:32:37"},"variables":[{"name":"offset_1","nativeSrc":"2377:8:37","nodeType":"YulTypedName","src":"2377:8:37","type":""}]},{"body":{"nativeSrc":"2466:16:37","nodeType":"YulBlock","src":"2466:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2475:1:37","nodeType":"YulLiteral","src":"2475:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2478:1:37","nodeType":"YulLiteral","src":"2478:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2468:6:37","nodeType":"YulIdentifier","src":"2468:6:37"},"nativeSrc":"2468:12:37","nodeType":"YulFunctionCall","src":"2468:12:37"},"nativeSrc":"2468:12:37","nodeType":"YulExpressionStatement","src":"2468:12:37"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2436:8:37","nodeType":"YulIdentifier","src":"2436:8:37"},{"kind":"number","nativeSrc":"2446:18:37","nodeType":"YulLiteral","src":"2446:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2433:2:37","nodeType":"YulIdentifier","src":"2433:2:37"},"nativeSrc":"2433:32:37","nodeType":"YulFunctionCall","src":"2433:32:37"},"nativeSrc":"2430:52:37","nodeType":"YulIf","src":"2430:52:37"},{"nativeSrc":"2491:98:37","nodeType":"YulVariableDeclaration","src":"2491:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2559:9:37","nodeType":"YulIdentifier","src":"2559:9:37"},{"name":"offset_1","nativeSrc":"2570:8:37","nodeType":"YulIdentifier","src":"2570:8:37"}],"functionName":{"name":"add","nativeSrc":"2555:3:37","nodeType":"YulIdentifier","src":"2555:3:37"},"nativeSrc":"2555:24:37","nodeType":"YulFunctionCall","src":"2555:24:37"},{"name":"dataEnd","nativeSrc":"2581:7:37","nodeType":"YulIdentifier","src":"2581:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2517:37:37","nodeType":"YulIdentifier","src":"2517:37:37"},"nativeSrc":"2517:72:37","nodeType":"YulFunctionCall","src":"2517:72:37"},"variables":[{"name":"value2_1","nativeSrc":"2495:8:37","nodeType":"YulTypedName","src":"2495:8:37","type":""},{"name":"value3_1","nativeSrc":"2505:8:37","nodeType":"YulTypedName","src":"2505:8:37","type":""}]},{"nativeSrc":"2598:18:37","nodeType":"YulAssignment","src":"2598:18:37","value":{"name":"value2_1","nativeSrc":"2608:8:37","nodeType":"YulIdentifier","src":"2608:8:37"},"variableNames":[{"name":"value2","nativeSrc":"2598:6:37","nodeType":"YulIdentifier","src":"2598:6:37"}]},{"nativeSrc":"2625:18:37","nodeType":"YulAssignment","src":"2625:18:37","value":{"name":"value3_1","nativeSrc":"2635:8:37","nodeType":"YulIdentifier","src":"2635:8:37"},"variableNames":[{"name":"value3","nativeSrc":"2625:6:37","nodeType":"YulIdentifier","src":"2625:6:37"}]},{"nativeSrc":"2652:48:37","nodeType":"YulVariableDeclaration","src":"2652:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2685:9:37","nodeType":"YulIdentifier","src":"2685:9:37"},{"kind":"number","nativeSrc":"2696:2:37","nodeType":"YulLiteral","src":"2696:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2681:3:37","nodeType":"YulIdentifier","src":"2681:3:37"},"nativeSrc":"2681:18:37","nodeType":"YulFunctionCall","src":"2681:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"2668:12:37","nodeType":"YulIdentifier","src":"2668:12:37"},"nativeSrc":"2668:32:37","nodeType":"YulFunctionCall","src":"2668:32:37"},"variables":[{"name":"offset_2","nativeSrc":"2656:8:37","nodeType":"YulTypedName","src":"2656:8:37","type":""}]},{"body":{"nativeSrc":"2745:16:37","nodeType":"YulBlock","src":"2745:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2754:1:37","nodeType":"YulLiteral","src":"2754:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2757:1:37","nodeType":"YulLiteral","src":"2757:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2747:6:37","nodeType":"YulIdentifier","src":"2747:6:37"},"nativeSrc":"2747:12:37","nodeType":"YulFunctionCall","src":"2747:12:37"},"nativeSrc":"2747:12:37","nodeType":"YulExpressionStatement","src":"2747:12:37"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"2715:8:37","nodeType":"YulIdentifier","src":"2715:8:37"},{"kind":"number","nativeSrc":"2725:18:37","nodeType":"YulLiteral","src":"2725:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2712:2:37","nodeType":"YulIdentifier","src":"2712:2:37"},"nativeSrc":"2712:32:37","nodeType":"YulFunctionCall","src":"2712:32:37"},"nativeSrc":"2709:52:37","nodeType":"YulIf","src":"2709:52:37"},{"nativeSrc":"2770:98:37","nodeType":"YulVariableDeclaration","src":"2770:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2838:9:37","nodeType":"YulIdentifier","src":"2838:9:37"},{"name":"offset_2","nativeSrc":"2849:8:37","nodeType":"YulIdentifier","src":"2849:8:37"}],"functionName":{"name":"add","nativeSrc":"2834:3:37","nodeType":"YulIdentifier","src":"2834:3:37"},"nativeSrc":"2834:24:37","nodeType":"YulFunctionCall","src":"2834:24:37"},{"name":"dataEnd","nativeSrc":"2860:7:37","nodeType":"YulIdentifier","src":"2860:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2796:37:37","nodeType":"YulIdentifier","src":"2796:37:37"},"nativeSrc":"2796:72:37","nodeType":"YulFunctionCall","src":"2796:72:37"},"variables":[{"name":"value4_1","nativeSrc":"2774:8:37","nodeType":"YulTypedName","src":"2774:8:37","type":""},{"name":"value5_1","nativeSrc":"2784:8:37","nodeType":"YulTypedName","src":"2784:8:37","type":""}]},{"nativeSrc":"2877:18:37","nodeType":"YulAssignment","src":"2877:18:37","value":{"name":"value4_1","nativeSrc":"2887:8:37","nodeType":"YulIdentifier","src":"2887:8:37"},"variableNames":[{"name":"value4","nativeSrc":"2877:6:37","nodeType":"YulIdentifier","src":"2877:6:37"}]},{"nativeSrc":"2904:18:37","nodeType":"YulAssignment","src":"2904:18:37","value":{"name":"value5_1","nativeSrc":"2914:8:37","nodeType":"YulIdentifier","src":"2914:8:37"},"variableNames":[{"name":"value5","nativeSrc":"2904:6:37","nodeType":"YulIdentifier","src":"2904:6:37"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"1814:1114:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1964:9:37","nodeType":"YulTypedName","src":"1964:9:37","type":""},{"name":"dataEnd","nativeSrc":"1975:7:37","nodeType":"YulTypedName","src":"1975:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1987:6:37","nodeType":"YulTypedName","src":"1987:6:37","type":""},{"name":"value1","nativeSrc":"1995:6:37","nodeType":"YulTypedName","src":"1995:6:37","type":""},{"name":"value2","nativeSrc":"2003:6:37","nodeType":"YulTypedName","src":"2003:6:37","type":""},{"name":"value3","nativeSrc":"2011:6:37","nodeType":"YulTypedName","src":"2011:6:37","type":""},{"name":"value4","nativeSrc":"2019:6:37","nodeType":"YulTypedName","src":"2019:6:37","type":""},{"name":"value5","nativeSrc":"2027:6:37","nodeType":"YulTypedName","src":"2027:6:37","type":""}],"src":"1814:1114:37"},{"body":{"nativeSrc":"3158:890:37","nodeType":"YulBlock","src":"3158:890:37","statements":[{"body":{"nativeSrc":"3204:16:37","nodeType":"YulBlock","src":"3204:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3213:1:37","nodeType":"YulLiteral","src":"3213:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"3216:1:37","nodeType":"YulLiteral","src":"3216:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3206:6:37","nodeType":"YulIdentifier","src":"3206:6:37"},"nativeSrc":"3206:12:37","nodeType":"YulFunctionCall","src":"3206:12:37"},"nativeSrc":"3206:12:37","nodeType":"YulExpressionStatement","src":"3206:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3179:7:37","nodeType":"YulIdentifier","src":"3179:7:37"},{"name":"headStart","nativeSrc":"3188:9:37","nodeType":"YulIdentifier","src":"3188:9:37"}],"functionName":{"name":"sub","nativeSrc":"3175:3:37","nodeType":"YulIdentifier","src":"3175:3:37"},"nativeSrc":"3175:23:37","nodeType":"YulFunctionCall","src":"3175:23:37"},{"kind":"number","nativeSrc":"3200:2:37","nodeType":"YulLiteral","src":"3200:2:37","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3171:3:37","nodeType":"YulIdentifier","src":"3171:3:37"},"nativeSrc":"3171:32:37","nodeType":"YulFunctionCall","src":"3171:32:37"},"nativeSrc":"3168:52:37","nodeType":"YulIf","src":"3168:52:37"},{"nativeSrc":"3229:37:37","nodeType":"YulVariableDeclaration","src":"3229:37:37","value":{"arguments":[{"name":"headStart","nativeSrc":"3256:9:37","nodeType":"YulIdentifier","src":"3256:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"3243:12:37","nodeType":"YulIdentifier","src":"3243:12:37"},"nativeSrc":"3243:23:37","nodeType":"YulFunctionCall","src":"3243:23:37"},"variables":[{"name":"offset","nativeSrc":"3233:6:37","nodeType":"YulTypedName","src":"3233:6:37","type":""}]},{"body":{"nativeSrc":"3309:16:37","nodeType":"YulBlock","src":"3309:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3318:1:37","nodeType":"YulLiteral","src":"3318:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"3321:1:37","nodeType":"YulLiteral","src":"3321:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3311:6:37","nodeType":"YulIdentifier","src":"3311:6:37"},"nativeSrc":"3311:12:37","nodeType":"YulFunctionCall","src":"3311:12:37"},"nativeSrc":"3311:12:37","nodeType":"YulExpressionStatement","src":"3311:12:37"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3281:6:37","nodeType":"YulIdentifier","src":"3281:6:37"},{"kind":"number","nativeSrc":"3289:18:37","nodeType":"YulLiteral","src":"3289:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3278:2:37","nodeType":"YulIdentifier","src":"3278:2:37"},"nativeSrc":"3278:30:37","nodeType":"YulFunctionCall","src":"3278:30:37"},"nativeSrc":"3275:50:37","nodeType":"YulIf","src":"3275:50:37"},{"nativeSrc":"3334:96:37","nodeType":"YulVariableDeclaration","src":"3334:96:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3402:9:37","nodeType":"YulIdentifier","src":"3402:9:37"},{"name":"offset","nativeSrc":"3413:6:37","nodeType":"YulIdentifier","src":"3413:6:37"}],"functionName":{"name":"add","nativeSrc":"3398:3:37","nodeType":"YulIdentifier","src":"3398:3:37"},"nativeSrc":"3398:22:37","nodeType":"YulFunctionCall","src":"3398:22:37"},{"name":"dataEnd","nativeSrc":"3422:7:37","nodeType":"YulIdentifier","src":"3422:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3360:37:37","nodeType":"YulIdentifier","src":"3360:37:37"},"nativeSrc":"3360:70:37","nodeType":"YulFunctionCall","src":"3360:70:37"},"variables":[{"name":"value0_1","nativeSrc":"3338:8:37","nodeType":"YulTypedName","src":"3338:8:37","type":""},{"name":"value1_1","nativeSrc":"3348:8:37","nodeType":"YulTypedName","src":"3348:8:37","type":""}]},{"nativeSrc":"3439:18:37","nodeType":"YulAssignment","src":"3439:18:37","value":{"name":"value0_1","nativeSrc":"3449:8:37","nodeType":"YulIdentifier","src":"3449:8:37"},"variableNames":[{"name":"value0","nativeSrc":"3439:6:37","nodeType":"YulIdentifier","src":"3439:6:37"}]},{"nativeSrc":"3466:18:37","nodeType":"YulAssignment","src":"3466:18:37","value":{"name":"value1_1","nativeSrc":"3476:8:37","nodeType":"YulIdentifier","src":"3476:8:37"},"variableNames":[{"name":"value1","nativeSrc":"3466:6:37","nodeType":"YulIdentifier","src":"3466:6:37"}]},{"nativeSrc":"3493:48:37","nodeType":"YulVariableDeclaration","src":"3493:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3526:9:37","nodeType":"YulIdentifier","src":"3526:9:37"},{"kind":"number","nativeSrc":"3537:2:37","nodeType":"YulLiteral","src":"3537:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3522:3:37","nodeType":"YulIdentifier","src":"3522:3:37"},"nativeSrc":"3522:18:37","nodeType":"YulFunctionCall","src":"3522:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"3509:12:37","nodeType":"YulIdentifier","src":"3509:12:37"},"nativeSrc":"3509:32:37","nodeType":"YulFunctionCall","src":"3509:32:37"},"variables":[{"name":"offset_1","nativeSrc":"3497:8:37","nodeType":"YulTypedName","src":"3497:8:37","type":""}]},{"body":{"nativeSrc":"3586:16:37","nodeType":"YulBlock","src":"3586:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3595:1:37","nodeType":"YulLiteral","src":"3595:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"3598:1:37","nodeType":"YulLiteral","src":"3598:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3588:6:37","nodeType":"YulIdentifier","src":"3588:6:37"},"nativeSrc":"3588:12:37","nodeType":"YulFunctionCall","src":"3588:12:37"},"nativeSrc":"3588:12:37","nodeType":"YulExpressionStatement","src":"3588:12:37"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3556:8:37","nodeType":"YulIdentifier","src":"3556:8:37"},{"kind":"number","nativeSrc":"3566:18:37","nodeType":"YulLiteral","src":"3566:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3553:2:37","nodeType":"YulIdentifier","src":"3553:2:37"},"nativeSrc":"3553:32:37","nodeType":"YulFunctionCall","src":"3553:32:37"},"nativeSrc":"3550:52:37","nodeType":"YulIf","src":"3550:52:37"},{"nativeSrc":"3611:98:37","nodeType":"YulVariableDeclaration","src":"3611:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3679:9:37","nodeType":"YulIdentifier","src":"3679:9:37"},{"name":"offset_1","nativeSrc":"3690:8:37","nodeType":"YulIdentifier","src":"3690:8:37"}],"functionName":{"name":"add","nativeSrc":"3675:3:37","nodeType":"YulIdentifier","src":"3675:3:37"},"nativeSrc":"3675:24:37","nodeType":"YulFunctionCall","src":"3675:24:37"},{"name":"dataEnd","nativeSrc":"3701:7:37","nodeType":"YulIdentifier","src":"3701:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3637:37:37","nodeType":"YulIdentifier","src":"3637:37:37"},"nativeSrc":"3637:72:37","nodeType":"YulFunctionCall","src":"3637:72:37"},"variables":[{"name":"value2_1","nativeSrc":"3615:8:37","nodeType":"YulTypedName","src":"3615:8:37","type":""},{"name":"value3_1","nativeSrc":"3625:8:37","nodeType":"YulTypedName","src":"3625:8:37","type":""}]},{"nativeSrc":"3718:18:37","nodeType":"YulAssignment","src":"3718:18:37","value":{"name":"value2_1","nativeSrc":"3728:8:37","nodeType":"YulIdentifier","src":"3728:8:37"},"variableNames":[{"name":"value2","nativeSrc":"3718:6:37","nodeType":"YulIdentifier","src":"3718:6:37"}]},{"nativeSrc":"3745:18:37","nodeType":"YulAssignment","src":"3745:18:37","value":{"name":"value3_1","nativeSrc":"3755:8:37","nodeType":"YulIdentifier","src":"3755:8:37"},"variableNames":[{"name":"value3","nativeSrc":"3745:6:37","nodeType":"YulIdentifier","src":"3745:6:37"}]},{"nativeSrc":"3772:48:37","nodeType":"YulVariableDeclaration","src":"3772:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3805:9:37","nodeType":"YulIdentifier","src":"3805:9:37"},{"kind":"number","nativeSrc":"3816:2:37","nodeType":"YulLiteral","src":"3816:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3801:3:37","nodeType":"YulIdentifier","src":"3801:3:37"},"nativeSrc":"3801:18:37","nodeType":"YulFunctionCall","src":"3801:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"3788:12:37","nodeType":"YulIdentifier","src":"3788:12:37"},"nativeSrc":"3788:32:37","nodeType":"YulFunctionCall","src":"3788:32:37"},"variables":[{"name":"offset_2","nativeSrc":"3776:8:37","nodeType":"YulTypedName","src":"3776:8:37","type":""}]},{"body":{"nativeSrc":"3865:16:37","nodeType":"YulBlock","src":"3865:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3874:1:37","nodeType":"YulLiteral","src":"3874:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"3877:1:37","nodeType":"YulLiteral","src":"3877:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3867:6:37","nodeType":"YulIdentifier","src":"3867:6:37"},"nativeSrc":"3867:12:37","nodeType":"YulFunctionCall","src":"3867:12:37"},"nativeSrc":"3867:12:37","nodeType":"YulExpressionStatement","src":"3867:12:37"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"3835:8:37","nodeType":"YulIdentifier","src":"3835:8:37"},{"kind":"number","nativeSrc":"3845:18:37","nodeType":"YulLiteral","src":"3845:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3832:2:37","nodeType":"YulIdentifier","src":"3832:2:37"},"nativeSrc":"3832:32:37","nodeType":"YulFunctionCall","src":"3832:32:37"},"nativeSrc":"3829:52:37","nodeType":"YulIf","src":"3829:52:37"},{"nativeSrc":"3890:98:37","nodeType":"YulVariableDeclaration","src":"3890:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3958:9:37","nodeType":"YulIdentifier","src":"3958:9:37"},{"name":"offset_2","nativeSrc":"3969:8:37","nodeType":"YulIdentifier","src":"3969:8:37"}],"functionName":{"name":"add","nativeSrc":"3954:3:37","nodeType":"YulIdentifier","src":"3954:3:37"},"nativeSrc":"3954:24:37","nodeType":"YulFunctionCall","src":"3954:24:37"},{"name":"dataEnd","nativeSrc":"3980:7:37","nodeType":"YulIdentifier","src":"3980:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3916:37:37","nodeType":"YulIdentifier","src":"3916:37:37"},"nativeSrc":"3916:72:37","nodeType":"YulFunctionCall","src":"3916:72:37"},"variables":[{"name":"value4_1","nativeSrc":"3894:8:37","nodeType":"YulTypedName","src":"3894:8:37","type":""},{"name":"value5_1","nativeSrc":"3904:8:37","nodeType":"YulTypedName","src":"3904:8:37","type":""}]},{"nativeSrc":"3997:18:37","nodeType":"YulAssignment","src":"3997:18:37","value":{"name":"value4_1","nativeSrc":"4007:8:37","nodeType":"YulIdentifier","src":"4007:8:37"},"variableNames":[{"name":"value4","nativeSrc":"3997:6:37","nodeType":"YulIdentifier","src":"3997:6:37"}]},{"nativeSrc":"4024:18:37","nodeType":"YulAssignment","src":"4024:18:37","value":{"name":"value5_1","nativeSrc":"4034:8:37","nodeType":"YulIdentifier","src":"4034:8:37"},"variableNames":[{"name":"value5","nativeSrc":"4024:6:37","nodeType":"YulIdentifier","src":"4024:6:37"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"2933:1115:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3084:9:37","nodeType":"YulTypedName","src":"3084:9:37","type":""},{"name":"dataEnd","nativeSrc":"3095:7:37","nodeType":"YulTypedName","src":"3095:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3107:6:37","nodeType":"YulTypedName","src":"3107:6:37","type":""},{"name":"value1","nativeSrc":"3115:6:37","nodeType":"YulTypedName","src":"3115:6:37","type":""},{"name":"value2","nativeSrc":"3123:6:37","nodeType":"YulTypedName","src":"3123:6:37","type":""},{"name":"value3","nativeSrc":"3131:6:37","nodeType":"YulTypedName","src":"3131:6:37","type":""},{"name":"value4","nativeSrc":"3139:6:37","nodeType":"YulTypedName","src":"3139:6:37","type":""},{"name":"value5","nativeSrc":"3147:6:37","nodeType":"YulTypedName","src":"3147:6:37","type":""}],"src":"2933:1115:37"},{"body":{"nativeSrc":"4218:611:37","nodeType":"YulBlock","src":"4218:611:37","statements":[{"body":{"nativeSrc":"4264:16:37","nodeType":"YulBlock","src":"4264:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4273:1:37","nodeType":"YulLiteral","src":"4273:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4276:1:37","nodeType":"YulLiteral","src":"4276:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4266:6:37","nodeType":"YulIdentifier","src":"4266:6:37"},"nativeSrc":"4266:12:37","nodeType":"YulFunctionCall","src":"4266:12:37"},"nativeSrc":"4266:12:37","nodeType":"YulExpressionStatement","src":"4266:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4239:7:37","nodeType":"YulIdentifier","src":"4239:7:37"},{"name":"headStart","nativeSrc":"4248:9:37","nodeType":"YulIdentifier","src":"4248:9:37"}],"functionName":{"name":"sub","nativeSrc":"4235:3:37","nodeType":"YulIdentifier","src":"4235:3:37"},"nativeSrc":"4235:23:37","nodeType":"YulFunctionCall","src":"4235:23:37"},{"kind":"number","nativeSrc":"4260:2:37","nodeType":"YulLiteral","src":"4260:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4231:3:37","nodeType":"YulIdentifier","src":"4231:3:37"},"nativeSrc":"4231:32:37","nodeType":"YulFunctionCall","src":"4231:32:37"},"nativeSrc":"4228:52:37","nodeType":"YulIf","src":"4228:52:37"},{"nativeSrc":"4289:37:37","nodeType":"YulVariableDeclaration","src":"4289:37:37","value":{"arguments":[{"name":"headStart","nativeSrc":"4316:9:37","nodeType":"YulIdentifier","src":"4316:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"4303:12:37","nodeType":"YulIdentifier","src":"4303:12:37"},"nativeSrc":"4303:23:37","nodeType":"YulFunctionCall","src":"4303:23:37"},"variables":[{"name":"offset","nativeSrc":"4293:6:37","nodeType":"YulTypedName","src":"4293:6:37","type":""}]},{"body":{"nativeSrc":"4369:16:37","nodeType":"YulBlock","src":"4369:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4378:1:37","nodeType":"YulLiteral","src":"4378:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4381:1:37","nodeType":"YulLiteral","src":"4381:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4371:6:37","nodeType":"YulIdentifier","src":"4371:6:37"},"nativeSrc":"4371:12:37","nodeType":"YulFunctionCall","src":"4371:12:37"},"nativeSrc":"4371:12:37","nodeType":"YulExpressionStatement","src":"4371:12:37"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4341:6:37","nodeType":"YulIdentifier","src":"4341:6:37"},{"kind":"number","nativeSrc":"4349:18:37","nodeType":"YulLiteral","src":"4349:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4338:2:37","nodeType":"YulIdentifier","src":"4338:2:37"},"nativeSrc":"4338:30:37","nodeType":"YulFunctionCall","src":"4338:30:37"},"nativeSrc":"4335:50:37","nodeType":"YulIf","src":"4335:50:37"},{"nativeSrc":"4394:96:37","nodeType":"YulVariableDeclaration","src":"4394:96:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4462:9:37","nodeType":"YulIdentifier","src":"4462:9:37"},{"name":"offset","nativeSrc":"4473:6:37","nodeType":"YulIdentifier","src":"4473:6:37"}],"functionName":{"name":"add","nativeSrc":"4458:3:37","nodeType":"YulIdentifier","src":"4458:3:37"},"nativeSrc":"4458:22:37","nodeType":"YulFunctionCall","src":"4458:22:37"},{"name":"dataEnd","nativeSrc":"4482:7:37","nodeType":"YulIdentifier","src":"4482:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4420:37:37","nodeType":"YulIdentifier","src":"4420:37:37"},"nativeSrc":"4420:70:37","nodeType":"YulFunctionCall","src":"4420:70:37"},"variables":[{"name":"value0_1","nativeSrc":"4398:8:37","nodeType":"YulTypedName","src":"4398:8:37","type":""},{"name":"value1_1","nativeSrc":"4408:8:37","nodeType":"YulTypedName","src":"4408:8:37","type":""}]},{"nativeSrc":"4499:18:37","nodeType":"YulAssignment","src":"4499:18:37","value":{"name":"value0_1","nativeSrc":"4509:8:37","nodeType":"YulIdentifier","src":"4509:8:37"},"variableNames":[{"name":"value0","nativeSrc":"4499:6:37","nodeType":"YulIdentifier","src":"4499:6:37"}]},{"nativeSrc":"4526:18:37","nodeType":"YulAssignment","src":"4526:18:37","value":{"name":"value1_1","nativeSrc":"4536:8:37","nodeType":"YulIdentifier","src":"4536:8:37"},"variableNames":[{"name":"value1","nativeSrc":"4526:6:37","nodeType":"YulIdentifier","src":"4526:6:37"}]},{"nativeSrc":"4553:48:37","nodeType":"YulVariableDeclaration","src":"4553:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4586:9:37","nodeType":"YulIdentifier","src":"4586:9:37"},{"kind":"number","nativeSrc":"4597:2:37","nodeType":"YulLiteral","src":"4597:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4582:3:37","nodeType":"YulIdentifier","src":"4582:3:37"},"nativeSrc":"4582:18:37","nodeType":"YulFunctionCall","src":"4582:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"4569:12:37","nodeType":"YulIdentifier","src":"4569:12:37"},"nativeSrc":"4569:32:37","nodeType":"YulFunctionCall","src":"4569:32:37"},"variables":[{"name":"offset_1","nativeSrc":"4557:8:37","nodeType":"YulTypedName","src":"4557:8:37","type":""}]},{"body":{"nativeSrc":"4646:16:37","nodeType":"YulBlock","src":"4646:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4655:1:37","nodeType":"YulLiteral","src":"4655:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4658:1:37","nodeType":"YulLiteral","src":"4658:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4648:6:37","nodeType":"YulIdentifier","src":"4648:6:37"},"nativeSrc":"4648:12:37","nodeType":"YulFunctionCall","src":"4648:12:37"},"nativeSrc":"4648:12:37","nodeType":"YulExpressionStatement","src":"4648:12:37"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4616:8:37","nodeType":"YulIdentifier","src":"4616:8:37"},{"kind":"number","nativeSrc":"4626:18:37","nodeType":"YulLiteral","src":"4626:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4613:2:37","nodeType":"YulIdentifier","src":"4613:2:37"},"nativeSrc":"4613:32:37","nodeType":"YulFunctionCall","src":"4613:32:37"},"nativeSrc":"4610:52:37","nodeType":"YulIf","src":"4610:52:37"},{"nativeSrc":"4671:98:37","nodeType":"YulVariableDeclaration","src":"4671:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4739:9:37","nodeType":"YulIdentifier","src":"4739:9:37"},{"name":"offset_1","nativeSrc":"4750:8:37","nodeType":"YulIdentifier","src":"4750:8:37"}],"functionName":{"name":"add","nativeSrc":"4735:3:37","nodeType":"YulIdentifier","src":"4735:3:37"},"nativeSrc":"4735:24:37","nodeType":"YulFunctionCall","src":"4735:24:37"},{"name":"dataEnd","nativeSrc":"4761:7:37","nodeType":"YulIdentifier","src":"4761:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4697:37:37","nodeType":"YulIdentifier","src":"4697:37:37"},"nativeSrc":"4697:72:37","nodeType":"YulFunctionCall","src":"4697:72:37"},"variables":[{"name":"value2_1","nativeSrc":"4675:8:37","nodeType":"YulTypedName","src":"4675:8:37","type":""},{"name":"value3_1","nativeSrc":"4685:8:37","nodeType":"YulTypedName","src":"4685:8:37","type":""}]},{"nativeSrc":"4778:18:37","nodeType":"YulAssignment","src":"4778:18:37","value":{"name":"value2_1","nativeSrc":"4788:8:37","nodeType":"YulIdentifier","src":"4788:8:37"},"variableNames":[{"name":"value2","nativeSrc":"4778:6:37","nodeType":"YulIdentifier","src":"4778:6:37"}]},{"nativeSrc":"4805:18:37","nodeType":"YulAssignment","src":"4805:18:37","value":{"name":"value3_1","nativeSrc":"4815:8:37","nodeType":"YulIdentifier","src":"4815:8:37"},"variableNames":[{"name":"value3","nativeSrc":"4805:6:37","nodeType":"YulIdentifier","src":"4805:6:37"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4053:776:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4160:9:37","nodeType":"YulTypedName","src":"4160:9:37","type":""},{"name":"dataEnd","nativeSrc":"4171:7:37","nodeType":"YulTypedName","src":"4171:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4183:6:37","nodeType":"YulTypedName","src":"4183:6:37","type":""},{"name":"value1","nativeSrc":"4191:6:37","nodeType":"YulTypedName","src":"4191:6:37","type":""},{"name":"value2","nativeSrc":"4199:6:37","nodeType":"YulTypedName","src":"4199:6:37","type":""},{"name":"value3","nativeSrc":"4207:6:37","nodeType":"YulTypedName","src":"4207:6:37","type":""}],"src":"4053:776:37"},{"body":{"nativeSrc":"4883:233:37","nodeType":"YulBlock","src":"4883:233:37","statements":[{"nativeSrc":"4893:17:37","nodeType":"YulAssignment","src":"4893:17:37","value":{"arguments":[{"name":"x","nativeSrc":"4905:1:37","nodeType":"YulIdentifier","src":"4905:1:37"},{"name":"y","nativeSrc":"4908:1:37","nodeType":"YulIdentifier","src":"4908:1:37"}],"functionName":{"name":"sub","nativeSrc":"4901:3:37","nodeType":"YulIdentifier","src":"4901:3:37"},"nativeSrc":"4901:9:37","nodeType":"YulFunctionCall","src":"4901:9:37"},"variableNames":[{"name":"diff","nativeSrc":"4893:4:37","nodeType":"YulIdentifier","src":"4893:4:37"}]},{"body":{"nativeSrc":"4942:168:37","nodeType":"YulBlock","src":"4942:168:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4963:1:37","nodeType":"YulLiteral","src":"4963:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4966:77:37","nodeType":"YulLiteral","src":"4966:77:37","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4956:6:37","nodeType":"YulIdentifier","src":"4956:6:37"},"nativeSrc":"4956:88:37","nodeType":"YulFunctionCall","src":"4956:88:37"},"nativeSrc":"4956:88:37","nodeType":"YulExpressionStatement","src":"4956:88:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5064:1:37","nodeType":"YulLiteral","src":"5064:1:37","type":"","value":"4"},{"kind":"number","nativeSrc":"5067:4:37","nodeType":"YulLiteral","src":"5067:4:37","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5057:6:37","nodeType":"YulIdentifier","src":"5057:6:37"},"nativeSrc":"5057:15:37","nodeType":"YulFunctionCall","src":"5057:15:37"},"nativeSrc":"5057:15:37","nodeType":"YulExpressionStatement","src":"5057:15:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5092:1:37","nodeType":"YulLiteral","src":"5092:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5095:4:37","nodeType":"YulLiteral","src":"5095:4:37","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5085:6:37","nodeType":"YulIdentifier","src":"5085:6:37"},"nativeSrc":"5085:15:37","nodeType":"YulFunctionCall","src":"5085:15:37"},"nativeSrc":"5085:15:37","nodeType":"YulExpressionStatement","src":"5085:15:37"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"4925:4:37","nodeType":"YulIdentifier","src":"4925:4:37"},{"name":"x","nativeSrc":"4931:1:37","nodeType":"YulIdentifier","src":"4931:1:37"}],"functionName":{"name":"gt","nativeSrc":"4922:2:37","nodeType":"YulIdentifier","src":"4922:2:37"},"nativeSrc":"4922:11:37","nodeType":"YulFunctionCall","src":"4922:11:37"},"nativeSrc":"4919:191:37","nodeType":"YulIf","src":"4919:191:37"}]},"name":"checked_sub_t_uint256","nativeSrc":"4834:282:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"4865:1:37","nodeType":"YulTypedName","src":"4865:1:37","type":""},{"name":"y","nativeSrc":"4868:1:37","nodeType":"YulTypedName","src":"4868:1:37","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"4874:4:37","nodeType":"YulTypedName","src":"4874:4:37","type":""}],"src":"4834:282:37"},{"body":{"nativeSrc":"5153:152:37","nodeType":"YulBlock","src":"5153:152:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5170:1:37","nodeType":"YulLiteral","src":"5170:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5173:77:37","nodeType":"YulLiteral","src":"5173:77:37","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5163:6:37","nodeType":"YulIdentifier","src":"5163:6:37"},"nativeSrc":"5163:88:37","nodeType":"YulFunctionCall","src":"5163:88:37"},"nativeSrc":"5163:88:37","nodeType":"YulExpressionStatement","src":"5163:88:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5267:1:37","nodeType":"YulLiteral","src":"5267:1:37","type":"","value":"4"},{"kind":"number","nativeSrc":"5270:4:37","nodeType":"YulLiteral","src":"5270:4:37","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5260:6:37","nodeType":"YulIdentifier","src":"5260:6:37"},"nativeSrc":"5260:15:37","nodeType":"YulFunctionCall","src":"5260:15:37"},"nativeSrc":"5260:15:37","nodeType":"YulExpressionStatement","src":"5260:15:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5291:1:37","nodeType":"YulLiteral","src":"5291:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5294:4:37","nodeType":"YulLiteral","src":"5294:4:37","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5284:6:37","nodeType":"YulIdentifier","src":"5284:6:37"},"nativeSrc":"5284:15:37","nodeType":"YulFunctionCall","src":"5284:15:37"},"nativeSrc":"5284:15:37","nodeType":"YulExpressionStatement","src":"5284:15:37"}]},"name":"panic_error_0x32","nativeSrc":"5121:184:37","nodeType":"YulFunctionDefinition","src":"5121:184:37"},{"body":{"nativeSrc":"5395:177:37","nodeType":"YulBlock","src":"5395:177:37","statements":[{"body":{"nativeSrc":"5441:16:37","nodeType":"YulBlock","src":"5441:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5450:1:37","nodeType":"YulLiteral","src":"5450:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5453:1:37","nodeType":"YulLiteral","src":"5453:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5443:6:37","nodeType":"YulIdentifier","src":"5443:6:37"},"nativeSrc":"5443:12:37","nodeType":"YulFunctionCall","src":"5443:12:37"},"nativeSrc":"5443:12:37","nodeType":"YulExpressionStatement","src":"5443:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5416:7:37","nodeType":"YulIdentifier","src":"5416:7:37"},{"name":"headStart","nativeSrc":"5425:9:37","nodeType":"YulIdentifier","src":"5425:9:37"}],"functionName":{"name":"sub","nativeSrc":"5412:3:37","nodeType":"YulIdentifier","src":"5412:3:37"},"nativeSrc":"5412:23:37","nodeType":"YulFunctionCall","src":"5412:23:37"},{"kind":"number","nativeSrc":"5437:2:37","nodeType":"YulLiteral","src":"5437:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5408:3:37","nodeType":"YulIdentifier","src":"5408:3:37"},"nativeSrc":"5408:32:37","nodeType":"YulFunctionCall","src":"5408:32:37"},"nativeSrc":"5405:52:37","nodeType":"YulIf","src":"5405:52:37"},{"nativeSrc":"5466:36:37","nodeType":"YulVariableDeclaration","src":"5466:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"5492:9:37","nodeType":"YulIdentifier","src":"5492:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"5479:12:37","nodeType":"YulIdentifier","src":"5479:12:37"},"nativeSrc":"5479:23:37","nodeType":"YulFunctionCall","src":"5479:23:37"},"variables":[{"name":"value","nativeSrc":"5470:5:37","nodeType":"YulTypedName","src":"5470:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5536:5:37","nodeType":"YulIdentifier","src":"5536:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5511:24:37","nodeType":"YulIdentifier","src":"5511:24:37"},"nativeSrc":"5511:31:37","nodeType":"YulFunctionCall","src":"5511:31:37"},"nativeSrc":"5511:31:37","nodeType":"YulExpressionStatement","src":"5511:31:37"},{"nativeSrc":"5551:15:37","nodeType":"YulAssignment","src":"5551:15:37","value":{"name":"value","nativeSrc":"5561:5:37","nodeType":"YulIdentifier","src":"5561:5:37"},"variableNames":[{"name":"value0","nativeSrc":"5551:6:37","nodeType":"YulIdentifier","src":"5551:6:37"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1506","nativeSrc":"5310:262:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5361:9:37","nodeType":"YulTypedName","src":"5361:9:37","type":""},{"name":"dataEnd","nativeSrc":"5372:7:37","nodeType":"YulTypedName","src":"5372:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5384:6:37","nodeType":"YulTypedName","src":"5384:6:37","type":""}],"src":"5310:262:37"},{"body":{"nativeSrc":"5663:177:37","nodeType":"YulBlock","src":"5663:177:37","statements":[{"body":{"nativeSrc":"5709:16:37","nodeType":"YulBlock","src":"5709:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5718:1:37","nodeType":"YulLiteral","src":"5718:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5721:1:37","nodeType":"YulLiteral","src":"5721:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5711:6:37","nodeType":"YulIdentifier","src":"5711:6:37"},"nativeSrc":"5711:12:37","nodeType":"YulFunctionCall","src":"5711:12:37"},"nativeSrc":"5711:12:37","nodeType":"YulExpressionStatement","src":"5711:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5684:7:37","nodeType":"YulIdentifier","src":"5684:7:37"},{"name":"headStart","nativeSrc":"5693:9:37","nodeType":"YulIdentifier","src":"5693:9:37"}],"functionName":{"name":"sub","nativeSrc":"5680:3:37","nodeType":"YulIdentifier","src":"5680:3:37"},"nativeSrc":"5680:23:37","nodeType":"YulFunctionCall","src":"5680:23:37"},{"kind":"number","nativeSrc":"5705:2:37","nodeType":"YulLiteral","src":"5705:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5676:3:37","nodeType":"YulIdentifier","src":"5676:3:37"},"nativeSrc":"5676:32:37","nodeType":"YulFunctionCall","src":"5676:32:37"},"nativeSrc":"5673:52:37","nodeType":"YulIf","src":"5673:52:37"},{"nativeSrc":"5734:36:37","nodeType":"YulVariableDeclaration","src":"5734:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"5760:9:37","nodeType":"YulIdentifier","src":"5760:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"5747:12:37","nodeType":"YulIdentifier","src":"5747:12:37"},"nativeSrc":"5747:23:37","nodeType":"YulFunctionCall","src":"5747:23:37"},"variables":[{"name":"value","nativeSrc":"5738:5:37","nodeType":"YulTypedName","src":"5738:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5804:5:37","nodeType":"YulIdentifier","src":"5804:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5779:24:37","nodeType":"YulIdentifier","src":"5779:24:37"},"nativeSrc":"5779:31:37","nodeType":"YulFunctionCall","src":"5779:31:37"},"nativeSrc":"5779:31:37","nodeType":"YulExpressionStatement","src":"5779:31:37"},{"nativeSrc":"5819:15:37","nodeType":"YulAssignment","src":"5819:15:37","value":{"name":"value","nativeSrc":"5829:5:37","nodeType":"YulIdentifier","src":"5829:5:37"},"variableNames":[{"name":"value0","nativeSrc":"5819:6:37","nodeType":"YulIdentifier","src":"5819:6:37"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1318","nativeSrc":"5577:263:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5629:9:37","nodeType":"YulTypedName","src":"5629:9:37","type":""},{"name":"dataEnd","nativeSrc":"5640:7:37","nodeType":"YulTypedName","src":"5640:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5652:6:37","nodeType":"YulTypedName","src":"5652:6:37","type":""}],"src":"5577:263:37"},{"body":{"nativeSrc":"5944:149:37","nodeType":"YulBlock","src":"5944:149:37","statements":[{"nativeSrc":"5954:26:37","nodeType":"YulAssignment","src":"5954:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"5966:9:37","nodeType":"YulIdentifier","src":"5966:9:37"},{"kind":"number","nativeSrc":"5977:2:37","nodeType":"YulLiteral","src":"5977:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5962:3:37","nodeType":"YulIdentifier","src":"5962:3:37"},"nativeSrc":"5962:18:37","nodeType":"YulFunctionCall","src":"5962:18:37"},"variableNames":[{"name":"tail","nativeSrc":"5954:4:37","nodeType":"YulIdentifier","src":"5954:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5996:9:37","nodeType":"YulIdentifier","src":"5996:9:37"},{"arguments":[{"name":"value0","nativeSrc":"6011:6:37","nodeType":"YulIdentifier","src":"6011:6:37"},{"kind":"number","nativeSrc":"6019:66:37","nodeType":"YulLiteral","src":"6019:66:37","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"6007:3:37","nodeType":"YulIdentifier","src":"6007:3:37"},"nativeSrc":"6007:79:37","nodeType":"YulFunctionCall","src":"6007:79:37"}],"functionName":{"name":"mstore","nativeSrc":"5989:6:37","nodeType":"YulIdentifier","src":"5989:6:37"},"nativeSrc":"5989:98:37","nodeType":"YulFunctionCall","src":"5989:98:37"},"nativeSrc":"5989:98:37","nodeType":"YulExpressionStatement","src":"5989:98:37"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"5845:248:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5913:9:37","nodeType":"YulTypedName","src":"5913:9:37","type":""},{"name":"value0","nativeSrc":"5924:6:37","nodeType":"YulTypedName","src":"5924:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5935:4:37","nodeType":"YulTypedName","src":"5935:4:37","type":""}],"src":"5845:248:37"},{"body":{"nativeSrc":"6176:199:37","nodeType":"YulBlock","src":"6176:199:37","statements":[{"body":{"nativeSrc":"6222:16:37","nodeType":"YulBlock","src":"6222:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6231:1:37","nodeType":"YulLiteral","src":"6231:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"6234:1:37","nodeType":"YulLiteral","src":"6234:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6224:6:37","nodeType":"YulIdentifier","src":"6224:6:37"},"nativeSrc":"6224:12:37","nodeType":"YulFunctionCall","src":"6224:12:37"},"nativeSrc":"6224:12:37","nodeType":"YulExpressionStatement","src":"6224:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6197:7:37","nodeType":"YulIdentifier","src":"6197:7:37"},{"name":"headStart","nativeSrc":"6206:9:37","nodeType":"YulIdentifier","src":"6206:9:37"}],"functionName":{"name":"sub","nativeSrc":"6193:3:37","nodeType":"YulIdentifier","src":"6193:3:37"},"nativeSrc":"6193:23:37","nodeType":"YulFunctionCall","src":"6193:23:37"},{"kind":"number","nativeSrc":"6218:2:37","nodeType":"YulLiteral","src":"6218:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6189:3:37","nodeType":"YulIdentifier","src":"6189:3:37"},"nativeSrc":"6189:32:37","nodeType":"YulFunctionCall","src":"6189:32:37"},"nativeSrc":"6186:52:37","nodeType":"YulIf","src":"6186:52:37"},{"nativeSrc":"6247:29:37","nodeType":"YulVariableDeclaration","src":"6247:29:37","value":{"arguments":[{"name":"headStart","nativeSrc":"6266:9:37","nodeType":"YulIdentifier","src":"6266:9:37"}],"functionName":{"name":"mload","nativeSrc":"6260:5:37","nodeType":"YulIdentifier","src":"6260:5:37"},"nativeSrc":"6260:16:37","nodeType":"YulFunctionCall","src":"6260:16:37"},"variables":[{"name":"value","nativeSrc":"6251:5:37","nodeType":"YulTypedName","src":"6251:5:37","type":""}]},{"body":{"nativeSrc":"6329:16:37","nodeType":"YulBlock","src":"6329:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6338:1:37","nodeType":"YulLiteral","src":"6338:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"6341:1:37","nodeType":"YulLiteral","src":"6341:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6331:6:37","nodeType":"YulIdentifier","src":"6331:6:37"},"nativeSrc":"6331:12:37","nodeType":"YulFunctionCall","src":"6331:12:37"},"nativeSrc":"6331:12:37","nodeType":"YulExpressionStatement","src":"6331:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6298:5:37","nodeType":"YulIdentifier","src":"6298:5:37"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6319:5:37","nodeType":"YulIdentifier","src":"6319:5:37"}],"functionName":{"name":"iszero","nativeSrc":"6312:6:37","nodeType":"YulIdentifier","src":"6312:6:37"},"nativeSrc":"6312:13:37","nodeType":"YulFunctionCall","src":"6312:13:37"}],"functionName":{"name":"iszero","nativeSrc":"6305:6:37","nodeType":"YulIdentifier","src":"6305:6:37"},"nativeSrc":"6305:21:37","nodeType":"YulFunctionCall","src":"6305:21:37"}],"functionName":{"name":"eq","nativeSrc":"6295:2:37","nodeType":"YulIdentifier","src":"6295:2:37"},"nativeSrc":"6295:32:37","nodeType":"YulFunctionCall","src":"6295:32:37"}],"functionName":{"name":"iszero","nativeSrc":"6288:6:37","nodeType":"YulIdentifier","src":"6288:6:37"},"nativeSrc":"6288:40:37","nodeType":"YulFunctionCall","src":"6288:40:37"},"nativeSrc":"6285:60:37","nodeType":"YulIf","src":"6285:60:37"},{"nativeSrc":"6354:15:37","nodeType":"YulAssignment","src":"6354:15:37","value":{"name":"value","nativeSrc":"6364:5:37","nodeType":"YulIdentifier","src":"6364:5:37"},"variableNames":[{"name":"value0","nativeSrc":"6354:6:37","nodeType":"YulIdentifier","src":"6354:6:37"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6098:277:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6142:9:37","nodeType":"YulTypedName","src":"6142:9:37","type":""},{"name":"dataEnd","nativeSrc":"6153:7:37","nodeType":"YulTypedName","src":"6153:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6165:6:37","nodeType":"YulTypedName","src":"6165:6:37","type":""}],"src":"6098:277:37"},{"body":{"nativeSrc":"6537:260:37","nodeType":"YulBlock","src":"6537:260:37","statements":[{"nativeSrc":"6547:26:37","nodeType":"YulAssignment","src":"6547:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"6559:9:37","nodeType":"YulIdentifier","src":"6559:9:37"},{"kind":"number","nativeSrc":"6570:2:37","nodeType":"YulLiteral","src":"6570:2:37","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6555:3:37","nodeType":"YulIdentifier","src":"6555:3:37"},"nativeSrc":"6555:18:37","nodeType":"YulFunctionCall","src":"6555:18:37"},"variableNames":[{"name":"tail","nativeSrc":"6547:4:37","nodeType":"YulIdentifier","src":"6547:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6589:9:37","nodeType":"YulIdentifier","src":"6589:9:37"},{"arguments":[{"name":"value0","nativeSrc":"6604:6:37","nodeType":"YulIdentifier","src":"6604:6:37"},{"kind":"number","nativeSrc":"6612:42:37","nodeType":"YulLiteral","src":"6612:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6600:3:37","nodeType":"YulIdentifier","src":"6600:3:37"},"nativeSrc":"6600:55:37","nodeType":"YulFunctionCall","src":"6600:55:37"}],"functionName":{"name":"mstore","nativeSrc":"6582:6:37","nodeType":"YulIdentifier","src":"6582:6:37"},"nativeSrc":"6582:74:37","nodeType":"YulFunctionCall","src":"6582:74:37"},"nativeSrc":"6582:74:37","nodeType":"YulExpressionStatement","src":"6582:74:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6676:9:37","nodeType":"YulIdentifier","src":"6676:9:37"},{"kind":"number","nativeSrc":"6687:2:37","nodeType":"YulLiteral","src":"6687:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6672:3:37","nodeType":"YulIdentifier","src":"6672:3:37"},"nativeSrc":"6672:18:37","nodeType":"YulFunctionCall","src":"6672:18:37"},{"arguments":[{"name":"value1","nativeSrc":"6696:6:37","nodeType":"YulIdentifier","src":"6696:6:37"},{"kind":"number","nativeSrc":"6704:42:37","nodeType":"YulLiteral","src":"6704:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6692:3:37","nodeType":"YulIdentifier","src":"6692:3:37"},"nativeSrc":"6692:55:37","nodeType":"YulFunctionCall","src":"6692:55:37"}],"functionName":{"name":"mstore","nativeSrc":"6665:6:37","nodeType":"YulIdentifier","src":"6665:6:37"},"nativeSrc":"6665:83:37","nodeType":"YulFunctionCall","src":"6665:83:37"},"nativeSrc":"6665:83:37","nodeType":"YulExpressionStatement","src":"6665:83:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6768:9:37","nodeType":"YulIdentifier","src":"6768:9:37"},{"kind":"number","nativeSrc":"6779:2:37","nodeType":"YulLiteral","src":"6779:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6764:3:37","nodeType":"YulIdentifier","src":"6764:3:37"},"nativeSrc":"6764:18:37","nodeType":"YulFunctionCall","src":"6764:18:37"},{"name":"value2","nativeSrc":"6784:6:37","nodeType":"YulIdentifier","src":"6784:6:37"}],"functionName":{"name":"mstore","nativeSrc":"6757:6:37","nodeType":"YulIdentifier","src":"6757:6:37"},"nativeSrc":"6757:34:37","nodeType":"YulFunctionCall","src":"6757:34:37"},"nativeSrc":"6757:34:37","nodeType":"YulExpressionStatement","src":"6757:34:37"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"6380:417:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6490:9:37","nodeType":"YulTypedName","src":"6490:9:37","type":""},{"name":"value2","nativeSrc":"6501:6:37","nodeType":"YulTypedName","src":"6501:6:37","type":""},{"name":"value1","nativeSrc":"6509:6:37","nodeType":"YulTypedName","src":"6509:6:37","type":""},{"name":"value0","nativeSrc":"6517:6:37","nodeType":"YulTypedName","src":"6517:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6528:4:37","nodeType":"YulTypedName","src":"6528:4:37","type":""}],"src":"6380:417:37"},{"body":{"nativeSrc":"6880:177:37","nodeType":"YulBlock","src":"6880:177:37","statements":[{"body":{"nativeSrc":"6926:16:37","nodeType":"YulBlock","src":"6926:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6935:1:37","nodeType":"YulLiteral","src":"6935:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"6938:1:37","nodeType":"YulLiteral","src":"6938:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6928:6:37","nodeType":"YulIdentifier","src":"6928:6:37"},"nativeSrc":"6928:12:37","nodeType":"YulFunctionCall","src":"6928:12:37"},"nativeSrc":"6928:12:37","nodeType":"YulExpressionStatement","src":"6928:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6901:7:37","nodeType":"YulIdentifier","src":"6901:7:37"},{"name":"headStart","nativeSrc":"6910:9:37","nodeType":"YulIdentifier","src":"6910:9:37"}],"functionName":{"name":"sub","nativeSrc":"6897:3:37","nodeType":"YulIdentifier","src":"6897:3:37"},"nativeSrc":"6897:23:37","nodeType":"YulFunctionCall","src":"6897:23:37"},{"kind":"number","nativeSrc":"6922:2:37","nodeType":"YulLiteral","src":"6922:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6893:3:37","nodeType":"YulIdentifier","src":"6893:3:37"},"nativeSrc":"6893:32:37","nodeType":"YulFunctionCall","src":"6893:32:37"},"nativeSrc":"6890:52:37","nodeType":"YulIf","src":"6890:52:37"},{"nativeSrc":"6951:36:37","nodeType":"YulVariableDeclaration","src":"6951:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"6977:9:37","nodeType":"YulIdentifier","src":"6977:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"6964:12:37","nodeType":"YulIdentifier","src":"6964:12:37"},"nativeSrc":"6964:23:37","nodeType":"YulFunctionCall","src":"6964:23:37"},"variables":[{"name":"value","nativeSrc":"6955:5:37","nodeType":"YulTypedName","src":"6955:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7021:5:37","nodeType":"YulIdentifier","src":"7021:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6996:24:37","nodeType":"YulIdentifier","src":"6996:24:37"},"nativeSrc":"6996:31:37","nodeType":"YulFunctionCall","src":"6996:31:37"},"nativeSrc":"6996:31:37","nodeType":"YulExpressionStatement","src":"6996:31:37"},{"nativeSrc":"7036:15:37","nodeType":"YulAssignment","src":"7036:15:37","value":{"name":"value","nativeSrc":"7046:5:37","nodeType":"YulIdentifier","src":"7046:5:37"},"variableNames":[{"name":"value0","nativeSrc":"7036:6:37","nodeType":"YulIdentifier","src":"7036:6:37"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"6802:255:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6846:9:37","nodeType":"YulTypedName","src":"6846:9:37","type":""},{"name":"dataEnd","nativeSrc":"6857:7:37","nodeType":"YulTypedName","src":"6857:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6869:6:37","nodeType":"YulTypedName","src":"6869:6:37","type":""}],"src":"6802:255:37"},{"body":{"nativeSrc":"7219:309:37","nodeType":"YulBlock","src":"7219:309:37","statements":[{"nativeSrc":"7229:26:37","nodeType":"YulAssignment","src":"7229:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"7241:9:37","nodeType":"YulIdentifier","src":"7241:9:37"},{"kind":"number","nativeSrc":"7252:2:37","nodeType":"YulLiteral","src":"7252:2:37","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7237:3:37","nodeType":"YulIdentifier","src":"7237:3:37"},"nativeSrc":"7237:18:37","nodeType":"YulFunctionCall","src":"7237:18:37"},"variableNames":[{"name":"tail","nativeSrc":"7229:4:37","nodeType":"YulIdentifier","src":"7229:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7271:9:37","nodeType":"YulIdentifier","src":"7271:9:37"},{"arguments":[{"name":"value0","nativeSrc":"7286:6:37","nodeType":"YulIdentifier","src":"7286:6:37"},{"kind":"number","nativeSrc":"7294:42:37","nodeType":"YulLiteral","src":"7294:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7282:3:37","nodeType":"YulIdentifier","src":"7282:3:37"},"nativeSrc":"7282:55:37","nodeType":"YulFunctionCall","src":"7282:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7264:6:37","nodeType":"YulIdentifier","src":"7264:6:37"},"nativeSrc":"7264:74:37","nodeType":"YulFunctionCall","src":"7264:74:37"},"nativeSrc":"7264:74:37","nodeType":"YulExpressionStatement","src":"7264:74:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7358:9:37","nodeType":"YulIdentifier","src":"7358:9:37"},{"kind":"number","nativeSrc":"7369:2:37","nodeType":"YulLiteral","src":"7369:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7354:3:37","nodeType":"YulIdentifier","src":"7354:3:37"},"nativeSrc":"7354:18:37","nodeType":"YulFunctionCall","src":"7354:18:37"},{"arguments":[{"name":"value1","nativeSrc":"7378:6:37","nodeType":"YulIdentifier","src":"7378:6:37"},{"kind":"number","nativeSrc":"7386:42:37","nodeType":"YulLiteral","src":"7386:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7374:3:37","nodeType":"YulIdentifier","src":"7374:3:37"},"nativeSrc":"7374:55:37","nodeType":"YulFunctionCall","src":"7374:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7347:6:37","nodeType":"YulIdentifier","src":"7347:6:37"},"nativeSrc":"7347:83:37","nodeType":"YulFunctionCall","src":"7347:83:37"},"nativeSrc":"7347:83:37","nodeType":"YulExpressionStatement","src":"7347:83:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7450:9:37","nodeType":"YulIdentifier","src":"7450:9:37"},{"kind":"number","nativeSrc":"7461:2:37","nodeType":"YulLiteral","src":"7461:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7446:3:37","nodeType":"YulIdentifier","src":"7446:3:37"},"nativeSrc":"7446:18:37","nodeType":"YulFunctionCall","src":"7446:18:37"},{"arguments":[{"name":"value2","nativeSrc":"7470:6:37","nodeType":"YulIdentifier","src":"7470:6:37"},{"kind":"number","nativeSrc":"7478:42:37","nodeType":"YulLiteral","src":"7478:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7466:3:37","nodeType":"YulIdentifier","src":"7466:3:37"},"nativeSrc":"7466:55:37","nodeType":"YulFunctionCall","src":"7466:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7439:6:37","nodeType":"YulIdentifier","src":"7439:6:37"},"nativeSrc":"7439:83:37","nodeType":"YulFunctionCall","src":"7439:83:37"},"nativeSrc":"7439:83:37","nodeType":"YulExpressionStatement","src":"7439:83:37"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"7062:466:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7172:9:37","nodeType":"YulTypedName","src":"7172:9:37","type":""},{"name":"value2","nativeSrc":"7183:6:37","nodeType":"YulTypedName","src":"7183:6:37","type":""},{"name":"value1","nativeSrc":"7191:6:37","nodeType":"YulTypedName","src":"7191:6:37","type":""},{"name":"value0","nativeSrc":"7199:6:37","nodeType":"YulTypedName","src":"7199:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7210:4:37","nodeType":"YulTypedName","src":"7210:4:37","type":""}],"src":"7062:466:37"},{"body":{"nativeSrc":"7662:168:37","nodeType":"YulBlock","src":"7662:168:37","statements":[{"nativeSrc":"7672:26:37","nodeType":"YulAssignment","src":"7672:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"7684:9:37","nodeType":"YulIdentifier","src":"7684:9:37"},{"kind":"number","nativeSrc":"7695:2:37","nodeType":"YulLiteral","src":"7695:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7680:3:37","nodeType":"YulIdentifier","src":"7680:3:37"},"nativeSrc":"7680:18:37","nodeType":"YulFunctionCall","src":"7680:18:37"},"variableNames":[{"name":"tail","nativeSrc":"7672:4:37","nodeType":"YulIdentifier","src":"7672:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7714:9:37","nodeType":"YulIdentifier","src":"7714:9:37"},{"arguments":[{"name":"value0","nativeSrc":"7729:6:37","nodeType":"YulIdentifier","src":"7729:6:37"},{"kind":"number","nativeSrc":"7737:42:37","nodeType":"YulLiteral","src":"7737:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7725:3:37","nodeType":"YulIdentifier","src":"7725:3:37"},"nativeSrc":"7725:55:37","nodeType":"YulFunctionCall","src":"7725:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7707:6:37","nodeType":"YulIdentifier","src":"7707:6:37"},"nativeSrc":"7707:74:37","nodeType":"YulFunctionCall","src":"7707:74:37"},"nativeSrc":"7707:74:37","nodeType":"YulExpressionStatement","src":"7707:74:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7801:9:37","nodeType":"YulIdentifier","src":"7801:9:37"},{"kind":"number","nativeSrc":"7812:2:37","nodeType":"YulLiteral","src":"7812:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7797:3:37","nodeType":"YulIdentifier","src":"7797:3:37"},"nativeSrc":"7797:18:37","nodeType":"YulFunctionCall","src":"7797:18:37"},{"name":"value1","nativeSrc":"7817:6:37","nodeType":"YulIdentifier","src":"7817:6:37"}],"functionName":{"name":"mstore","nativeSrc":"7790:6:37","nodeType":"YulIdentifier","src":"7790:6:37"},"nativeSrc":"7790:34:37","nodeType":"YulFunctionCall","src":"7790:34:37"},"nativeSrc":"7790:34:37","nodeType":"YulExpressionStatement","src":"7790:34:37"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7533:297:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7623:9:37","nodeType":"YulTypedName","src":"7623:9:37","type":""},{"name":"value1","nativeSrc":"7634:6:37","nodeType":"YulTypedName","src":"7634:6:37","type":""},{"name":"value0","nativeSrc":"7642:6:37","nodeType":"YulTypedName","src":"7642:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7653:4:37","nodeType":"YulTypedName","src":"7653:4:37","type":""}],"src":"7533:297:37"},{"body":{"nativeSrc":"7964:119:37","nodeType":"YulBlock","src":"7964:119:37","statements":[{"nativeSrc":"7974:26:37","nodeType":"YulAssignment","src":"7974:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"7986:9:37","nodeType":"YulIdentifier","src":"7986:9:37"},{"kind":"number","nativeSrc":"7997:2:37","nodeType":"YulLiteral","src":"7997:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7982:3:37","nodeType":"YulIdentifier","src":"7982:3:37"},"nativeSrc":"7982:18:37","nodeType":"YulFunctionCall","src":"7982:18:37"},"variableNames":[{"name":"tail","nativeSrc":"7974:4:37","nodeType":"YulIdentifier","src":"7974:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8016:9:37","nodeType":"YulIdentifier","src":"8016:9:37"},{"name":"value0","nativeSrc":"8027:6:37","nodeType":"YulIdentifier","src":"8027:6:37"}],"functionName":{"name":"mstore","nativeSrc":"8009:6:37","nodeType":"YulIdentifier","src":"8009:6:37"},"nativeSrc":"8009:25:37","nodeType":"YulFunctionCall","src":"8009:25:37"},"nativeSrc":"8009:25:37","nodeType":"YulExpressionStatement","src":"8009:25:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8054:9:37","nodeType":"YulIdentifier","src":"8054:9:37"},{"kind":"number","nativeSrc":"8065:2:37","nodeType":"YulLiteral","src":"8065:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8050:3:37","nodeType":"YulIdentifier","src":"8050:3:37"},"nativeSrc":"8050:18:37","nodeType":"YulFunctionCall","src":"8050:18:37"},{"name":"value1","nativeSrc":"8070:6:37","nodeType":"YulIdentifier","src":"8070:6:37"}],"functionName":{"name":"mstore","nativeSrc":"8043:6:37","nodeType":"YulIdentifier","src":"8043:6:37"},"nativeSrc":"8043:34:37","nodeType":"YulFunctionCall","src":"8043:34:37"},"nativeSrc":"8043:34:37","nodeType":"YulExpressionStatement","src":"8043:34:37"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7835:248:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7925:9:37","nodeType":"YulTypedName","src":"7925:9:37","type":""},{"name":"value1","nativeSrc":"7936:6:37","nodeType":"YulTypedName","src":"7936:6:37","type":""},{"name":"value0","nativeSrc":"7944:6:37","nodeType":"YulTypedName","src":"7944:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7955:4:37","nodeType":"YulTypedName","src":"7955:4:37","type":""}],"src":"7835:248:37"},{"body":{"nativeSrc":"8279:14:37","nodeType":"YulBlock","src":"8279:14:37","statements":[{"nativeSrc":"8281:10:37","nodeType":"YulAssignment","src":"8281:10:37","value":{"name":"pos","nativeSrc":"8288:3:37","nodeType":"YulIdentifier","src":"8288:3:37"},"variableNames":[{"name":"end","nativeSrc":"8281:3:37","nodeType":"YulIdentifier","src":"8281:3:37"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"8088:205:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8263:3:37","nodeType":"YulTypedName","src":"8263:3:37","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8271:3:37","nodeType":"YulTypedName","src":"8271:3:37","type":""}],"src":"8088:205:37"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$758__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1506(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1318(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n}","id":37,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"612":[{"length":32,"start":237},{"length":32,"start":354},{"length":32,"start":2778},{"length":32,"start":2920}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xBE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0x76 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1CF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x1F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xA7 JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x132 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x19F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xC3 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xEB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0xD1 CALLDATASIZE PUSH1 0x4 PUSH2 0xE12 JUMP JUMPDEST PUSH2 0x208 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x10D SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0xE7D JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1AD CALLDATASIZE PUSH1 0x4 PUSH2 0xE7D JUMP JUMPDEST PUSH2 0x222 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1B2 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x301 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x322 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1DD CALLDATASIZE PUSH1 0x4 PUSH2 0xEE6 JUMP JUMPDEST PUSH2 0x34E JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x1F0 CALLDATASIZE PUSH1 0x4 PUSH2 0xE7D JUMP JUMPDEST PUSH2 0x367 JUMP JUMPDEST PUSH2 0x1B2 PUSH2 0x203 CALLDATASIZE PUSH1 0x4 PUSH2 0xF8C JUMP JUMPDEST PUSH2 0x385 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x21C DUP3 PUSH2 0x216 PUSH2 0x3A2 JUMP JUMPDEST SWAP1 PUSH2 0x3D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x26F JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x288 PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x282 PUSH2 0x4B4 JUMP JUMPDEST SWAP1 PUSH2 0x4E2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x30C PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x31A DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x556 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x349 PUSH2 0x32F PUSH2 0x4B4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x359 PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x31A DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x641 JUMP JUMPDEST PUSH2 0x382 PUSH2 0x372 PUSH2 0x4AA JUMP JUMPDEST DUP3 PUSH2 0x37B PUSH2 0x4B4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x8D7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x390 PUSH2 0x27A PUSH2 0x4AA JUMP JUMPDEST PUSH2 0x39C DUP5 DUP5 DUP5 DUP5 PUSH2 0x9EB JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21C PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xFFD JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x420 JUMPI POP PUSH1 0x0 PUSH2 0x21C JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x471 JUMPI POP PUSH1 0x1 PUSH2 0x21C JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x349 PUSH2 0xA97 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x21C PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xFFD JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x552 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x566 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x637 JUMPI PUSH2 0x62F DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x5BD JUMPI PUSH2 0x5BD PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x5D2 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x5E4 JUMPI PUSH2 0x5E4 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x5FD JUMPI PUSH2 0x5FD PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x612 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xBE4 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5A0 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x651 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x688 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x637 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x6A7 JUMPI PUSH2 0x6A7 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6BC SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x749 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76D SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST PUSH2 0x7BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x549 JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x7CD JUMPI PUSH2 0x7CD PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7E2 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x810 JUMPI PUSH2 0x810 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x825 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x837 JUMPI PUSH2 0x837 PUSH2 0x1037 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x8C7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x68B JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x944 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x549 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x39C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xA25 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x31A JUMPI PUSH2 0xA8F DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xA45 JUMPI PUSH2 0xA45 PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xA5E JUMPI PUSH2 0xA5E PUSH2 0x1037 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA73 SWAP2 SWAP1 PUSH2 0xE7D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0xC76 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA28 JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xAA7 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xAB1 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xBD3 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xBAF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xBD3 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST ISZERO PUSH2 0xBDD JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xC71 SWAP1 DUP5 SWAP1 PUSH2 0xD2C JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xCB9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x549 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xD14 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xD19 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x39C JUMPI PUSH2 0x39C DUP2 PUSH2 0xDD0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0xD4F JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0xD67 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xD81 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x39C JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x549 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xDE0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE24 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE54 DUP2 PUSH2 0xE5B JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xEAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xEC4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xEDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xEFF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF22 DUP10 DUP3 DUP11 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF4E DUP10 DUP3 DUP11 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7A DUP10 DUP3 DUP11 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xFA2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFC5 DUP8 DUP3 DUP9 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFE5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFF1 DUP8 DUP3 DUP9 ADD PUSH2 0xE9A JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x21C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE54 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF CODESIZE EXP 0xD9 0x21 0xBA PC 0x24 STATICCALL PUSH7 0x63DBB884105EDF LOG3 PUSH29 0x3B5D56370CD1E18A0564134C4D64736F6C634300081C00330000000000 ","sourceMap":"809:1196:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:8;;;;;;:::i;:::-;;:::i;:::-;;;516:14:37;;509:22;491:41;;479:2;464:18;542:165:8;;;;;;;;728:115:12;817:19;728:115;;;745:42:37;733:55;;;715:74;;703:2;688:18;728:115:12;543:252:37;951:21:35;;;;;;;;;878:149:12;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1303:237:35;;;;;;:::i;:::-;;:::i;:::-;;1786:279:20;;;;;;:::i;:::-;;:::i;710:120:2:-;;;:::i;2389:290:20:-;;;;;;:::i;:::-;;:::i;864:152:2:-;;;;;;:::i;:::-;;:::i;1219:247:20:-;;;;;;:::i;:::-;;:::i;542:165:8:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:8:o;1303:237:35:-;1357:18;;;1353:48;;1384:17;;;;;;;;;;;;;;1353:48;1411:70;1468:12;:10;:12::i;:::-;1411:33;:31;:33::i;:::-;:56;;:70::i;:::-;1492:6;:13;;;;;;;;;;;;;1520;;715:74:37;;;1520:13:35;;703:2:37;688:18;1520:13:35;;;;;;;1303:237;:::o;1786:279:20:-;1917:70;1974:12;:10;:12::i;1917:70::-;1997:61;2032:8;;2042:6;;2050:7;;1997:34;:61::i;:::-;1786:279;;;;;;:::o;710:120:2:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:7;;;;3550:118;782:41:2;775:48;;710:120;:::o;2389:290:20:-;2526:70;2583:12;:10;:12::i;2526:70::-;2606:66;2642:8;;2652:9;;2663:8;;2606:35;:66::i;864:152:2:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1219:247:20:-;1329:70;1386:12;:10;:12::i;1329:70::-;1409:50;1441:8;;1451:7;;1409:31;:50::i;:::-;1219:247;;;;:::o;1705:174:11:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:11;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:11;1620:11;;1560:82;-1:-1:-1;1658:34:11;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1595:175:35:-;1696:7;1722:41;:39;:41::i;5060:174:7:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;745:42:37;733:55;;4538:25:7;;;715:74:37;688:18;;4538:25:7;;;;;;;;4499:64;4408:162;;:::o;2609:378:22:-;2751:8;2780:23;;;;;:51;;-1:-1:-1;2807:24:22;;;;2780:51;2776:90;;;2840:26;;;;;;;;;;;;;;2776:90;2881:9;2876:105;2896:6;2892:1;:10;2876:105;;;2923:47;2946:8;;2955:1;2946:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2959:7;;2967:1;2959:10;;;;;;;:::i;:::-;;;;;;;2923:6;;2930:1;2923:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;2904:3;;2876:105;;;;2724:263;2609:378;;;;;;:::o;3679:647::-;3827:8;3856:26;;;;;:55;;-1:-1:-1;3886:25:22;;;;3856:55;3852:94;;;3920:26;;;;;;;;;;;;;;3852:94;3961:9;3956:364;3976:6;3972:1;:10;3956:364;;;4003:21;4027:9;;4037:1;4027:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4058:76;;;;;4108:25;4058:76;;;5989:98:37;4003:36:22;;-1:-1:-1;4058:49:22;;;;;;5962:18:37;;4058:76:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4053:173;;4161:50;;;;;745:42:37;733:55;;4161:50:22;;;715:74:37;688:18;;4161:50:22;543:252:37;4053:173:22;4239:9;;4249:1;4239:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:29;;;4277:4;4284:8;;4293:1;4284:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4297:8;;4306:1;4297:11;;;;;;;:::i;:::-;4239:70;;;;;;;;;;6612:42:37;6600:55;;;4239:70:22;;;6582:74:37;6692:55;;;;6672:18;;;6665:83;-1:-1:-1;4297:11:22;;;;;;6764:18:37;;;6757:34;6555:18;;4239:70:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3989:331;3984:3;;;;;3956:364;;3054:369:7;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;745:42:37;733:55;;3237:24:7;;;715:74:37;688:18;;3237:24:7;543:252:37;3201:60:7;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:7;3142:281;3054:369;;;:::o;1610:316:22:-;1731:8;1760:24;;;1756:63;;1793:26;;;;;;;;;;;;;;1756:63;1834:9;1829:91;1849:6;1845:1;:10;1829:91;;;1876:33;1898:7;;1906:1;1898:10;;;;;;;:::i;:::-;;;;;;;1876:8;;1885:1;1876:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;1857:3;;1829:91;;784:760:13;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:13;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:13;;784:760::o;1043:95::-;462:23:16;466:14;462:23;449:37;445:2;441:46;1372:19:13;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:13;;;;;:39;7282:55:37;;;1396:74:13;;;7264::37;1444:10:13;7354:18:37;;;7347:83;1464:4:13;7446:18:37;;;7439:83;1396:19:13;:39;;;;7237:18:37;;1396:74:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:13:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;1219:160:29:-;1328:43;;;1343:14;7725:55:37;;1328:43:29;;;7707:74:37;7797:18;;;;7790:34;;;1328:43:29;;;;;;;;;;7680:18:37;;;;1328:43:29;;;;;;;;;;;;;;1301:71;;1321:5;;1301:19;:71::i;:::-;1219:160;;;:::o;1290:365:30:-;1399:6;1375:21;:30;1371:125;;;1428:57;;;;;1455:21;1428:57;;;8009:25:37;8050:18;;;8043:34;;;7982:18;;1428:57:30;7835:248:37;1371:125:30;1507:12;1521:23;1548:9;:14;;1570:6;1548:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1506:75;;;;1596:7;1591:58;;1619:19;1627:10;1619:7;:19::i;7686:720:29:-;7766:18;7794:19;7932:4;7929:1;7922:4;7916:11;7909:4;7903;7899:15;7896:1;7889:5;7882;7877:60;7989:7;7979:176;;8033:4;8027:11;8078:16;8075:1;8070:3;8055:40;8124:16;8119:3;8112:29;7979:176;-1:-1:-1;;8232:1:29;8226:8;8182:16;;-1:-1:-1;8258:15:29;;:68;;8310:11;8325:1;8310:16;;8258:68;;;8276:26;;;;:31;8258:68;8254:146;;;8349:40;;;;;745:42:37;733:55;;8349:40:29;;;715:74:37;688:18;;8349:40:29;543:252:37;5559:487:30;5690:17;;:21;5686:354;;5887:10;5881:17;5943:15;5930:10;5926:2;5922:19;5915:44;5686:354;6010:19;;;;;;;;;;;;;;14:332:37;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:37:o;1031:154::-;1117:42;1110:5;1106:54;1099:5;1096:65;1086:93;;1175:1;1172;1165:12;1190:247;1249:6;1302:2;1290:9;1281:7;1277:23;1273:32;1270:52;;;1318:1;1315;1308:12;1270:52;1357:9;1344:23;1376:31;1401:5;1376:31;:::i;1442:367::-;1505:8;1515:6;1569:3;1562:4;1554:6;1550:17;1546:27;1536:55;;1587:1;1584;1577:12;1536:55;-1:-1:-1;1610:20:37;;1653:18;1642:30;;1639:50;;;1685:1;1682;1675:12;1639:50;1722:4;1714:6;1710:17;1698:29;;1782:3;1775:4;1765:6;1762:1;1758:14;1750:6;1746:27;1742:38;1739:47;1736:67;;;1799:1;1796;1789:12;1736:67;1442:367;;;;;:::o;1814:1114::-;1987:6;1995;2003;2011;2019;2027;2080:2;2068:9;2059:7;2055:23;2051:32;2048:52;;;2096:1;2093;2086:12;2048:52;2136:9;2123:23;2169:18;2161:6;2158:30;2155:50;;;2201:1;2198;2191:12;2155:50;2240:70;2302:7;2293:6;2282:9;2278:22;2240:70;:::i;:::-;2329:8;;-1:-1:-1;2214:96:37;-1:-1:-1;;2417:2:37;2402:18;;2389:32;2446:18;2433:32;;2430:52;;;2478:1;2475;2468:12;2430:52;2517:72;2581:7;2570:8;2559:9;2555:24;2517:72;:::i;:::-;2608:8;;-1:-1:-1;2491:98:37;-1:-1:-1;;2696:2:37;2681:18;;2668:32;2725:18;2712:32;;2709:52;;;2757:1;2754;2747:12;2709:52;2796:72;2860:7;2849:8;2838:9;2834:24;2796:72;:::i;:::-;1814:1114;;;;-1:-1:-1;1814:1114:37;;-1:-1:-1;1814:1114:37;;2887:8;;1814:1114;-1:-1:-1;;;1814:1114:37:o;4053:776::-;4183:6;4191;4199;4207;4260:2;4248:9;4239:7;4235:23;4231:32;4228:52;;;4276:1;4273;4266:12;4228:52;4316:9;4303:23;4349:18;4341:6;4338:30;4335:50;;;4381:1;4378;4371:12;4335:50;4420:70;4482:7;4473:6;4462:9;4458:22;4420:70;:::i;:::-;4509:8;;-1:-1:-1;4394:96:37;-1:-1:-1;;4597:2:37;4582:18;;4569:32;4626:18;4613:32;;4610:52;;;4658:1;4655;4648:12;4610:52;4697:72;4761:7;4750:8;4739:9;4735:24;4697:72;:::i;:::-;4053:776;;;;-1:-1:-1;4788:8:37;-1:-1:-1;;;;4053:776:37:o;4834:282::-;4901:9;;;4922:11;;;4919:191;;;4966:77;4963:1;4956:88;5067:4;5064:1;5057:15;5095:4;5092:1;5085:15;5121:184;5173:77;5170:1;5163:88;5270:4;5267:1;5260:15;5294:4;5291:1;5284:15;6098:277;6165:6;6218:2;6206:9;6197:7;6193:23;6189:32;6186:52;;;6234:1;6231;6224:12;6186:52;6266:9;6260:16;6319:5;6312:13;6305:21;6298:5;6295:32;6285:60;;6341:1;6338;6331:12"},"gasEstimates":{"creation":{"codeDepositCost":"857200","executionCost":"infinite","totalCost":"infinite"},"external":{"forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","myData()":"2336","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","setData(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","myData()":"2bb14104","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","setData(address)":"61dfdae6","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyContract.sol\":\"MyContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MyContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\ncontract MyContract is TokenRecovery, ForwarderRegistryContext {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    address public myData;\\n\\n    event DataSet(address data);\\n\\n    error InvalidZeroData();\\n\\n    constructor(address data, IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        if (data == address(0)) revert InvalidZeroData();\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    function setData(address data) external {\\n        if (data == address(0)) revert InvalidZeroData();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xe4b3d203b10bbfd6864e9b3452370c17ee7112d29b3977b97cfe9f842abbedd7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2389,"contract":"contracts/MyContract.sol:MyContract","label":"myData","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/mocks/MyContractMock.sol":{"MyContractMock":{"abi":[{"inputs":[{"internalType":"address","name":"data","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"FailedCall","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"}],"name":"IncorrectTokenContractType","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidZeroData","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"data","type":"address"}],"name":"DataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"myData","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"data","type":"address"}],"name":"setData","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"IncorrectTokenContractType(address)":[{"params":{"tokenContract":"The token contract being recovered."}}],"InsufficientBalance(uint256,uint256)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2429":{"entryPoint":null,"id":2429,"parameterSlots":2,"returnSlots":0},"@_2512":{"entryPoint":null,"id":2512,"parameterSlots":2,"returnSlots":0},"@_42":{"entryPoint":null,"id":42,"parameterSlots":1,"returnSlots":0},"@_576":{"entryPoint":null,"id":576,"parameterSlots":1,"returnSlots":0},"@_623":{"entryPoint":null,"id":623,"parameterSlots":1,"returnSlots":0},"@constructorInit_248":{"entryPoint":260,"id":248,"parameterSlots":2,"returnSlots":0},"@layout_404":{"entryPoint":208,"id":404,"parameterSlots":0,"returnSlots":1},"@layout_552":{"entryPoint":378,"id":552,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_506":{"entryPoint":424,"id":506,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$758_fromMemory":{"entryPoint":540,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":598,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":516,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1001:37","nodeType":"YulBlock","src":"0:1001:37","statements":[{"nativeSrc":"6:3:37","nodeType":"YulBlock","src":"6:3:37","statements":[]},{"body":{"nativeSrc":"59:86:37","nodeType":"YulBlock","src":"59:86:37","statements":[{"body":{"nativeSrc":"123:16:37","nodeType":"YulBlock","src":"123:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:37","nodeType":"YulLiteral","src":"132:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:37","nodeType":"YulLiteral","src":"135:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:37","nodeType":"YulIdentifier","src":"125:6:37"},"nativeSrc":"125:12:37","nodeType":"YulFunctionCall","src":"125:12:37"},"nativeSrc":"125:12:37","nodeType":"YulExpressionStatement","src":"125:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:37","nodeType":"YulIdentifier","src":"82:5:37"},{"arguments":[{"name":"value","nativeSrc":"93:5:37","nodeType":"YulIdentifier","src":"93:5:37"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:37","nodeType":"YulLiteral","src":"108:3:37","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:37","nodeType":"YulLiteral","src":"113:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:37","nodeType":"YulIdentifier","src":"104:3:37"},"nativeSrc":"104:11:37","nodeType":"YulFunctionCall","src":"104:11:37"},{"kind":"number","nativeSrc":"117:1:37","nodeType":"YulLiteral","src":"117:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:37","nodeType":"YulIdentifier","src":"100:3:37"},"nativeSrc":"100:19:37","nodeType":"YulFunctionCall","src":"100:19:37"}],"functionName":{"name":"and","nativeSrc":"89:3:37","nodeType":"YulIdentifier","src":"89:3:37"},"nativeSrc":"89:31:37","nodeType":"YulFunctionCall","src":"89:31:37"}],"functionName":{"name":"eq","nativeSrc":"79:2:37","nodeType":"YulIdentifier","src":"79:2:37"},"nativeSrc":"79:42:37","nodeType":"YulFunctionCall","src":"79:42:37"}],"functionName":{"name":"iszero","nativeSrc":"72:6:37","nodeType":"YulIdentifier","src":"72:6:37"},"nativeSrc":"72:50:37","nodeType":"YulFunctionCall","src":"72:50:37"},"nativeSrc":"69:70:37","nodeType":"YulIf","src":"69:70:37"}]},"name":"validator_revert_address","nativeSrc":"14:131:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:37","nodeType":"YulTypedName","src":"48:5:37","type":""}],"src":"14:131:37"},{"body":{"nativeSrc":"274:287:37","nodeType":"YulBlock","src":"274:287:37","statements":[{"body":{"nativeSrc":"320:16:37","nodeType":"YulBlock","src":"320:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"329:1:37","nodeType":"YulLiteral","src":"329:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"332:1:37","nodeType":"YulLiteral","src":"332:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"322:6:37","nodeType":"YulIdentifier","src":"322:6:37"},"nativeSrc":"322:12:37","nodeType":"YulFunctionCall","src":"322:12:37"},"nativeSrc":"322:12:37","nodeType":"YulExpressionStatement","src":"322:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"295:7:37","nodeType":"YulIdentifier","src":"295:7:37"},{"name":"headStart","nativeSrc":"304:9:37","nodeType":"YulIdentifier","src":"304:9:37"}],"functionName":{"name":"sub","nativeSrc":"291:3:37","nodeType":"YulIdentifier","src":"291:3:37"},"nativeSrc":"291:23:37","nodeType":"YulFunctionCall","src":"291:23:37"},{"kind":"number","nativeSrc":"316:2:37","nodeType":"YulLiteral","src":"316:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"287:3:37","nodeType":"YulIdentifier","src":"287:3:37"},"nativeSrc":"287:32:37","nodeType":"YulFunctionCall","src":"287:32:37"},"nativeSrc":"284:52:37","nodeType":"YulIf","src":"284:52:37"},{"nativeSrc":"345:29:37","nodeType":"YulVariableDeclaration","src":"345:29:37","value":{"arguments":[{"name":"headStart","nativeSrc":"364:9:37","nodeType":"YulIdentifier","src":"364:9:37"}],"functionName":{"name":"mload","nativeSrc":"358:5:37","nodeType":"YulIdentifier","src":"358:5:37"},"nativeSrc":"358:16:37","nodeType":"YulFunctionCall","src":"358:16:37"},"variables":[{"name":"value","nativeSrc":"349:5:37","nodeType":"YulTypedName","src":"349:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"408:5:37","nodeType":"YulIdentifier","src":"408:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"383:24:37","nodeType":"YulIdentifier","src":"383:24:37"},"nativeSrc":"383:31:37","nodeType":"YulFunctionCall","src":"383:31:37"},"nativeSrc":"383:31:37","nodeType":"YulExpressionStatement","src":"383:31:37"},{"nativeSrc":"423:15:37","nodeType":"YulAssignment","src":"423:15:37","value":{"name":"value","nativeSrc":"433:5:37","nodeType":"YulIdentifier","src":"433:5:37"},"variableNames":[{"name":"value0","nativeSrc":"423:6:37","nodeType":"YulIdentifier","src":"423:6:37"}]},{"nativeSrc":"447:40:37","nodeType":"YulVariableDeclaration","src":"447:40:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"472:9:37","nodeType":"YulIdentifier","src":"472:9:37"},{"kind":"number","nativeSrc":"483:2:37","nodeType":"YulLiteral","src":"483:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"468:3:37","nodeType":"YulIdentifier","src":"468:3:37"},"nativeSrc":"468:18:37","nodeType":"YulFunctionCall","src":"468:18:37"}],"functionName":{"name":"mload","nativeSrc":"462:5:37","nodeType":"YulIdentifier","src":"462:5:37"},"nativeSrc":"462:25:37","nodeType":"YulFunctionCall","src":"462:25:37"},"variables":[{"name":"value_1","nativeSrc":"451:7:37","nodeType":"YulTypedName","src":"451:7:37","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"521:7:37","nodeType":"YulIdentifier","src":"521:7:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"496:24:37","nodeType":"YulIdentifier","src":"496:24:37"},"nativeSrc":"496:33:37","nodeType":"YulFunctionCall","src":"496:33:37"},"nativeSrc":"496:33:37","nodeType":"YulExpressionStatement","src":"496:33:37"},{"nativeSrc":"538:17:37","nodeType":"YulAssignment","src":"538:17:37","value":{"name":"value_1","nativeSrc":"548:7:37","nodeType":"YulIdentifier","src":"548:7:37"},"variableNames":[{"name":"value1","nativeSrc":"538:6:37","nodeType":"YulIdentifier","src":"538:6:37"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$758_fromMemory","nativeSrc":"150:411:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"232:9:37","nodeType":"YulTypedName","src":"232:9:37","type":""},{"name":"dataEnd","nativeSrc":"243:7:37","nodeType":"YulTypedName","src":"243:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"255:6:37","nodeType":"YulTypedName","src":"255:6:37","type":""},{"name":"value1","nativeSrc":"263:6:37","nodeType":"YulTypedName","src":"263:6:37","type":""}],"src":"150:411:37"},{"body":{"nativeSrc":"667:102:37","nodeType":"YulBlock","src":"667:102:37","statements":[{"nativeSrc":"677:26:37","nodeType":"YulAssignment","src":"677:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"689:9:37","nodeType":"YulIdentifier","src":"689:9:37"},{"kind":"number","nativeSrc":"700:2:37","nodeType":"YulLiteral","src":"700:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"685:3:37","nodeType":"YulIdentifier","src":"685:3:37"},"nativeSrc":"685:18:37","nodeType":"YulFunctionCall","src":"685:18:37"},"variableNames":[{"name":"tail","nativeSrc":"677:4:37","nodeType":"YulIdentifier","src":"677:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"719:9:37","nodeType":"YulIdentifier","src":"719:9:37"},{"arguments":[{"name":"value0","nativeSrc":"734:6:37","nodeType":"YulIdentifier","src":"734:6:37"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"750:3:37","nodeType":"YulLiteral","src":"750:3:37","type":"","value":"160"},{"kind":"number","nativeSrc":"755:1:37","nodeType":"YulLiteral","src":"755:1:37","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"746:3:37","nodeType":"YulIdentifier","src":"746:3:37"},"nativeSrc":"746:11:37","nodeType":"YulFunctionCall","src":"746:11:37"},{"kind":"number","nativeSrc":"759:1:37","nodeType":"YulLiteral","src":"759:1:37","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"742:3:37","nodeType":"YulIdentifier","src":"742:3:37"},"nativeSrc":"742:19:37","nodeType":"YulFunctionCall","src":"742:19:37"}],"functionName":{"name":"and","nativeSrc":"730:3:37","nodeType":"YulIdentifier","src":"730:3:37"},"nativeSrc":"730:32:37","nodeType":"YulFunctionCall","src":"730:32:37"}],"functionName":{"name":"mstore","nativeSrc":"712:6:37","nodeType":"YulIdentifier","src":"712:6:37"},"nativeSrc":"712:51:37","nodeType":"YulFunctionCall","src":"712:51:37"},"nativeSrc":"712:51:37","nodeType":"YulExpressionStatement","src":"712:51:37"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"566:203:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"636:9:37","nodeType":"YulTypedName","src":"636:9:37","type":""},{"name":"value0","nativeSrc":"647:6:37","nodeType":"YulTypedName","src":"647:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"658:4:37","nodeType":"YulTypedName","src":"658:4:37","type":""}],"src":"566:203:37"},{"body":{"nativeSrc":"823:176:37","nodeType":"YulBlock","src":"823:176:37","statements":[{"nativeSrc":"833:17:37","nodeType":"YulAssignment","src":"833:17:37","value":{"arguments":[{"name":"x","nativeSrc":"845:1:37","nodeType":"YulIdentifier","src":"845:1:37"},{"name":"y","nativeSrc":"848:1:37","nodeType":"YulIdentifier","src":"848:1:37"}],"functionName":{"name":"sub","nativeSrc":"841:3:37","nodeType":"YulIdentifier","src":"841:3:37"},"nativeSrc":"841:9:37","nodeType":"YulFunctionCall","src":"841:9:37"},"variableNames":[{"name":"diff","nativeSrc":"833:4:37","nodeType":"YulIdentifier","src":"833:4:37"}]},{"body":{"nativeSrc":"882:111:37","nodeType":"YulBlock","src":"882:111:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"903:1:37","nodeType":"YulLiteral","src":"903:1:37","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"910:3:37","nodeType":"YulLiteral","src":"910:3:37","type":"","value":"224"},{"kind":"number","nativeSrc":"915:10:37","nodeType":"YulLiteral","src":"915:10:37","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"906:3:37","nodeType":"YulIdentifier","src":"906:3:37"},"nativeSrc":"906:20:37","nodeType":"YulFunctionCall","src":"906:20:37"}],"functionName":{"name":"mstore","nativeSrc":"896:6:37","nodeType":"YulIdentifier","src":"896:6:37"},"nativeSrc":"896:31:37","nodeType":"YulFunctionCall","src":"896:31:37"},"nativeSrc":"896:31:37","nodeType":"YulExpressionStatement","src":"896:31:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"947:1:37","nodeType":"YulLiteral","src":"947:1:37","type":"","value":"4"},{"kind":"number","nativeSrc":"950:4:37","nodeType":"YulLiteral","src":"950:4:37","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"940:6:37","nodeType":"YulIdentifier","src":"940:6:37"},"nativeSrc":"940:15:37","nodeType":"YulFunctionCall","src":"940:15:37"},"nativeSrc":"940:15:37","nodeType":"YulExpressionStatement","src":"940:15:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"975:1:37","nodeType":"YulLiteral","src":"975:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"978:4:37","nodeType":"YulLiteral","src":"978:4:37","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"968:6:37","nodeType":"YulIdentifier","src":"968:6:37"},"nativeSrc":"968:15:37","nodeType":"YulFunctionCall","src":"968:15:37"},"nativeSrc":"968:15:37","nodeType":"YulExpressionStatement","src":"968:15:37"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"865:4:37","nodeType":"YulIdentifier","src":"865:4:37"},{"name":"x","nativeSrc":"871:1:37","nodeType":"YulIdentifier","src":"871:1:37"}],"functionName":{"name":"gt","nativeSrc":"862:2:37","nodeType":"YulIdentifier","src":"862:2:37"},"nativeSrc":"862:11:37","nodeType":"YulFunctionCall","src":"862:11:37"},"nativeSrc":"859:134:37","nodeType":"YulIf","src":"859:134:37"}]},"name":"checked_sub_t_uint256","nativeSrc":"774:225:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"805:1:37","nodeType":"YulTypedName","src":"805:1:37","type":""},{"name":"y","nativeSrc":"808:1:37","nodeType":"YulTypedName","src":"808:1:37","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"814:4:37","nodeType":"YulTypedName","src":"814:4:37","type":""}],"src":"774:225:37"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IForwarderRegistry_$758_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":37,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b506040516115c93803806115c983398101604081905261002f9161021c565b8181808033610046816100406100d0565b90610104565b506001600160a01b039081166080528316905061007657604051633da979c160e21b815260040160405180910390fd5b600080546001600160a01b0319166001600160a01b0384169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150505050610277565b6000806100fe60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610256565b92915050565b6001600160a01b0381161561015a5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6101766307f5828d60e41b600161016f61017a565b91906101a8565b5050565b6000806100fe60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610256565b600160e01b6001600160e01b03198316016101d6576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b038116811461021957600080fd5b50565b6000806040838503121561022f57600080fd5b825161023a81610204565b602084015190925061024b81610204565b809150509250929050565b818103818111156100fe57634e487b7160e01b600052601160045260246000fd5b6080516113156102b46000396000818160f80152818161018301528181610b0d01528181610b4b01528181610c890152610d1701526113156000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806361dfdae611610081578063c3666c361161005b578063c3666c36146101f0578063f2fde38b14610203578063f7ba94bd1461021657600080fd5b806361dfdae6146101c057806373c8a958146101d55780638da5cb5b146101e857600080fd5b80632bb14104116100b25780632bb141041461013d57806331e66e1e1461015d578063572b6c051461017357600080fd5b806301ffc9a7146100ce5780632b4c9f16146100f6575b600080fd5b6100e16100dc366004610ff2565b610229565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b6000546101189073ffffffffffffffffffffffffffffffffffffffff1681565b610165610243565b6040516100ed92919061103b565b6100e16101813660046110aa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101d36101ce3660046110aa565b610256565b005b6101d36101e3366004611113565b610335565b610118610356565b6101d36101fe366004611113565b610382565b6101d36102113660046110aa565b61039b565b6101d36102243660046111b9565b6103b9565b600061023d826102376103d6565b90610404565b92915050565b36600061024e6104de565b915091509091565b73ffffffffffffffffffffffffffffffffffffffff81166102a3576040517ff6a5e70400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102bc6102ae6104e9565b6102b66104f3565b90610521565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150565b6103406102ae6104e9565b61034e868686868686610595565b505050505050565b600061037d6103636104f3565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61038d6102ae6104e9565b61034e868686868686610680565b6103b66103a66104e9565b826103af6104f3565b9190610916565b50565b6103c46102ae6104e9565b6103d084848484610a2a565b50505050565b60008061023d60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61122a565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016104545750600061023d565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016104a55750600161023d565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b36600061024e610ad6565b600061037d610c46565b60008061023d60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61122a565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610591576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b8483811415806105a55750808214155b156105dc576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106765761066e8888838181106105fc576105fc611264565b905060200201602081019061061191906110aa565b85858481811061062357610623611264565b9050602002013588888581811061063c5761063c611264565b905060200201602081019061065191906110aa565b73ffffffffffffffffffffffffffffffffffffffff169190610d93565b6001016105df565b5050505050505050565b8483811415806106905750808214155b156106c7576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106765760008686838181106106e6576106e6611264565b90506020020160208101906106fb91906110aa565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190611293565b6107fa576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610588565b86868381811061080c5761080c611264565b905060200201602081019061082191906110aa565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b8681811061084f5761084f611264565b905060200201602081019061086491906110aa565b88888781811061087657610876611264565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156108f257600080fd5b505af1158015610906573d6000803e3d6000fd5b50505050508060010190506106ca565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610983576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610588565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103d05783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b82818114610a64576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561034e57610ace848483818110610a8457610a84611264565b90506020020135878784818110610a9d57610a9d611264565b9050602002016020810190610ab291906110aa565b73ffffffffffffffffffffffffffffffffffffffff1690610e25565b600101610a67565b36600033321480610ae75750601836105b15610af55750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610c30575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663019a2028367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152306044820152606401602060405180830381865afa158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c309190611293565b15610c3d5761024e610edb565b50600091369150565b600033321480610c565750601836105b15610c6057503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610d8257506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015610d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d829190611293565b15610d8c57919050565b3391505090565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e20908490610f0c565b505050565b80471015610e68576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610588565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114610ec3576040519150601f19603f3d011682016040523d82523d6000602084013e610ec8565b606091505b5091509150816103d0576103d081610fb0565b36600061024e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec83018284816112b5565b600080602060008451602086016000885af180610f2f576040513d6000823e3d81fd5b50506000513d91508115610f47578060011415610f61565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156103d0576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610588565b805115610fc05780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561100457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461103457600080fd5b9392505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b73ffffffffffffffffffffffffffffffffffffffff811681146103b657600080fd5b6000602082840312156110bc57600080fd5b813561103481611088565b60008083601f8401126110d957600080fd5b50813567ffffffffffffffff8111156110f157600080fd5b6020830191508360208260051b850101111561110c57600080fd5b9250929050565b6000806000806000806060878903121561112c57600080fd5b863567ffffffffffffffff81111561114357600080fd5b61114f89828a016110c7565b909750955050602087013567ffffffffffffffff81111561116f57600080fd5b61117b89828a016110c7565b909550935050604087013567ffffffffffffffff81111561119b57600080fd5b6111a789828a016110c7565b979a9699509497509295939492505050565b600080600080604085870312156111cf57600080fd5b843567ffffffffffffffff8111156111e657600080fd5b6111f2878288016110c7565b909550935050602085013567ffffffffffffffff81111561121257600080fd5b61121e878288016110c7565b95989497509550505050565b8181038181111561023d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156112a557600080fd5b8151801515811461103457600080fd5b600080858511156112c557600080fd5b838611156112d257600080fd5b505082019391909203915056fea2646970667358221220232bcb72ca2dd5199d2463a715cc5c7aa5cced43440526aa13e28b02dd947cbf64736f6c634300081c0033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x15C9 CODESIZE SUB DUP1 PUSH2 0x15C9 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x21C JUMP JUMPDEST DUP2 DUP2 DUP1 DUP1 CALLER PUSH2 0x46 DUP2 PUSH2 0x40 PUSH2 0xD0 JUMP JUMPDEST SWAP1 PUSH2 0x104 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP4 AND SWAP1 POP PUSH2 0x76 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3DA979C1 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP PUSH2 0x277 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFE PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x256 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x15A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x176 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x16F PUSH2 0x17A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xFE PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x256 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x219 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x22F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH2 0x23A DUP2 PUSH2 0x204 JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x24B DUP2 PUSH2 0x204 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xFE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1315 PUSH2 0x2B4 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH1 0xF8 ADD MSTORE DUP2 DUP2 PUSH2 0x183 ADD MSTORE DUP2 DUP2 PUSH2 0xB0D ADD MSTORE DUP2 DUP2 PUSH2 0xB4B ADD MSTORE DUP2 DUP2 PUSH2 0xC89 ADD MSTORE PUSH2 0xD17 ADD MSTORE PUSH2 0x1315 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61DFDAE6 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0xFF2 JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x118 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x243 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP3 SWAP2 SWAP1 PUSH2 0x103B JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x181 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AA JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1113 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x356 JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x1113 JUMP JUMPDEST PUSH2 0x382 JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x11B9 JUMP JUMPDEST PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23D DUP3 PUSH2 0x237 PUSH2 0x3D6 JUMP JUMPDEST SWAP1 PUSH2 0x404 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x24E PUSH2 0x4DE JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2BC PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x2B6 PUSH2 0x4F3 JUMP JUMPDEST SWAP1 PUSH2 0x521 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x340 PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x34E DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x595 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D PUSH2 0x363 PUSH2 0x4F3 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x38D PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x34E DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x680 JUMP JUMPDEST PUSH2 0x3B6 PUSH2 0x3A6 PUSH2 0x4E9 JUMP JUMPDEST DUP3 PUSH2 0x3AF PUSH2 0x4F3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x916 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3C4 PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x3D0 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA2A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23D PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x122A JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x454 JUMPI POP PUSH1 0x0 PUSH2 0x23D JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x4A5 JUMPI POP PUSH1 0x1 PUSH2 0x23D JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x24E PUSH2 0xAD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23D PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x122A JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x591 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x5A5 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x5DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x676 JUMPI PUSH2 0x66E DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x5FC JUMPI PUSH2 0x5FC PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x611 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x623 JUMPI PUSH2 0x623 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x63C JUMPI PUSH2 0x63C PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x651 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xD93 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5DF JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x690 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x6E6 JUMPI PUSH2 0x6E6 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6FB SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x788 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7AC SWAP2 SWAP1 PUSH2 0x1293 JUMP JUMPDEST PUSH2 0x7FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x588 JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x80C JUMPI PUSH2 0x80C PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x821 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x84F JUMPI PUSH2 0x84F PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x864 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x876 JUMPI PUSH2 0x876 PUSH2 0x1264 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x906 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x6CA JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x588 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D0 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xA64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x34E JUMPI PUSH2 0xACE DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xA84 JUMPI PUSH2 0xA84 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xA9D JUMPI PUSH2 0xA9D PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA67 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xAE7 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xAF5 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xC30 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x19A2028 CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC30 SWAP2 SWAP1 PUSH2 0x1293 JUMP JUMPDEST ISZERO PUSH2 0xC3D JUMPI PUSH2 0x24E PUSH2 0xEDB JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xC56 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xC60 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xD82 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD82 SWAP2 SWAP1 PUSH2 0x1293 JUMP JUMPDEST ISZERO PUSH2 0xD8C JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xE20 SWAP1 DUP5 SWAP1 PUSH2 0xF0C JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xE68 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x588 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xEC3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3D0 JUMPI PUSH2 0x3D0 DUP2 PUSH2 0xFB0 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x24E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x12B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0xF2F JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0xF47 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xF61 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x588 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xFC0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1034 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1034 DUP2 PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x10D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x110C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x112C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114F DUP10 DUP3 DUP11 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x116F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x117B DUP10 DUP3 DUP11 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x119B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11A7 DUP10 DUP3 DUP11 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F2 DUP8 DUP3 DUP9 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x121E DUP8 DUP3 DUP9 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x23D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1034 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x12C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 0x2B 0xCB PUSH19 0xCA2DD5199D2463A715CC5C7AA5CCED43440526 0xAA SGT 0xE2 DUP12 MUL 0xDD SWAP5 PUSH29 0xBF64736F6C634300081C00330000000000000000000000000000000000 ","sourceMap":"221:248:36:-:0;;;265:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;340:4;346:17;;;1125:10:35;1008:63:1;1125:10:35;1008:33:1;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;622:39:13;;;;;1195:18:35;::::2;::::0;-1:-1:-1;1191:48:35::2;;1222:17;;-1:-1:-1::0;;;1222:17:35::2;;;;;;;;;;;1191:48;1249:6;:13:::0;;-1:-1:-1;;;;;;1249:13:35::2;-1:-1:-1::0;;;;;1249:13:35;::::2;::::0;;::::2;::::0;;;1277::::2;::::0;712:51:37;;;1277:13:35::2;::::0;700:2:37;685:18;1277:13:35::2;;;;;;;1043:254:::0;;265:102:36;;221:248;;5060:174:7;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:7:o;1561:341::-;-1:-1:-1;;;;;1649:26:7;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:7;-1:-1:-1;;;;;1691:30:7;;;;;;;1740:46;;-1:-1:-1;;1740:46:7;;-1:-1:-1;;1740:46:7;1645:152;1806:89;-1:-1:-1;;;1890:4:7;1806:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1561:341;;:::o;1705:174:11:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:11;;;877:68;;925:20;;-1:-1:-1;;;925:20:11;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:11;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:11;;;;;;;;;;773:235::o;14:131:37:-;-1:-1:-1;;;;;89:31:37;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:411::-;255:6;263;316:2;304:9;295:7;291:23;287:32;284:52;;;332:1;329;322:12;284:52;364:9;358:16;383:31;408:5;383:31;:::i;:::-;483:2;468:18;;462:25;433:5;;-1:-1:-1;496:33:37;462:25;496:33;:::i;:::-;548:7;538:17;;;150:411;;;;;:::o;774:225::-;841:9;;;862:11;;;859:134;;;915:10;910:3;906:20;903:1;896:31;950:4;947:1;940:15;978:4;975:1;968:15;774:225;221:248:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@__msgData_2521":{"entryPoint":579,"id":2521,"parameterSlots":0,"returnSlots":2},"@_callOptionalReturn_1873":{"entryPoint":3852,"id":1873,"parameterSlots":2,"returnSlots":0},"@_msgData_2490":{"entryPoint":1246,"id":2490,"parameterSlots":0,"returnSlots":2},"@_msgData_729":{"entryPoint":2774,"id":729,"parameterSlots":0,"returnSlots":2},"@_msgSender_2476":{"entryPoint":1257,"id":2476,"parameterSlots":0,"returnSlots":1},"@_msgSender_677":{"entryPoint":3142,"id":677,"parameterSlots":0,"returnSlots":1},"@_revert_2174":{"entryPoint":4016,"id":2174,"parameterSlots":1,"returnSlots":0},"@enforceIsContractOwner_372":{"entryPoint":1313,"id":372,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_585":{"entryPoint":null,"id":585,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_601":{"entryPoint":null,"id":601,"parameterSlots":1,"returnSlots":1},"@layout_404":{"entryPoint":1267,"id":404,"parameterSlots":0,"returnSlots":1},"@layout_552":{"entryPoint":982,"id":552,"parameterSlots":0,"returnSlots":1},"@msgData_786":{"entryPoint":3803,"id":786,"parameterSlots":0,"returnSlots":2},"@msgSender_769":{"entryPoint":null,"id":769,"parameterSlots":0,"returnSlots":1},"@myData_2389":{"entryPoint":null,"id":2389,"parameterSlots":0,"returnSlots":0},"@owner_325":{"entryPoint":null,"id":325,"parameterSlots":1,"returnSlots":1},"@owner_73":{"entryPoint":854,"id":73,"parameterSlots":0,"returnSlots":1},"@recoverERC20s_1142":{"entryPoint":1429,"id":1142,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_937":{"entryPoint":821,"id":937,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1231":{"entryPoint":1664,"id":1231,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_969":{"entryPoint":898,"id":969,"parameterSlots":6,"returnSlots":0},"@recoverETH_1086":{"entryPoint":2602,"id":1086,"parameterSlots":4,"returnSlots":0},"@recoverETH_905":{"entryPoint":953,"id":905,"parameterSlots":4,"returnSlots":0},"@safeTransfer_1551":{"entryPoint":3475,"id":1551,"parameterSlots":3,"returnSlots":0},"@sendValue_1973":{"entryPoint":3621,"id":1973,"parameterSlots":2,"returnSlots":0},"@setData_2462":{"entryPoint":598,"id":2462,"parameterSlots":1,"returnSlots":0},"@supportsInterface_434":{"entryPoint":553,"id":434,"parameterSlots":1,"returnSlots":1},"@supportsInterface_540":{"entryPoint":1028,"id":540,"parameterSlots":2,"returnSlots":1},"@transferOwnership_312":{"entryPoint":2326,"id":312,"parameterSlots":3,"returnSlots":0},"@transferOwnership_90":{"entryPoint":923,"id":90,"parameterSlots":1,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":4295,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4371,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4537,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4755,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":4082,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$1506":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$1318":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4155,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$758__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":4789,"id":null,"parameterSlots":4,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":4650,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x32":{"entryPoint":4708,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":4232,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:9083:37","nodeType":"YulBlock","src":"0:9083:37","statements":[{"nativeSrc":"6:3:37","nodeType":"YulBlock","src":"6:3:37","statements":[]},{"body":{"nativeSrc":"83:263:37","nodeType":"YulBlock","src":"83:263:37","statements":[{"body":{"nativeSrc":"129:16:37","nodeType":"YulBlock","src":"129:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:37","nodeType":"YulLiteral","src":"138:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:37","nodeType":"YulLiteral","src":"141:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:37","nodeType":"YulIdentifier","src":"131:6:37"},"nativeSrc":"131:12:37","nodeType":"YulFunctionCall","src":"131:12:37"},"nativeSrc":"131:12:37","nodeType":"YulExpressionStatement","src":"131:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:37","nodeType":"YulIdentifier","src":"104:7:37"},{"name":"headStart","nativeSrc":"113:9:37","nodeType":"YulIdentifier","src":"113:9:37"}],"functionName":{"name":"sub","nativeSrc":"100:3:37","nodeType":"YulIdentifier","src":"100:3:37"},"nativeSrc":"100:23:37","nodeType":"YulFunctionCall","src":"100:23:37"},{"kind":"number","nativeSrc":"125:2:37","nodeType":"YulLiteral","src":"125:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:37","nodeType":"YulIdentifier","src":"96:3:37"},"nativeSrc":"96:32:37","nodeType":"YulFunctionCall","src":"96:32:37"},"nativeSrc":"93:52:37","nodeType":"YulIf","src":"93:52:37"},{"nativeSrc":"154:36:37","nodeType":"YulVariableDeclaration","src":"154:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:37","nodeType":"YulIdentifier","src":"180:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:37","nodeType":"YulIdentifier","src":"167:12:37"},"nativeSrc":"167:23:37","nodeType":"YulFunctionCall","src":"167:23:37"},"variables":[{"name":"value","nativeSrc":"158:5:37","nodeType":"YulTypedName","src":"158:5:37","type":""}]},{"body":{"nativeSrc":"300:16:37","nodeType":"YulBlock","src":"300:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:37","nodeType":"YulLiteral","src":"309:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:37","nodeType":"YulLiteral","src":"312:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:37","nodeType":"YulIdentifier","src":"302:6:37"},"nativeSrc":"302:12:37","nodeType":"YulFunctionCall","src":"302:12:37"},"nativeSrc":"302:12:37","nodeType":"YulExpressionStatement","src":"302:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:37","nodeType":"YulIdentifier","src":"212:5:37"},{"arguments":[{"name":"value","nativeSrc":"223:5:37","nodeType":"YulIdentifier","src":"223:5:37"},{"kind":"number","nativeSrc":"230:66:37","nodeType":"YulLiteral","src":"230:66:37","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:37","nodeType":"YulIdentifier","src":"219:3:37"},"nativeSrc":"219:78:37","nodeType":"YulFunctionCall","src":"219:78:37"}],"functionName":{"name":"eq","nativeSrc":"209:2:37","nodeType":"YulIdentifier","src":"209:2:37"},"nativeSrc":"209:89:37","nodeType":"YulFunctionCall","src":"209:89:37"}],"functionName":{"name":"iszero","nativeSrc":"202:6:37","nodeType":"YulIdentifier","src":"202:6:37"},"nativeSrc":"202:97:37","nodeType":"YulFunctionCall","src":"202:97:37"},"nativeSrc":"199:117:37","nodeType":"YulIf","src":"199:117:37"},{"nativeSrc":"325:15:37","nodeType":"YulAssignment","src":"325:15:37","value":{"name":"value","nativeSrc":"335:5:37","nodeType":"YulIdentifier","src":"335:5:37"},"variableNames":[{"name":"value0","nativeSrc":"325:6:37","nodeType":"YulIdentifier","src":"325:6:37"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:37","nodeType":"YulTypedName","src":"49:9:37","type":""},{"name":"dataEnd","nativeSrc":"60:7:37","nodeType":"YulTypedName","src":"60:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:37","nodeType":"YulTypedName","src":"72:6:37","type":""}],"src":"14:332:37"},{"body":{"nativeSrc":"446:92:37","nodeType":"YulBlock","src":"446:92:37","statements":[{"nativeSrc":"456:26:37","nodeType":"YulAssignment","src":"456:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:37","nodeType":"YulIdentifier","src":"468:9:37"},{"kind":"number","nativeSrc":"479:2:37","nodeType":"YulLiteral","src":"479:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:37","nodeType":"YulIdentifier","src":"464:3:37"},"nativeSrc":"464:18:37","nodeType":"YulFunctionCall","src":"464:18:37"},"variableNames":[{"name":"tail","nativeSrc":"456:4:37","nodeType":"YulIdentifier","src":"456:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:37","nodeType":"YulIdentifier","src":"498:9:37"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:37","nodeType":"YulIdentifier","src":"523:6:37"}],"functionName":{"name":"iszero","nativeSrc":"516:6:37","nodeType":"YulIdentifier","src":"516:6:37"},"nativeSrc":"516:14:37","nodeType":"YulFunctionCall","src":"516:14:37"}],"functionName":{"name":"iszero","nativeSrc":"509:6:37","nodeType":"YulIdentifier","src":"509:6:37"},"nativeSrc":"509:22:37","nodeType":"YulFunctionCall","src":"509:22:37"}],"functionName":{"name":"mstore","nativeSrc":"491:6:37","nodeType":"YulIdentifier","src":"491:6:37"},"nativeSrc":"491:41:37","nodeType":"YulFunctionCall","src":"491:41:37"},"nativeSrc":"491:41:37","nodeType":"YulExpressionStatement","src":"491:41:37"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:37","nodeType":"YulTypedName","src":"415:9:37","type":""},{"name":"value0","nativeSrc":"426:6:37","nodeType":"YulTypedName","src":"426:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:37","nodeType":"YulTypedName","src":"437:4:37","type":""}],"src":"351:187:37"},{"body":{"nativeSrc":"670:125:37","nodeType":"YulBlock","src":"670:125:37","statements":[{"nativeSrc":"680:26:37","nodeType":"YulAssignment","src":"680:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"692:9:37","nodeType":"YulIdentifier","src":"692:9:37"},{"kind":"number","nativeSrc":"703:2:37","nodeType":"YulLiteral","src":"703:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"688:3:37","nodeType":"YulIdentifier","src":"688:3:37"},"nativeSrc":"688:18:37","nodeType":"YulFunctionCall","src":"688:18:37"},"variableNames":[{"name":"tail","nativeSrc":"680:4:37","nodeType":"YulIdentifier","src":"680:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"722:9:37","nodeType":"YulIdentifier","src":"722:9:37"},{"arguments":[{"name":"value0","nativeSrc":"737:6:37","nodeType":"YulIdentifier","src":"737:6:37"},{"kind":"number","nativeSrc":"745:42:37","nodeType":"YulLiteral","src":"745:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"733:3:37","nodeType":"YulIdentifier","src":"733:3:37"},"nativeSrc":"733:55:37","nodeType":"YulFunctionCall","src":"733:55:37"}],"functionName":{"name":"mstore","nativeSrc":"715:6:37","nodeType":"YulIdentifier","src":"715:6:37"},"nativeSrc":"715:74:37","nodeType":"YulFunctionCall","src":"715:74:37"},"nativeSrc":"715:74:37","nodeType":"YulExpressionStatement","src":"715:74:37"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$758__to_t_address__fromStack_reversed","nativeSrc":"543:252:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"639:9:37","nodeType":"YulTypedName","src":"639:9:37","type":""},{"name":"value0","nativeSrc":"650:6:37","nodeType":"YulTypedName","src":"650:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"661:4:37","nodeType":"YulTypedName","src":"661:4:37","type":""}],"src":"543:252:37"},{"body":{"nativeSrc":"901:125:37","nodeType":"YulBlock","src":"901:125:37","statements":[{"nativeSrc":"911:26:37","nodeType":"YulAssignment","src":"911:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"923:9:37","nodeType":"YulIdentifier","src":"923:9:37"},{"kind":"number","nativeSrc":"934:2:37","nodeType":"YulLiteral","src":"934:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"919:3:37","nodeType":"YulIdentifier","src":"919:3:37"},"nativeSrc":"919:18:37","nodeType":"YulFunctionCall","src":"919:18:37"},"variableNames":[{"name":"tail","nativeSrc":"911:4:37","nodeType":"YulIdentifier","src":"911:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"953:9:37","nodeType":"YulIdentifier","src":"953:9:37"},{"arguments":[{"name":"value0","nativeSrc":"968:6:37","nodeType":"YulIdentifier","src":"968:6:37"},{"kind":"number","nativeSrc":"976:42:37","nodeType":"YulLiteral","src":"976:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"964:3:37","nodeType":"YulIdentifier","src":"964:3:37"},"nativeSrc":"964:55:37","nodeType":"YulFunctionCall","src":"964:55:37"}],"functionName":{"name":"mstore","nativeSrc":"946:6:37","nodeType":"YulIdentifier","src":"946:6:37"},"nativeSrc":"946:74:37","nodeType":"YulFunctionCall","src":"946:74:37"},"nativeSrc":"946:74:37","nodeType":"YulExpressionStatement","src":"946:74:37"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"800:226:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"870:9:37","nodeType":"YulTypedName","src":"870:9:37","type":""},{"name":"value0","nativeSrc":"881:6:37","nodeType":"YulTypedName","src":"881:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"892:4:37","nodeType":"YulTypedName","src":"892:4:37","type":""}],"src":"800:226:37"},{"body":{"nativeSrc":"1160:318:37","nodeType":"YulBlock","src":"1160:318:37","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1177:9:37","nodeType":"YulIdentifier","src":"1177:9:37"},{"kind":"number","nativeSrc":"1188:2:37","nodeType":"YulLiteral","src":"1188:2:37","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1170:6:37","nodeType":"YulIdentifier","src":"1170:6:37"},"nativeSrc":"1170:21:37","nodeType":"YulFunctionCall","src":"1170:21:37"},"nativeSrc":"1170:21:37","nodeType":"YulExpressionStatement","src":"1170:21:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1211:9:37","nodeType":"YulIdentifier","src":"1211:9:37"},{"kind":"number","nativeSrc":"1222:2:37","nodeType":"YulLiteral","src":"1222:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1207:3:37","nodeType":"YulIdentifier","src":"1207:3:37"},"nativeSrc":"1207:18:37","nodeType":"YulFunctionCall","src":"1207:18:37"},{"name":"value1","nativeSrc":"1227:6:37","nodeType":"YulIdentifier","src":"1227:6:37"}],"functionName":{"name":"mstore","nativeSrc":"1200:6:37","nodeType":"YulIdentifier","src":"1200:6:37"},"nativeSrc":"1200:34:37","nodeType":"YulFunctionCall","src":"1200:34:37"},"nativeSrc":"1200:34:37","nodeType":"YulExpressionStatement","src":"1200:34:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1260:9:37","nodeType":"YulIdentifier","src":"1260:9:37"},{"kind":"number","nativeSrc":"1271:2:37","nodeType":"YulLiteral","src":"1271:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1256:3:37","nodeType":"YulIdentifier","src":"1256:3:37"},"nativeSrc":"1256:18:37","nodeType":"YulFunctionCall","src":"1256:18:37"},{"name":"value0","nativeSrc":"1276:6:37","nodeType":"YulIdentifier","src":"1276:6:37"},{"name":"value1","nativeSrc":"1284:6:37","nodeType":"YulIdentifier","src":"1284:6:37"}],"functionName":{"name":"calldatacopy","nativeSrc":"1243:12:37","nodeType":"YulIdentifier","src":"1243:12:37"},"nativeSrc":"1243:48:37","nodeType":"YulFunctionCall","src":"1243:48:37"},"nativeSrc":"1243:48:37","nodeType":"YulExpressionStatement","src":"1243:48:37"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1315:9:37","nodeType":"YulIdentifier","src":"1315:9:37"},{"name":"value1","nativeSrc":"1326:6:37","nodeType":"YulIdentifier","src":"1326:6:37"}],"functionName":{"name":"add","nativeSrc":"1311:3:37","nodeType":"YulIdentifier","src":"1311:3:37"},"nativeSrc":"1311:22:37","nodeType":"YulFunctionCall","src":"1311:22:37"},{"kind":"number","nativeSrc":"1335:2:37","nodeType":"YulLiteral","src":"1335:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1307:3:37","nodeType":"YulIdentifier","src":"1307:3:37"},"nativeSrc":"1307:31:37","nodeType":"YulFunctionCall","src":"1307:31:37"},{"kind":"number","nativeSrc":"1340:1:37","nodeType":"YulLiteral","src":"1340:1:37","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1300:6:37","nodeType":"YulIdentifier","src":"1300:6:37"},"nativeSrc":"1300:42:37","nodeType":"YulFunctionCall","src":"1300:42:37"},"nativeSrc":"1300:42:37","nodeType":"YulExpressionStatement","src":"1300:42:37"},{"nativeSrc":"1351:121:37","nodeType":"YulAssignment","src":"1351:121:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1367:9:37","nodeType":"YulIdentifier","src":"1367:9:37"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1386:6:37","nodeType":"YulIdentifier","src":"1386:6:37"},{"kind":"number","nativeSrc":"1394:2:37","nodeType":"YulLiteral","src":"1394:2:37","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1382:3:37","nodeType":"YulIdentifier","src":"1382:3:37"},"nativeSrc":"1382:15:37","nodeType":"YulFunctionCall","src":"1382:15:37"},{"kind":"number","nativeSrc":"1399:66:37","nodeType":"YulLiteral","src":"1399:66:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1378:3:37","nodeType":"YulIdentifier","src":"1378:3:37"},"nativeSrc":"1378:88:37","nodeType":"YulFunctionCall","src":"1378:88:37"}],"functionName":{"name":"add","nativeSrc":"1363:3:37","nodeType":"YulIdentifier","src":"1363:3:37"},"nativeSrc":"1363:104:37","nodeType":"YulFunctionCall","src":"1363:104:37"},{"kind":"number","nativeSrc":"1469:2:37","nodeType":"YulLiteral","src":"1469:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1359:3:37","nodeType":"YulIdentifier","src":"1359:3:37"},"nativeSrc":"1359:113:37","nodeType":"YulFunctionCall","src":"1359:113:37"},"variableNames":[{"name":"tail","nativeSrc":"1351:4:37","nodeType":"YulIdentifier","src":"1351:4:37"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1031:447:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1121:9:37","nodeType":"YulTypedName","src":"1121:9:37","type":""},{"name":"value1","nativeSrc":"1132:6:37","nodeType":"YulTypedName","src":"1132:6:37","type":""},{"name":"value0","nativeSrc":"1140:6:37","nodeType":"YulTypedName","src":"1140:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1151:4:37","nodeType":"YulTypedName","src":"1151:4:37","type":""}],"src":"1031:447:37"},{"body":{"nativeSrc":"1528:109:37","nodeType":"YulBlock","src":"1528:109:37","statements":[{"body":{"nativeSrc":"1615:16:37","nodeType":"YulBlock","src":"1615:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1624:1:37","nodeType":"YulLiteral","src":"1624:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"1627:1:37","nodeType":"YulLiteral","src":"1627:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1617:6:37","nodeType":"YulIdentifier","src":"1617:6:37"},"nativeSrc":"1617:12:37","nodeType":"YulFunctionCall","src":"1617:12:37"},"nativeSrc":"1617:12:37","nodeType":"YulExpressionStatement","src":"1617:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1551:5:37","nodeType":"YulIdentifier","src":"1551:5:37"},{"arguments":[{"name":"value","nativeSrc":"1562:5:37","nodeType":"YulIdentifier","src":"1562:5:37"},{"kind":"number","nativeSrc":"1569:42:37","nodeType":"YulLiteral","src":"1569:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1558:3:37","nodeType":"YulIdentifier","src":"1558:3:37"},"nativeSrc":"1558:54:37","nodeType":"YulFunctionCall","src":"1558:54:37"}],"functionName":{"name":"eq","nativeSrc":"1548:2:37","nodeType":"YulIdentifier","src":"1548:2:37"},"nativeSrc":"1548:65:37","nodeType":"YulFunctionCall","src":"1548:65:37"}],"functionName":{"name":"iszero","nativeSrc":"1541:6:37","nodeType":"YulIdentifier","src":"1541:6:37"},"nativeSrc":"1541:73:37","nodeType":"YulFunctionCall","src":"1541:73:37"},"nativeSrc":"1538:93:37","nodeType":"YulIf","src":"1538:93:37"}]},"name":"validator_revert_address","nativeSrc":"1483:154:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1517:5:37","nodeType":"YulTypedName","src":"1517:5:37","type":""}],"src":"1483:154:37"},{"body":{"nativeSrc":"1712:177:37","nodeType":"YulBlock","src":"1712:177:37","statements":[{"body":{"nativeSrc":"1758:16:37","nodeType":"YulBlock","src":"1758:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1767:1:37","nodeType":"YulLiteral","src":"1767:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"1770:1:37","nodeType":"YulLiteral","src":"1770:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1760:6:37","nodeType":"YulIdentifier","src":"1760:6:37"},"nativeSrc":"1760:12:37","nodeType":"YulFunctionCall","src":"1760:12:37"},"nativeSrc":"1760:12:37","nodeType":"YulExpressionStatement","src":"1760:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1733:7:37","nodeType":"YulIdentifier","src":"1733:7:37"},{"name":"headStart","nativeSrc":"1742:9:37","nodeType":"YulIdentifier","src":"1742:9:37"}],"functionName":{"name":"sub","nativeSrc":"1729:3:37","nodeType":"YulIdentifier","src":"1729:3:37"},"nativeSrc":"1729:23:37","nodeType":"YulFunctionCall","src":"1729:23:37"},{"kind":"number","nativeSrc":"1754:2:37","nodeType":"YulLiteral","src":"1754:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1725:3:37","nodeType":"YulIdentifier","src":"1725:3:37"},"nativeSrc":"1725:32:37","nodeType":"YulFunctionCall","src":"1725:32:37"},"nativeSrc":"1722:52:37","nodeType":"YulIf","src":"1722:52:37"},{"nativeSrc":"1783:36:37","nodeType":"YulVariableDeclaration","src":"1783:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"1809:9:37","nodeType":"YulIdentifier","src":"1809:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"1796:12:37","nodeType":"YulIdentifier","src":"1796:12:37"},"nativeSrc":"1796:23:37","nodeType":"YulFunctionCall","src":"1796:23:37"},"variables":[{"name":"value","nativeSrc":"1787:5:37","nodeType":"YulTypedName","src":"1787:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1853:5:37","nodeType":"YulIdentifier","src":"1853:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1828:24:37","nodeType":"YulIdentifier","src":"1828:24:37"},"nativeSrc":"1828:31:37","nodeType":"YulFunctionCall","src":"1828:31:37"},"nativeSrc":"1828:31:37","nodeType":"YulExpressionStatement","src":"1828:31:37"},{"nativeSrc":"1868:15:37","nodeType":"YulAssignment","src":"1868:15:37","value":{"name":"value","nativeSrc":"1878:5:37","nodeType":"YulIdentifier","src":"1878:5:37"},"variableNames":[{"name":"value0","nativeSrc":"1868:6:37","nodeType":"YulIdentifier","src":"1868:6:37"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1642:247:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1678:9:37","nodeType":"YulTypedName","src":"1678:9:37","type":""},{"name":"dataEnd","nativeSrc":"1689:7:37","nodeType":"YulTypedName","src":"1689:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1701:6:37","nodeType":"YulTypedName","src":"1701:6:37","type":""}],"src":"1642:247:37"},{"body":{"nativeSrc":"1978:283:37","nodeType":"YulBlock","src":"1978:283:37","statements":[{"body":{"nativeSrc":"2027:16:37","nodeType":"YulBlock","src":"2027:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2036:1:37","nodeType":"YulLiteral","src":"2036:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2039:1:37","nodeType":"YulLiteral","src":"2039:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2029:6:37","nodeType":"YulIdentifier","src":"2029:6:37"},"nativeSrc":"2029:12:37","nodeType":"YulFunctionCall","src":"2029:12:37"},"nativeSrc":"2029:12:37","nodeType":"YulExpressionStatement","src":"2029:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2006:6:37","nodeType":"YulIdentifier","src":"2006:6:37"},{"kind":"number","nativeSrc":"2014:4:37","nodeType":"YulLiteral","src":"2014:4:37","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2002:3:37","nodeType":"YulIdentifier","src":"2002:3:37"},"nativeSrc":"2002:17:37","nodeType":"YulFunctionCall","src":"2002:17:37"},{"name":"end","nativeSrc":"2021:3:37","nodeType":"YulIdentifier","src":"2021:3:37"}],"functionName":{"name":"slt","nativeSrc":"1998:3:37","nodeType":"YulIdentifier","src":"1998:3:37"},"nativeSrc":"1998:27:37","nodeType":"YulFunctionCall","src":"1998:27:37"}],"functionName":{"name":"iszero","nativeSrc":"1991:6:37","nodeType":"YulIdentifier","src":"1991:6:37"},"nativeSrc":"1991:35:37","nodeType":"YulFunctionCall","src":"1991:35:37"},"nativeSrc":"1988:55:37","nodeType":"YulIf","src":"1988:55:37"},{"nativeSrc":"2052:30:37","nodeType":"YulAssignment","src":"2052:30:37","value":{"arguments":[{"name":"offset","nativeSrc":"2075:6:37","nodeType":"YulIdentifier","src":"2075:6:37"}],"functionName":{"name":"calldataload","nativeSrc":"2062:12:37","nodeType":"YulIdentifier","src":"2062:12:37"},"nativeSrc":"2062:20:37","nodeType":"YulFunctionCall","src":"2062:20:37"},"variableNames":[{"name":"length","nativeSrc":"2052:6:37","nodeType":"YulIdentifier","src":"2052:6:37"}]},{"body":{"nativeSrc":"2125:16:37","nodeType":"YulBlock","src":"2125:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2134:1:37","nodeType":"YulLiteral","src":"2134:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2137:1:37","nodeType":"YulLiteral","src":"2137:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2127:6:37","nodeType":"YulIdentifier","src":"2127:6:37"},"nativeSrc":"2127:12:37","nodeType":"YulFunctionCall","src":"2127:12:37"},"nativeSrc":"2127:12:37","nodeType":"YulExpressionStatement","src":"2127:12:37"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2097:6:37","nodeType":"YulIdentifier","src":"2097:6:37"},{"kind":"number","nativeSrc":"2105:18:37","nodeType":"YulLiteral","src":"2105:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2094:2:37","nodeType":"YulIdentifier","src":"2094:2:37"},"nativeSrc":"2094:30:37","nodeType":"YulFunctionCall","src":"2094:30:37"},"nativeSrc":"2091:50:37","nodeType":"YulIf","src":"2091:50:37"},{"nativeSrc":"2150:29:37","nodeType":"YulAssignment","src":"2150:29:37","value":{"arguments":[{"name":"offset","nativeSrc":"2166:6:37","nodeType":"YulIdentifier","src":"2166:6:37"},{"kind":"number","nativeSrc":"2174:4:37","nodeType":"YulLiteral","src":"2174:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2162:3:37","nodeType":"YulIdentifier","src":"2162:3:37"},"nativeSrc":"2162:17:37","nodeType":"YulFunctionCall","src":"2162:17:37"},"variableNames":[{"name":"arrayPos","nativeSrc":"2150:8:37","nodeType":"YulIdentifier","src":"2150:8:37"}]},{"body":{"nativeSrc":"2239:16:37","nodeType":"YulBlock","src":"2239:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2248:1:37","nodeType":"YulLiteral","src":"2248:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2251:1:37","nodeType":"YulLiteral","src":"2251:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2241:6:37","nodeType":"YulIdentifier","src":"2241:6:37"},"nativeSrc":"2241:12:37","nodeType":"YulFunctionCall","src":"2241:12:37"},"nativeSrc":"2241:12:37","nodeType":"YulExpressionStatement","src":"2241:12:37"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2202:6:37","nodeType":"YulIdentifier","src":"2202:6:37"},{"arguments":[{"kind":"number","nativeSrc":"2214:1:37","nodeType":"YulLiteral","src":"2214:1:37","type":"","value":"5"},{"name":"length","nativeSrc":"2217:6:37","nodeType":"YulIdentifier","src":"2217:6:37"}],"functionName":{"name":"shl","nativeSrc":"2210:3:37","nodeType":"YulIdentifier","src":"2210:3:37"},"nativeSrc":"2210:14:37","nodeType":"YulFunctionCall","src":"2210:14:37"}],"functionName":{"name":"add","nativeSrc":"2198:3:37","nodeType":"YulIdentifier","src":"2198:3:37"},"nativeSrc":"2198:27:37","nodeType":"YulFunctionCall","src":"2198:27:37"},{"kind":"number","nativeSrc":"2227:4:37","nodeType":"YulLiteral","src":"2227:4:37","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2194:3:37","nodeType":"YulIdentifier","src":"2194:3:37"},"nativeSrc":"2194:38:37","nodeType":"YulFunctionCall","src":"2194:38:37"},{"name":"end","nativeSrc":"2234:3:37","nodeType":"YulIdentifier","src":"2234:3:37"}],"functionName":{"name":"gt","nativeSrc":"2191:2:37","nodeType":"YulIdentifier","src":"2191:2:37"},"nativeSrc":"2191:47:37","nodeType":"YulFunctionCall","src":"2191:47:37"},"nativeSrc":"2188:67:37","nodeType":"YulIf","src":"2188:67:37"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"1894:367:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1941:6:37","nodeType":"YulTypedName","src":"1941:6:37","type":""},{"name":"end","nativeSrc":"1949:3:37","nodeType":"YulTypedName","src":"1949:3:37","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1957:8:37","nodeType":"YulTypedName","src":"1957:8:37","type":""},{"name":"length","nativeSrc":"1967:6:37","nodeType":"YulTypedName","src":"1967:6:37","type":""}],"src":"1894:367:37"},{"body":{"nativeSrc":"2490:890:37","nodeType":"YulBlock","src":"2490:890:37","statements":[{"body":{"nativeSrc":"2536:16:37","nodeType":"YulBlock","src":"2536:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2545:1:37","nodeType":"YulLiteral","src":"2545:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2548:1:37","nodeType":"YulLiteral","src":"2548:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2538:6:37","nodeType":"YulIdentifier","src":"2538:6:37"},"nativeSrc":"2538:12:37","nodeType":"YulFunctionCall","src":"2538:12:37"},"nativeSrc":"2538:12:37","nodeType":"YulExpressionStatement","src":"2538:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2511:7:37","nodeType":"YulIdentifier","src":"2511:7:37"},{"name":"headStart","nativeSrc":"2520:9:37","nodeType":"YulIdentifier","src":"2520:9:37"}],"functionName":{"name":"sub","nativeSrc":"2507:3:37","nodeType":"YulIdentifier","src":"2507:3:37"},"nativeSrc":"2507:23:37","nodeType":"YulFunctionCall","src":"2507:23:37"},{"kind":"number","nativeSrc":"2532:2:37","nodeType":"YulLiteral","src":"2532:2:37","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2503:3:37","nodeType":"YulIdentifier","src":"2503:3:37"},"nativeSrc":"2503:32:37","nodeType":"YulFunctionCall","src":"2503:32:37"},"nativeSrc":"2500:52:37","nodeType":"YulIf","src":"2500:52:37"},{"nativeSrc":"2561:37:37","nodeType":"YulVariableDeclaration","src":"2561:37:37","value":{"arguments":[{"name":"headStart","nativeSrc":"2588:9:37","nodeType":"YulIdentifier","src":"2588:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"2575:12:37","nodeType":"YulIdentifier","src":"2575:12:37"},"nativeSrc":"2575:23:37","nodeType":"YulFunctionCall","src":"2575:23:37"},"variables":[{"name":"offset","nativeSrc":"2565:6:37","nodeType":"YulTypedName","src":"2565:6:37","type":""}]},{"body":{"nativeSrc":"2641:16:37","nodeType":"YulBlock","src":"2641:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2650:1:37","nodeType":"YulLiteral","src":"2650:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2653:1:37","nodeType":"YulLiteral","src":"2653:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2643:6:37","nodeType":"YulIdentifier","src":"2643:6:37"},"nativeSrc":"2643:12:37","nodeType":"YulFunctionCall","src":"2643:12:37"},"nativeSrc":"2643:12:37","nodeType":"YulExpressionStatement","src":"2643:12:37"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2613:6:37","nodeType":"YulIdentifier","src":"2613:6:37"},{"kind":"number","nativeSrc":"2621:18:37","nodeType":"YulLiteral","src":"2621:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2610:2:37","nodeType":"YulIdentifier","src":"2610:2:37"},"nativeSrc":"2610:30:37","nodeType":"YulFunctionCall","src":"2610:30:37"},"nativeSrc":"2607:50:37","nodeType":"YulIf","src":"2607:50:37"},{"nativeSrc":"2666:96:37","nodeType":"YulVariableDeclaration","src":"2666:96:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2734:9:37","nodeType":"YulIdentifier","src":"2734:9:37"},{"name":"offset","nativeSrc":"2745:6:37","nodeType":"YulIdentifier","src":"2745:6:37"}],"functionName":{"name":"add","nativeSrc":"2730:3:37","nodeType":"YulIdentifier","src":"2730:3:37"},"nativeSrc":"2730:22:37","nodeType":"YulFunctionCall","src":"2730:22:37"},{"name":"dataEnd","nativeSrc":"2754:7:37","nodeType":"YulIdentifier","src":"2754:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2692:37:37","nodeType":"YulIdentifier","src":"2692:37:37"},"nativeSrc":"2692:70:37","nodeType":"YulFunctionCall","src":"2692:70:37"},"variables":[{"name":"value0_1","nativeSrc":"2670:8:37","nodeType":"YulTypedName","src":"2670:8:37","type":""},{"name":"value1_1","nativeSrc":"2680:8:37","nodeType":"YulTypedName","src":"2680:8:37","type":""}]},{"nativeSrc":"2771:18:37","nodeType":"YulAssignment","src":"2771:18:37","value":{"name":"value0_1","nativeSrc":"2781:8:37","nodeType":"YulIdentifier","src":"2781:8:37"},"variableNames":[{"name":"value0","nativeSrc":"2771:6:37","nodeType":"YulIdentifier","src":"2771:6:37"}]},{"nativeSrc":"2798:18:37","nodeType":"YulAssignment","src":"2798:18:37","value":{"name":"value1_1","nativeSrc":"2808:8:37","nodeType":"YulIdentifier","src":"2808:8:37"},"variableNames":[{"name":"value1","nativeSrc":"2798:6:37","nodeType":"YulIdentifier","src":"2798:6:37"}]},{"nativeSrc":"2825:48:37","nodeType":"YulVariableDeclaration","src":"2825:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2858:9:37","nodeType":"YulIdentifier","src":"2858:9:37"},{"kind":"number","nativeSrc":"2869:2:37","nodeType":"YulLiteral","src":"2869:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2854:3:37","nodeType":"YulIdentifier","src":"2854:3:37"},"nativeSrc":"2854:18:37","nodeType":"YulFunctionCall","src":"2854:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"2841:12:37","nodeType":"YulIdentifier","src":"2841:12:37"},"nativeSrc":"2841:32:37","nodeType":"YulFunctionCall","src":"2841:32:37"},"variables":[{"name":"offset_1","nativeSrc":"2829:8:37","nodeType":"YulTypedName","src":"2829:8:37","type":""}]},{"body":{"nativeSrc":"2918:16:37","nodeType":"YulBlock","src":"2918:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2927:1:37","nodeType":"YulLiteral","src":"2927:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"2930:1:37","nodeType":"YulLiteral","src":"2930:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2920:6:37","nodeType":"YulIdentifier","src":"2920:6:37"},"nativeSrc":"2920:12:37","nodeType":"YulFunctionCall","src":"2920:12:37"},"nativeSrc":"2920:12:37","nodeType":"YulExpressionStatement","src":"2920:12:37"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2888:8:37","nodeType":"YulIdentifier","src":"2888:8:37"},{"kind":"number","nativeSrc":"2898:18:37","nodeType":"YulLiteral","src":"2898:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2885:2:37","nodeType":"YulIdentifier","src":"2885:2:37"},"nativeSrc":"2885:32:37","nodeType":"YulFunctionCall","src":"2885:32:37"},"nativeSrc":"2882:52:37","nodeType":"YulIf","src":"2882:52:37"},{"nativeSrc":"2943:98:37","nodeType":"YulVariableDeclaration","src":"2943:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3011:9:37","nodeType":"YulIdentifier","src":"3011:9:37"},{"name":"offset_1","nativeSrc":"3022:8:37","nodeType":"YulIdentifier","src":"3022:8:37"}],"functionName":{"name":"add","nativeSrc":"3007:3:37","nodeType":"YulIdentifier","src":"3007:3:37"},"nativeSrc":"3007:24:37","nodeType":"YulFunctionCall","src":"3007:24:37"},{"name":"dataEnd","nativeSrc":"3033:7:37","nodeType":"YulIdentifier","src":"3033:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"2969:37:37","nodeType":"YulIdentifier","src":"2969:37:37"},"nativeSrc":"2969:72:37","nodeType":"YulFunctionCall","src":"2969:72:37"},"variables":[{"name":"value2_1","nativeSrc":"2947:8:37","nodeType":"YulTypedName","src":"2947:8:37","type":""},{"name":"value3_1","nativeSrc":"2957:8:37","nodeType":"YulTypedName","src":"2957:8:37","type":""}]},{"nativeSrc":"3050:18:37","nodeType":"YulAssignment","src":"3050:18:37","value":{"name":"value2_1","nativeSrc":"3060:8:37","nodeType":"YulIdentifier","src":"3060:8:37"},"variableNames":[{"name":"value2","nativeSrc":"3050:6:37","nodeType":"YulIdentifier","src":"3050:6:37"}]},{"nativeSrc":"3077:18:37","nodeType":"YulAssignment","src":"3077:18:37","value":{"name":"value3_1","nativeSrc":"3087:8:37","nodeType":"YulIdentifier","src":"3087:8:37"},"variableNames":[{"name":"value3","nativeSrc":"3077:6:37","nodeType":"YulIdentifier","src":"3077:6:37"}]},{"nativeSrc":"3104:48:37","nodeType":"YulVariableDeclaration","src":"3104:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3137:9:37","nodeType":"YulIdentifier","src":"3137:9:37"},{"kind":"number","nativeSrc":"3148:2:37","nodeType":"YulLiteral","src":"3148:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3133:3:37","nodeType":"YulIdentifier","src":"3133:3:37"},"nativeSrc":"3133:18:37","nodeType":"YulFunctionCall","src":"3133:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"3120:12:37","nodeType":"YulIdentifier","src":"3120:12:37"},"nativeSrc":"3120:32:37","nodeType":"YulFunctionCall","src":"3120:32:37"},"variables":[{"name":"offset_2","nativeSrc":"3108:8:37","nodeType":"YulTypedName","src":"3108:8:37","type":""}]},{"body":{"nativeSrc":"3197:16:37","nodeType":"YulBlock","src":"3197:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3206:1:37","nodeType":"YulLiteral","src":"3206:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"3209:1:37","nodeType":"YulLiteral","src":"3209:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3199:6:37","nodeType":"YulIdentifier","src":"3199:6:37"},"nativeSrc":"3199:12:37","nodeType":"YulFunctionCall","src":"3199:12:37"},"nativeSrc":"3199:12:37","nodeType":"YulExpressionStatement","src":"3199:12:37"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"3167:8:37","nodeType":"YulIdentifier","src":"3167:8:37"},{"kind":"number","nativeSrc":"3177:18:37","nodeType":"YulLiteral","src":"3177:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3164:2:37","nodeType":"YulIdentifier","src":"3164:2:37"},"nativeSrc":"3164:32:37","nodeType":"YulFunctionCall","src":"3164:32:37"},"nativeSrc":"3161:52:37","nodeType":"YulIf","src":"3161:52:37"},{"nativeSrc":"3222:98:37","nodeType":"YulVariableDeclaration","src":"3222:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3290:9:37","nodeType":"YulIdentifier","src":"3290:9:37"},{"name":"offset_2","nativeSrc":"3301:8:37","nodeType":"YulIdentifier","src":"3301:8:37"}],"functionName":{"name":"add","nativeSrc":"3286:3:37","nodeType":"YulIdentifier","src":"3286:3:37"},"nativeSrc":"3286:24:37","nodeType":"YulFunctionCall","src":"3286:24:37"},{"name":"dataEnd","nativeSrc":"3312:7:37","nodeType":"YulIdentifier","src":"3312:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3248:37:37","nodeType":"YulIdentifier","src":"3248:37:37"},"nativeSrc":"3248:72:37","nodeType":"YulFunctionCall","src":"3248:72:37"},"variables":[{"name":"value4_1","nativeSrc":"3226:8:37","nodeType":"YulTypedName","src":"3226:8:37","type":""},{"name":"value5_1","nativeSrc":"3236:8:37","nodeType":"YulTypedName","src":"3236:8:37","type":""}]},{"nativeSrc":"3329:18:37","nodeType":"YulAssignment","src":"3329:18:37","value":{"name":"value4_1","nativeSrc":"3339:8:37","nodeType":"YulIdentifier","src":"3339:8:37"},"variableNames":[{"name":"value4","nativeSrc":"3329:6:37","nodeType":"YulIdentifier","src":"3329:6:37"}]},{"nativeSrc":"3356:18:37","nodeType":"YulAssignment","src":"3356:18:37","value":{"name":"value5_1","nativeSrc":"3366:8:37","nodeType":"YulIdentifier","src":"3366:8:37"},"variableNames":[{"name":"value5","nativeSrc":"3356:6:37","nodeType":"YulIdentifier","src":"3356:6:37"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"2266:1114:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2416:9:37","nodeType":"YulTypedName","src":"2416:9:37","type":""},{"name":"dataEnd","nativeSrc":"2427:7:37","nodeType":"YulTypedName","src":"2427:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2439:6:37","nodeType":"YulTypedName","src":"2439:6:37","type":""},{"name":"value1","nativeSrc":"2447:6:37","nodeType":"YulTypedName","src":"2447:6:37","type":""},{"name":"value2","nativeSrc":"2455:6:37","nodeType":"YulTypedName","src":"2455:6:37","type":""},{"name":"value3","nativeSrc":"2463:6:37","nodeType":"YulTypedName","src":"2463:6:37","type":""},{"name":"value4","nativeSrc":"2471:6:37","nodeType":"YulTypedName","src":"2471:6:37","type":""},{"name":"value5","nativeSrc":"2479:6:37","nodeType":"YulTypedName","src":"2479:6:37","type":""}],"src":"2266:1114:37"},{"body":{"nativeSrc":"3610:890:37","nodeType":"YulBlock","src":"3610:890:37","statements":[{"body":{"nativeSrc":"3656:16:37","nodeType":"YulBlock","src":"3656:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3665:1:37","nodeType":"YulLiteral","src":"3665:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"3668:1:37","nodeType":"YulLiteral","src":"3668:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3658:6:37","nodeType":"YulIdentifier","src":"3658:6:37"},"nativeSrc":"3658:12:37","nodeType":"YulFunctionCall","src":"3658:12:37"},"nativeSrc":"3658:12:37","nodeType":"YulExpressionStatement","src":"3658:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3631:7:37","nodeType":"YulIdentifier","src":"3631:7:37"},{"name":"headStart","nativeSrc":"3640:9:37","nodeType":"YulIdentifier","src":"3640:9:37"}],"functionName":{"name":"sub","nativeSrc":"3627:3:37","nodeType":"YulIdentifier","src":"3627:3:37"},"nativeSrc":"3627:23:37","nodeType":"YulFunctionCall","src":"3627:23:37"},{"kind":"number","nativeSrc":"3652:2:37","nodeType":"YulLiteral","src":"3652:2:37","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3623:3:37","nodeType":"YulIdentifier","src":"3623:3:37"},"nativeSrc":"3623:32:37","nodeType":"YulFunctionCall","src":"3623:32:37"},"nativeSrc":"3620:52:37","nodeType":"YulIf","src":"3620:52:37"},{"nativeSrc":"3681:37:37","nodeType":"YulVariableDeclaration","src":"3681:37:37","value":{"arguments":[{"name":"headStart","nativeSrc":"3708:9:37","nodeType":"YulIdentifier","src":"3708:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"3695:12:37","nodeType":"YulIdentifier","src":"3695:12:37"},"nativeSrc":"3695:23:37","nodeType":"YulFunctionCall","src":"3695:23:37"},"variables":[{"name":"offset","nativeSrc":"3685:6:37","nodeType":"YulTypedName","src":"3685:6:37","type":""}]},{"body":{"nativeSrc":"3761:16:37","nodeType":"YulBlock","src":"3761:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3770:1:37","nodeType":"YulLiteral","src":"3770:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"3773:1:37","nodeType":"YulLiteral","src":"3773:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3763:6:37","nodeType":"YulIdentifier","src":"3763:6:37"},"nativeSrc":"3763:12:37","nodeType":"YulFunctionCall","src":"3763:12:37"},"nativeSrc":"3763:12:37","nodeType":"YulExpressionStatement","src":"3763:12:37"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3733:6:37","nodeType":"YulIdentifier","src":"3733:6:37"},{"kind":"number","nativeSrc":"3741:18:37","nodeType":"YulLiteral","src":"3741:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3730:2:37","nodeType":"YulIdentifier","src":"3730:2:37"},"nativeSrc":"3730:30:37","nodeType":"YulFunctionCall","src":"3730:30:37"},"nativeSrc":"3727:50:37","nodeType":"YulIf","src":"3727:50:37"},{"nativeSrc":"3786:96:37","nodeType":"YulVariableDeclaration","src":"3786:96:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3854:9:37","nodeType":"YulIdentifier","src":"3854:9:37"},{"name":"offset","nativeSrc":"3865:6:37","nodeType":"YulIdentifier","src":"3865:6:37"}],"functionName":{"name":"add","nativeSrc":"3850:3:37","nodeType":"YulIdentifier","src":"3850:3:37"},"nativeSrc":"3850:22:37","nodeType":"YulFunctionCall","src":"3850:22:37"},{"name":"dataEnd","nativeSrc":"3874:7:37","nodeType":"YulIdentifier","src":"3874:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3812:37:37","nodeType":"YulIdentifier","src":"3812:37:37"},"nativeSrc":"3812:70:37","nodeType":"YulFunctionCall","src":"3812:70:37"},"variables":[{"name":"value0_1","nativeSrc":"3790:8:37","nodeType":"YulTypedName","src":"3790:8:37","type":""},{"name":"value1_1","nativeSrc":"3800:8:37","nodeType":"YulTypedName","src":"3800:8:37","type":""}]},{"nativeSrc":"3891:18:37","nodeType":"YulAssignment","src":"3891:18:37","value":{"name":"value0_1","nativeSrc":"3901:8:37","nodeType":"YulIdentifier","src":"3901:8:37"},"variableNames":[{"name":"value0","nativeSrc":"3891:6:37","nodeType":"YulIdentifier","src":"3891:6:37"}]},{"nativeSrc":"3918:18:37","nodeType":"YulAssignment","src":"3918:18:37","value":{"name":"value1_1","nativeSrc":"3928:8:37","nodeType":"YulIdentifier","src":"3928:8:37"},"variableNames":[{"name":"value1","nativeSrc":"3918:6:37","nodeType":"YulIdentifier","src":"3918:6:37"}]},{"nativeSrc":"3945:48:37","nodeType":"YulVariableDeclaration","src":"3945:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3978:9:37","nodeType":"YulIdentifier","src":"3978:9:37"},{"kind":"number","nativeSrc":"3989:2:37","nodeType":"YulLiteral","src":"3989:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3974:3:37","nodeType":"YulIdentifier","src":"3974:3:37"},"nativeSrc":"3974:18:37","nodeType":"YulFunctionCall","src":"3974:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"3961:12:37","nodeType":"YulIdentifier","src":"3961:12:37"},"nativeSrc":"3961:32:37","nodeType":"YulFunctionCall","src":"3961:32:37"},"variables":[{"name":"offset_1","nativeSrc":"3949:8:37","nodeType":"YulTypedName","src":"3949:8:37","type":""}]},{"body":{"nativeSrc":"4038:16:37","nodeType":"YulBlock","src":"4038:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4047:1:37","nodeType":"YulLiteral","src":"4047:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4050:1:37","nodeType":"YulLiteral","src":"4050:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4040:6:37","nodeType":"YulIdentifier","src":"4040:6:37"},"nativeSrc":"4040:12:37","nodeType":"YulFunctionCall","src":"4040:12:37"},"nativeSrc":"4040:12:37","nodeType":"YulExpressionStatement","src":"4040:12:37"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4008:8:37","nodeType":"YulIdentifier","src":"4008:8:37"},{"kind":"number","nativeSrc":"4018:18:37","nodeType":"YulLiteral","src":"4018:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4005:2:37","nodeType":"YulIdentifier","src":"4005:2:37"},"nativeSrc":"4005:32:37","nodeType":"YulFunctionCall","src":"4005:32:37"},"nativeSrc":"4002:52:37","nodeType":"YulIf","src":"4002:52:37"},{"nativeSrc":"4063:98:37","nodeType":"YulVariableDeclaration","src":"4063:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4131:9:37","nodeType":"YulIdentifier","src":"4131:9:37"},{"name":"offset_1","nativeSrc":"4142:8:37","nodeType":"YulIdentifier","src":"4142:8:37"}],"functionName":{"name":"add","nativeSrc":"4127:3:37","nodeType":"YulIdentifier","src":"4127:3:37"},"nativeSrc":"4127:24:37","nodeType":"YulFunctionCall","src":"4127:24:37"},{"name":"dataEnd","nativeSrc":"4153:7:37","nodeType":"YulIdentifier","src":"4153:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4089:37:37","nodeType":"YulIdentifier","src":"4089:37:37"},"nativeSrc":"4089:72:37","nodeType":"YulFunctionCall","src":"4089:72:37"},"variables":[{"name":"value2_1","nativeSrc":"4067:8:37","nodeType":"YulTypedName","src":"4067:8:37","type":""},{"name":"value3_1","nativeSrc":"4077:8:37","nodeType":"YulTypedName","src":"4077:8:37","type":""}]},{"nativeSrc":"4170:18:37","nodeType":"YulAssignment","src":"4170:18:37","value":{"name":"value2_1","nativeSrc":"4180:8:37","nodeType":"YulIdentifier","src":"4180:8:37"},"variableNames":[{"name":"value2","nativeSrc":"4170:6:37","nodeType":"YulIdentifier","src":"4170:6:37"}]},{"nativeSrc":"4197:18:37","nodeType":"YulAssignment","src":"4197:18:37","value":{"name":"value3_1","nativeSrc":"4207:8:37","nodeType":"YulIdentifier","src":"4207:8:37"},"variableNames":[{"name":"value3","nativeSrc":"4197:6:37","nodeType":"YulIdentifier","src":"4197:6:37"}]},{"nativeSrc":"4224:48:37","nodeType":"YulVariableDeclaration","src":"4224:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4257:9:37","nodeType":"YulIdentifier","src":"4257:9:37"},{"kind":"number","nativeSrc":"4268:2:37","nodeType":"YulLiteral","src":"4268:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4253:3:37","nodeType":"YulIdentifier","src":"4253:3:37"},"nativeSrc":"4253:18:37","nodeType":"YulFunctionCall","src":"4253:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"4240:12:37","nodeType":"YulIdentifier","src":"4240:12:37"},"nativeSrc":"4240:32:37","nodeType":"YulFunctionCall","src":"4240:32:37"},"variables":[{"name":"offset_2","nativeSrc":"4228:8:37","nodeType":"YulTypedName","src":"4228:8:37","type":""}]},{"body":{"nativeSrc":"4317:16:37","nodeType":"YulBlock","src":"4317:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4326:1:37","nodeType":"YulLiteral","src":"4326:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4329:1:37","nodeType":"YulLiteral","src":"4329:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4319:6:37","nodeType":"YulIdentifier","src":"4319:6:37"},"nativeSrc":"4319:12:37","nodeType":"YulFunctionCall","src":"4319:12:37"},"nativeSrc":"4319:12:37","nodeType":"YulExpressionStatement","src":"4319:12:37"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4287:8:37","nodeType":"YulIdentifier","src":"4287:8:37"},{"kind":"number","nativeSrc":"4297:18:37","nodeType":"YulLiteral","src":"4297:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4284:2:37","nodeType":"YulIdentifier","src":"4284:2:37"},"nativeSrc":"4284:32:37","nodeType":"YulFunctionCall","src":"4284:32:37"},"nativeSrc":"4281:52:37","nodeType":"YulIf","src":"4281:52:37"},{"nativeSrc":"4342:98:37","nodeType":"YulVariableDeclaration","src":"4342:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4410:9:37","nodeType":"YulIdentifier","src":"4410:9:37"},{"name":"offset_2","nativeSrc":"4421:8:37","nodeType":"YulIdentifier","src":"4421:8:37"}],"functionName":{"name":"add","nativeSrc":"4406:3:37","nodeType":"YulIdentifier","src":"4406:3:37"},"nativeSrc":"4406:24:37","nodeType":"YulFunctionCall","src":"4406:24:37"},{"name":"dataEnd","nativeSrc":"4432:7:37","nodeType":"YulIdentifier","src":"4432:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4368:37:37","nodeType":"YulIdentifier","src":"4368:37:37"},"nativeSrc":"4368:72:37","nodeType":"YulFunctionCall","src":"4368:72:37"},"variables":[{"name":"value4_1","nativeSrc":"4346:8:37","nodeType":"YulTypedName","src":"4346:8:37","type":""},{"name":"value5_1","nativeSrc":"4356:8:37","nodeType":"YulTypedName","src":"4356:8:37","type":""}]},{"nativeSrc":"4449:18:37","nodeType":"YulAssignment","src":"4449:18:37","value":{"name":"value4_1","nativeSrc":"4459:8:37","nodeType":"YulIdentifier","src":"4459:8:37"},"variableNames":[{"name":"value4","nativeSrc":"4449:6:37","nodeType":"YulIdentifier","src":"4449:6:37"}]},{"nativeSrc":"4476:18:37","nodeType":"YulAssignment","src":"4476:18:37","value":{"name":"value5_1","nativeSrc":"4486:8:37","nodeType":"YulIdentifier","src":"4486:8:37"},"variableNames":[{"name":"value5","nativeSrc":"4476:6:37","nodeType":"YulIdentifier","src":"4476:6:37"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"3385:1115:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3536:9:37","nodeType":"YulTypedName","src":"3536:9:37","type":""},{"name":"dataEnd","nativeSrc":"3547:7:37","nodeType":"YulTypedName","src":"3547:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3559:6:37","nodeType":"YulTypedName","src":"3559:6:37","type":""},{"name":"value1","nativeSrc":"3567:6:37","nodeType":"YulTypedName","src":"3567:6:37","type":""},{"name":"value2","nativeSrc":"3575:6:37","nodeType":"YulTypedName","src":"3575:6:37","type":""},{"name":"value3","nativeSrc":"3583:6:37","nodeType":"YulTypedName","src":"3583:6:37","type":""},{"name":"value4","nativeSrc":"3591:6:37","nodeType":"YulTypedName","src":"3591:6:37","type":""},{"name":"value5","nativeSrc":"3599:6:37","nodeType":"YulTypedName","src":"3599:6:37","type":""}],"src":"3385:1115:37"},{"body":{"nativeSrc":"4670:611:37","nodeType":"YulBlock","src":"4670:611:37","statements":[{"body":{"nativeSrc":"4716:16:37","nodeType":"YulBlock","src":"4716:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4725:1:37","nodeType":"YulLiteral","src":"4725:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4728:1:37","nodeType":"YulLiteral","src":"4728:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4718:6:37","nodeType":"YulIdentifier","src":"4718:6:37"},"nativeSrc":"4718:12:37","nodeType":"YulFunctionCall","src":"4718:12:37"},"nativeSrc":"4718:12:37","nodeType":"YulExpressionStatement","src":"4718:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4691:7:37","nodeType":"YulIdentifier","src":"4691:7:37"},{"name":"headStart","nativeSrc":"4700:9:37","nodeType":"YulIdentifier","src":"4700:9:37"}],"functionName":{"name":"sub","nativeSrc":"4687:3:37","nodeType":"YulIdentifier","src":"4687:3:37"},"nativeSrc":"4687:23:37","nodeType":"YulFunctionCall","src":"4687:23:37"},{"kind":"number","nativeSrc":"4712:2:37","nodeType":"YulLiteral","src":"4712:2:37","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4683:3:37","nodeType":"YulIdentifier","src":"4683:3:37"},"nativeSrc":"4683:32:37","nodeType":"YulFunctionCall","src":"4683:32:37"},"nativeSrc":"4680:52:37","nodeType":"YulIf","src":"4680:52:37"},{"nativeSrc":"4741:37:37","nodeType":"YulVariableDeclaration","src":"4741:37:37","value":{"arguments":[{"name":"headStart","nativeSrc":"4768:9:37","nodeType":"YulIdentifier","src":"4768:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"4755:12:37","nodeType":"YulIdentifier","src":"4755:12:37"},"nativeSrc":"4755:23:37","nodeType":"YulFunctionCall","src":"4755:23:37"},"variables":[{"name":"offset","nativeSrc":"4745:6:37","nodeType":"YulTypedName","src":"4745:6:37","type":""}]},{"body":{"nativeSrc":"4821:16:37","nodeType":"YulBlock","src":"4821:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4830:1:37","nodeType":"YulLiteral","src":"4830:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"4833:1:37","nodeType":"YulLiteral","src":"4833:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4823:6:37","nodeType":"YulIdentifier","src":"4823:6:37"},"nativeSrc":"4823:12:37","nodeType":"YulFunctionCall","src":"4823:12:37"},"nativeSrc":"4823:12:37","nodeType":"YulExpressionStatement","src":"4823:12:37"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4793:6:37","nodeType":"YulIdentifier","src":"4793:6:37"},{"kind":"number","nativeSrc":"4801:18:37","nodeType":"YulLiteral","src":"4801:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4790:2:37","nodeType":"YulIdentifier","src":"4790:2:37"},"nativeSrc":"4790:30:37","nodeType":"YulFunctionCall","src":"4790:30:37"},"nativeSrc":"4787:50:37","nodeType":"YulIf","src":"4787:50:37"},{"nativeSrc":"4846:96:37","nodeType":"YulVariableDeclaration","src":"4846:96:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4914:9:37","nodeType":"YulIdentifier","src":"4914:9:37"},{"name":"offset","nativeSrc":"4925:6:37","nodeType":"YulIdentifier","src":"4925:6:37"}],"functionName":{"name":"add","nativeSrc":"4910:3:37","nodeType":"YulIdentifier","src":"4910:3:37"},"nativeSrc":"4910:22:37","nodeType":"YulFunctionCall","src":"4910:22:37"},{"name":"dataEnd","nativeSrc":"4934:7:37","nodeType":"YulIdentifier","src":"4934:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4872:37:37","nodeType":"YulIdentifier","src":"4872:37:37"},"nativeSrc":"4872:70:37","nodeType":"YulFunctionCall","src":"4872:70:37"},"variables":[{"name":"value0_1","nativeSrc":"4850:8:37","nodeType":"YulTypedName","src":"4850:8:37","type":""},{"name":"value1_1","nativeSrc":"4860:8:37","nodeType":"YulTypedName","src":"4860:8:37","type":""}]},{"nativeSrc":"4951:18:37","nodeType":"YulAssignment","src":"4951:18:37","value":{"name":"value0_1","nativeSrc":"4961:8:37","nodeType":"YulIdentifier","src":"4961:8:37"},"variableNames":[{"name":"value0","nativeSrc":"4951:6:37","nodeType":"YulIdentifier","src":"4951:6:37"}]},{"nativeSrc":"4978:18:37","nodeType":"YulAssignment","src":"4978:18:37","value":{"name":"value1_1","nativeSrc":"4988:8:37","nodeType":"YulIdentifier","src":"4988:8:37"},"variableNames":[{"name":"value1","nativeSrc":"4978:6:37","nodeType":"YulIdentifier","src":"4978:6:37"}]},{"nativeSrc":"5005:48:37","nodeType":"YulVariableDeclaration","src":"5005:48:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5038:9:37","nodeType":"YulIdentifier","src":"5038:9:37"},{"kind":"number","nativeSrc":"5049:2:37","nodeType":"YulLiteral","src":"5049:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5034:3:37","nodeType":"YulIdentifier","src":"5034:3:37"},"nativeSrc":"5034:18:37","nodeType":"YulFunctionCall","src":"5034:18:37"}],"functionName":{"name":"calldataload","nativeSrc":"5021:12:37","nodeType":"YulIdentifier","src":"5021:12:37"},"nativeSrc":"5021:32:37","nodeType":"YulFunctionCall","src":"5021:32:37"},"variables":[{"name":"offset_1","nativeSrc":"5009:8:37","nodeType":"YulTypedName","src":"5009:8:37","type":""}]},{"body":{"nativeSrc":"5098:16:37","nodeType":"YulBlock","src":"5098:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5107:1:37","nodeType":"YulLiteral","src":"5107:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5110:1:37","nodeType":"YulLiteral","src":"5110:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5100:6:37","nodeType":"YulIdentifier","src":"5100:6:37"},"nativeSrc":"5100:12:37","nodeType":"YulFunctionCall","src":"5100:12:37"},"nativeSrc":"5100:12:37","nodeType":"YulExpressionStatement","src":"5100:12:37"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5068:8:37","nodeType":"YulIdentifier","src":"5068:8:37"},{"kind":"number","nativeSrc":"5078:18:37","nodeType":"YulLiteral","src":"5078:18:37","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5065:2:37","nodeType":"YulIdentifier","src":"5065:2:37"},"nativeSrc":"5065:32:37","nodeType":"YulFunctionCall","src":"5065:32:37"},"nativeSrc":"5062:52:37","nodeType":"YulIf","src":"5062:52:37"},{"nativeSrc":"5123:98:37","nodeType":"YulVariableDeclaration","src":"5123:98:37","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5191:9:37","nodeType":"YulIdentifier","src":"5191:9:37"},{"name":"offset_1","nativeSrc":"5202:8:37","nodeType":"YulIdentifier","src":"5202:8:37"}],"functionName":{"name":"add","nativeSrc":"5187:3:37","nodeType":"YulIdentifier","src":"5187:3:37"},"nativeSrc":"5187:24:37","nodeType":"YulFunctionCall","src":"5187:24:37"},{"name":"dataEnd","nativeSrc":"5213:7:37","nodeType":"YulIdentifier","src":"5213:7:37"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5149:37:37","nodeType":"YulIdentifier","src":"5149:37:37"},"nativeSrc":"5149:72:37","nodeType":"YulFunctionCall","src":"5149:72:37"},"variables":[{"name":"value2_1","nativeSrc":"5127:8:37","nodeType":"YulTypedName","src":"5127:8:37","type":""},{"name":"value3_1","nativeSrc":"5137:8:37","nodeType":"YulTypedName","src":"5137:8:37","type":""}]},{"nativeSrc":"5230:18:37","nodeType":"YulAssignment","src":"5230:18:37","value":{"name":"value2_1","nativeSrc":"5240:8:37","nodeType":"YulIdentifier","src":"5240:8:37"},"variableNames":[{"name":"value2","nativeSrc":"5230:6:37","nodeType":"YulIdentifier","src":"5230:6:37"}]},{"nativeSrc":"5257:18:37","nodeType":"YulAssignment","src":"5257:18:37","value":{"name":"value3_1","nativeSrc":"5267:8:37","nodeType":"YulIdentifier","src":"5267:8:37"},"variableNames":[{"name":"value3","nativeSrc":"5257:6:37","nodeType":"YulIdentifier","src":"5257:6:37"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4505:776:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4612:9:37","nodeType":"YulTypedName","src":"4612:9:37","type":""},{"name":"dataEnd","nativeSrc":"4623:7:37","nodeType":"YulTypedName","src":"4623:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4635:6:37","nodeType":"YulTypedName","src":"4635:6:37","type":""},{"name":"value1","nativeSrc":"4643:6:37","nodeType":"YulTypedName","src":"4643:6:37","type":""},{"name":"value2","nativeSrc":"4651:6:37","nodeType":"YulTypedName","src":"4651:6:37","type":""},{"name":"value3","nativeSrc":"4659:6:37","nodeType":"YulTypedName","src":"4659:6:37","type":""}],"src":"4505:776:37"},{"body":{"nativeSrc":"5335:233:37","nodeType":"YulBlock","src":"5335:233:37","statements":[{"nativeSrc":"5345:17:37","nodeType":"YulAssignment","src":"5345:17:37","value":{"arguments":[{"name":"x","nativeSrc":"5357:1:37","nodeType":"YulIdentifier","src":"5357:1:37"},{"name":"y","nativeSrc":"5360:1:37","nodeType":"YulIdentifier","src":"5360:1:37"}],"functionName":{"name":"sub","nativeSrc":"5353:3:37","nodeType":"YulIdentifier","src":"5353:3:37"},"nativeSrc":"5353:9:37","nodeType":"YulFunctionCall","src":"5353:9:37"},"variableNames":[{"name":"diff","nativeSrc":"5345:4:37","nodeType":"YulIdentifier","src":"5345:4:37"}]},{"body":{"nativeSrc":"5394:168:37","nodeType":"YulBlock","src":"5394:168:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5415:1:37","nodeType":"YulLiteral","src":"5415:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5418:77:37","nodeType":"YulLiteral","src":"5418:77:37","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5408:6:37","nodeType":"YulIdentifier","src":"5408:6:37"},"nativeSrc":"5408:88:37","nodeType":"YulFunctionCall","src":"5408:88:37"},"nativeSrc":"5408:88:37","nodeType":"YulExpressionStatement","src":"5408:88:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5516:1:37","nodeType":"YulLiteral","src":"5516:1:37","type":"","value":"4"},{"kind":"number","nativeSrc":"5519:4:37","nodeType":"YulLiteral","src":"5519:4:37","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5509:6:37","nodeType":"YulIdentifier","src":"5509:6:37"},"nativeSrc":"5509:15:37","nodeType":"YulFunctionCall","src":"5509:15:37"},"nativeSrc":"5509:15:37","nodeType":"YulExpressionStatement","src":"5509:15:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5544:1:37","nodeType":"YulLiteral","src":"5544:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5547:4:37","nodeType":"YulLiteral","src":"5547:4:37","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5537:6:37","nodeType":"YulIdentifier","src":"5537:6:37"},"nativeSrc":"5537:15:37","nodeType":"YulFunctionCall","src":"5537:15:37"},"nativeSrc":"5537:15:37","nodeType":"YulExpressionStatement","src":"5537:15:37"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5377:4:37","nodeType":"YulIdentifier","src":"5377:4:37"},{"name":"x","nativeSrc":"5383:1:37","nodeType":"YulIdentifier","src":"5383:1:37"}],"functionName":{"name":"gt","nativeSrc":"5374:2:37","nodeType":"YulIdentifier","src":"5374:2:37"},"nativeSrc":"5374:11:37","nodeType":"YulFunctionCall","src":"5374:11:37"},"nativeSrc":"5371:191:37","nodeType":"YulIf","src":"5371:191:37"}]},"name":"checked_sub_t_uint256","nativeSrc":"5286:282:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5317:1:37","nodeType":"YulTypedName","src":"5317:1:37","type":""},{"name":"y","nativeSrc":"5320:1:37","nodeType":"YulTypedName","src":"5320:1:37","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5326:4:37","nodeType":"YulTypedName","src":"5326:4:37","type":""}],"src":"5286:282:37"},{"body":{"nativeSrc":"5605:152:37","nodeType":"YulBlock","src":"5605:152:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5622:1:37","nodeType":"YulLiteral","src":"5622:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5625:77:37","nodeType":"YulLiteral","src":"5625:77:37","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5615:6:37","nodeType":"YulIdentifier","src":"5615:6:37"},"nativeSrc":"5615:88:37","nodeType":"YulFunctionCall","src":"5615:88:37"},"nativeSrc":"5615:88:37","nodeType":"YulExpressionStatement","src":"5615:88:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5719:1:37","nodeType":"YulLiteral","src":"5719:1:37","type":"","value":"4"},{"kind":"number","nativeSrc":"5722:4:37","nodeType":"YulLiteral","src":"5722:4:37","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5712:6:37","nodeType":"YulIdentifier","src":"5712:6:37"},"nativeSrc":"5712:15:37","nodeType":"YulFunctionCall","src":"5712:15:37"},"nativeSrc":"5712:15:37","nodeType":"YulExpressionStatement","src":"5712:15:37"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5743:1:37","nodeType":"YulLiteral","src":"5743:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5746:4:37","nodeType":"YulLiteral","src":"5746:4:37","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5736:6:37","nodeType":"YulIdentifier","src":"5736:6:37"},"nativeSrc":"5736:15:37","nodeType":"YulFunctionCall","src":"5736:15:37"},"nativeSrc":"5736:15:37","nodeType":"YulExpressionStatement","src":"5736:15:37"}]},"name":"panic_error_0x32","nativeSrc":"5573:184:37","nodeType":"YulFunctionDefinition","src":"5573:184:37"},{"body":{"nativeSrc":"5847:177:37","nodeType":"YulBlock","src":"5847:177:37","statements":[{"body":{"nativeSrc":"5893:16:37","nodeType":"YulBlock","src":"5893:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5902:1:37","nodeType":"YulLiteral","src":"5902:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"5905:1:37","nodeType":"YulLiteral","src":"5905:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5895:6:37","nodeType":"YulIdentifier","src":"5895:6:37"},"nativeSrc":"5895:12:37","nodeType":"YulFunctionCall","src":"5895:12:37"},"nativeSrc":"5895:12:37","nodeType":"YulExpressionStatement","src":"5895:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5868:7:37","nodeType":"YulIdentifier","src":"5868:7:37"},{"name":"headStart","nativeSrc":"5877:9:37","nodeType":"YulIdentifier","src":"5877:9:37"}],"functionName":{"name":"sub","nativeSrc":"5864:3:37","nodeType":"YulIdentifier","src":"5864:3:37"},"nativeSrc":"5864:23:37","nodeType":"YulFunctionCall","src":"5864:23:37"},{"kind":"number","nativeSrc":"5889:2:37","nodeType":"YulLiteral","src":"5889:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5860:3:37","nodeType":"YulIdentifier","src":"5860:3:37"},"nativeSrc":"5860:32:37","nodeType":"YulFunctionCall","src":"5860:32:37"},"nativeSrc":"5857:52:37","nodeType":"YulIf","src":"5857:52:37"},{"nativeSrc":"5918:36:37","nodeType":"YulVariableDeclaration","src":"5918:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"5944:9:37","nodeType":"YulIdentifier","src":"5944:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"5931:12:37","nodeType":"YulIdentifier","src":"5931:12:37"},"nativeSrc":"5931:23:37","nodeType":"YulFunctionCall","src":"5931:23:37"},"variables":[{"name":"value","nativeSrc":"5922:5:37","nodeType":"YulTypedName","src":"5922:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5988:5:37","nodeType":"YulIdentifier","src":"5988:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5963:24:37","nodeType":"YulIdentifier","src":"5963:24:37"},"nativeSrc":"5963:31:37","nodeType":"YulFunctionCall","src":"5963:31:37"},"nativeSrc":"5963:31:37","nodeType":"YulExpressionStatement","src":"5963:31:37"},{"nativeSrc":"6003:15:37","nodeType":"YulAssignment","src":"6003:15:37","value":{"name":"value","nativeSrc":"6013:5:37","nodeType":"YulIdentifier","src":"6013:5:37"},"variableNames":[{"name":"value0","nativeSrc":"6003:6:37","nodeType":"YulIdentifier","src":"6003:6:37"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$1506","nativeSrc":"5762:262:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5813:9:37","nodeType":"YulTypedName","src":"5813:9:37","type":""},{"name":"dataEnd","nativeSrc":"5824:7:37","nodeType":"YulTypedName","src":"5824:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5836:6:37","nodeType":"YulTypedName","src":"5836:6:37","type":""}],"src":"5762:262:37"},{"body":{"nativeSrc":"6115:177:37","nodeType":"YulBlock","src":"6115:177:37","statements":[{"body":{"nativeSrc":"6161:16:37","nodeType":"YulBlock","src":"6161:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6170:1:37","nodeType":"YulLiteral","src":"6170:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"6173:1:37","nodeType":"YulLiteral","src":"6173:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6163:6:37","nodeType":"YulIdentifier","src":"6163:6:37"},"nativeSrc":"6163:12:37","nodeType":"YulFunctionCall","src":"6163:12:37"},"nativeSrc":"6163:12:37","nodeType":"YulExpressionStatement","src":"6163:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6136:7:37","nodeType":"YulIdentifier","src":"6136:7:37"},{"name":"headStart","nativeSrc":"6145:9:37","nodeType":"YulIdentifier","src":"6145:9:37"}],"functionName":{"name":"sub","nativeSrc":"6132:3:37","nodeType":"YulIdentifier","src":"6132:3:37"},"nativeSrc":"6132:23:37","nodeType":"YulFunctionCall","src":"6132:23:37"},{"kind":"number","nativeSrc":"6157:2:37","nodeType":"YulLiteral","src":"6157:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6128:3:37","nodeType":"YulIdentifier","src":"6128:3:37"},"nativeSrc":"6128:32:37","nodeType":"YulFunctionCall","src":"6128:32:37"},"nativeSrc":"6125:52:37","nodeType":"YulIf","src":"6125:52:37"},{"nativeSrc":"6186:36:37","nodeType":"YulVariableDeclaration","src":"6186:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"6212:9:37","nodeType":"YulIdentifier","src":"6212:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"6199:12:37","nodeType":"YulIdentifier","src":"6199:12:37"},"nativeSrc":"6199:23:37","nodeType":"YulFunctionCall","src":"6199:23:37"},"variables":[{"name":"value","nativeSrc":"6190:5:37","nodeType":"YulTypedName","src":"6190:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6256:5:37","nodeType":"YulIdentifier","src":"6256:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6231:24:37","nodeType":"YulIdentifier","src":"6231:24:37"},"nativeSrc":"6231:31:37","nodeType":"YulFunctionCall","src":"6231:31:37"},"nativeSrc":"6231:31:37","nodeType":"YulExpressionStatement","src":"6231:31:37"},{"nativeSrc":"6271:15:37","nodeType":"YulAssignment","src":"6271:15:37","value":{"name":"value","nativeSrc":"6281:5:37","nodeType":"YulIdentifier","src":"6281:5:37"},"variableNames":[{"name":"value0","nativeSrc":"6271:6:37","nodeType":"YulIdentifier","src":"6271:6:37"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$1318","nativeSrc":"6029:263:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6081:9:37","nodeType":"YulTypedName","src":"6081:9:37","type":""},{"name":"dataEnd","nativeSrc":"6092:7:37","nodeType":"YulTypedName","src":"6092:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6104:6:37","nodeType":"YulTypedName","src":"6104:6:37","type":""}],"src":"6029:263:37"},{"body":{"nativeSrc":"6396:149:37","nodeType":"YulBlock","src":"6396:149:37","statements":[{"nativeSrc":"6406:26:37","nodeType":"YulAssignment","src":"6406:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"6418:9:37","nodeType":"YulIdentifier","src":"6418:9:37"},{"kind":"number","nativeSrc":"6429:2:37","nodeType":"YulLiteral","src":"6429:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6414:3:37","nodeType":"YulIdentifier","src":"6414:3:37"},"nativeSrc":"6414:18:37","nodeType":"YulFunctionCall","src":"6414:18:37"},"variableNames":[{"name":"tail","nativeSrc":"6406:4:37","nodeType":"YulIdentifier","src":"6406:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6448:9:37","nodeType":"YulIdentifier","src":"6448:9:37"},{"arguments":[{"name":"value0","nativeSrc":"6463:6:37","nodeType":"YulIdentifier","src":"6463:6:37"},{"kind":"number","nativeSrc":"6471:66:37","nodeType":"YulLiteral","src":"6471:66:37","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"6459:3:37","nodeType":"YulIdentifier","src":"6459:3:37"},"nativeSrc":"6459:79:37","nodeType":"YulFunctionCall","src":"6459:79:37"}],"functionName":{"name":"mstore","nativeSrc":"6441:6:37","nodeType":"YulIdentifier","src":"6441:6:37"},"nativeSrc":"6441:98:37","nodeType":"YulFunctionCall","src":"6441:98:37"},"nativeSrc":"6441:98:37","nodeType":"YulExpressionStatement","src":"6441:98:37"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"6297:248:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6365:9:37","nodeType":"YulTypedName","src":"6365:9:37","type":""},{"name":"value0","nativeSrc":"6376:6:37","nodeType":"YulTypedName","src":"6376:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6387:4:37","nodeType":"YulTypedName","src":"6387:4:37","type":""}],"src":"6297:248:37"},{"body":{"nativeSrc":"6628:199:37","nodeType":"YulBlock","src":"6628:199:37","statements":[{"body":{"nativeSrc":"6674:16:37","nodeType":"YulBlock","src":"6674:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6683:1:37","nodeType":"YulLiteral","src":"6683:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"6686:1:37","nodeType":"YulLiteral","src":"6686:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6676:6:37","nodeType":"YulIdentifier","src":"6676:6:37"},"nativeSrc":"6676:12:37","nodeType":"YulFunctionCall","src":"6676:12:37"},"nativeSrc":"6676:12:37","nodeType":"YulExpressionStatement","src":"6676:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6649:7:37","nodeType":"YulIdentifier","src":"6649:7:37"},{"name":"headStart","nativeSrc":"6658:9:37","nodeType":"YulIdentifier","src":"6658:9:37"}],"functionName":{"name":"sub","nativeSrc":"6645:3:37","nodeType":"YulIdentifier","src":"6645:3:37"},"nativeSrc":"6645:23:37","nodeType":"YulFunctionCall","src":"6645:23:37"},{"kind":"number","nativeSrc":"6670:2:37","nodeType":"YulLiteral","src":"6670:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6641:3:37","nodeType":"YulIdentifier","src":"6641:3:37"},"nativeSrc":"6641:32:37","nodeType":"YulFunctionCall","src":"6641:32:37"},"nativeSrc":"6638:52:37","nodeType":"YulIf","src":"6638:52:37"},{"nativeSrc":"6699:29:37","nodeType":"YulVariableDeclaration","src":"6699:29:37","value":{"arguments":[{"name":"headStart","nativeSrc":"6718:9:37","nodeType":"YulIdentifier","src":"6718:9:37"}],"functionName":{"name":"mload","nativeSrc":"6712:5:37","nodeType":"YulIdentifier","src":"6712:5:37"},"nativeSrc":"6712:16:37","nodeType":"YulFunctionCall","src":"6712:16:37"},"variables":[{"name":"value","nativeSrc":"6703:5:37","nodeType":"YulTypedName","src":"6703:5:37","type":""}]},{"body":{"nativeSrc":"6781:16:37","nodeType":"YulBlock","src":"6781:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6790:1:37","nodeType":"YulLiteral","src":"6790:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"6793:1:37","nodeType":"YulLiteral","src":"6793:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6783:6:37","nodeType":"YulIdentifier","src":"6783:6:37"},"nativeSrc":"6783:12:37","nodeType":"YulFunctionCall","src":"6783:12:37"},"nativeSrc":"6783:12:37","nodeType":"YulExpressionStatement","src":"6783:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6750:5:37","nodeType":"YulIdentifier","src":"6750:5:37"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6771:5:37","nodeType":"YulIdentifier","src":"6771:5:37"}],"functionName":{"name":"iszero","nativeSrc":"6764:6:37","nodeType":"YulIdentifier","src":"6764:6:37"},"nativeSrc":"6764:13:37","nodeType":"YulFunctionCall","src":"6764:13:37"}],"functionName":{"name":"iszero","nativeSrc":"6757:6:37","nodeType":"YulIdentifier","src":"6757:6:37"},"nativeSrc":"6757:21:37","nodeType":"YulFunctionCall","src":"6757:21:37"}],"functionName":{"name":"eq","nativeSrc":"6747:2:37","nodeType":"YulIdentifier","src":"6747:2:37"},"nativeSrc":"6747:32:37","nodeType":"YulFunctionCall","src":"6747:32:37"}],"functionName":{"name":"iszero","nativeSrc":"6740:6:37","nodeType":"YulIdentifier","src":"6740:6:37"},"nativeSrc":"6740:40:37","nodeType":"YulFunctionCall","src":"6740:40:37"},"nativeSrc":"6737:60:37","nodeType":"YulIf","src":"6737:60:37"},{"nativeSrc":"6806:15:37","nodeType":"YulAssignment","src":"6806:15:37","value":{"name":"value","nativeSrc":"6816:5:37","nodeType":"YulIdentifier","src":"6816:5:37"},"variableNames":[{"name":"value0","nativeSrc":"6806:6:37","nodeType":"YulIdentifier","src":"6806:6:37"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6550:277:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6594:9:37","nodeType":"YulTypedName","src":"6594:9:37","type":""},{"name":"dataEnd","nativeSrc":"6605:7:37","nodeType":"YulTypedName","src":"6605:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6617:6:37","nodeType":"YulTypedName","src":"6617:6:37","type":""}],"src":"6550:277:37"},{"body":{"nativeSrc":"6989:260:37","nodeType":"YulBlock","src":"6989:260:37","statements":[{"nativeSrc":"6999:26:37","nodeType":"YulAssignment","src":"6999:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"7011:9:37","nodeType":"YulIdentifier","src":"7011:9:37"},{"kind":"number","nativeSrc":"7022:2:37","nodeType":"YulLiteral","src":"7022:2:37","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7007:3:37","nodeType":"YulIdentifier","src":"7007:3:37"},"nativeSrc":"7007:18:37","nodeType":"YulFunctionCall","src":"7007:18:37"},"variableNames":[{"name":"tail","nativeSrc":"6999:4:37","nodeType":"YulIdentifier","src":"6999:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7041:9:37","nodeType":"YulIdentifier","src":"7041:9:37"},{"arguments":[{"name":"value0","nativeSrc":"7056:6:37","nodeType":"YulIdentifier","src":"7056:6:37"},{"kind":"number","nativeSrc":"7064:42:37","nodeType":"YulLiteral","src":"7064:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7052:3:37","nodeType":"YulIdentifier","src":"7052:3:37"},"nativeSrc":"7052:55:37","nodeType":"YulFunctionCall","src":"7052:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7034:6:37","nodeType":"YulIdentifier","src":"7034:6:37"},"nativeSrc":"7034:74:37","nodeType":"YulFunctionCall","src":"7034:74:37"},"nativeSrc":"7034:74:37","nodeType":"YulExpressionStatement","src":"7034:74:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7128:9:37","nodeType":"YulIdentifier","src":"7128:9:37"},{"kind":"number","nativeSrc":"7139:2:37","nodeType":"YulLiteral","src":"7139:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7124:3:37","nodeType":"YulIdentifier","src":"7124:3:37"},"nativeSrc":"7124:18:37","nodeType":"YulFunctionCall","src":"7124:18:37"},{"arguments":[{"name":"value1","nativeSrc":"7148:6:37","nodeType":"YulIdentifier","src":"7148:6:37"},{"kind":"number","nativeSrc":"7156:42:37","nodeType":"YulLiteral","src":"7156:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7144:3:37","nodeType":"YulIdentifier","src":"7144:3:37"},"nativeSrc":"7144:55:37","nodeType":"YulFunctionCall","src":"7144:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7117:6:37","nodeType":"YulIdentifier","src":"7117:6:37"},"nativeSrc":"7117:83:37","nodeType":"YulFunctionCall","src":"7117:83:37"},"nativeSrc":"7117:83:37","nodeType":"YulExpressionStatement","src":"7117:83:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7220:9:37","nodeType":"YulIdentifier","src":"7220:9:37"},{"kind":"number","nativeSrc":"7231:2:37","nodeType":"YulLiteral","src":"7231:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7216:3:37","nodeType":"YulIdentifier","src":"7216:3:37"},"nativeSrc":"7216:18:37","nodeType":"YulFunctionCall","src":"7216:18:37"},{"name":"value2","nativeSrc":"7236:6:37","nodeType":"YulIdentifier","src":"7236:6:37"}],"functionName":{"name":"mstore","nativeSrc":"7209:6:37","nodeType":"YulIdentifier","src":"7209:6:37"},"nativeSrc":"7209:34:37","nodeType":"YulFunctionCall","src":"7209:34:37"},"nativeSrc":"7209:34:37","nodeType":"YulExpressionStatement","src":"7209:34:37"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"6832:417:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6942:9:37","nodeType":"YulTypedName","src":"6942:9:37","type":""},{"name":"value2","nativeSrc":"6953:6:37","nodeType":"YulTypedName","src":"6953:6:37","type":""},{"name":"value1","nativeSrc":"6961:6:37","nodeType":"YulTypedName","src":"6961:6:37","type":""},{"name":"value0","nativeSrc":"6969:6:37","nodeType":"YulTypedName","src":"6969:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6980:4:37","nodeType":"YulTypedName","src":"6980:4:37","type":""}],"src":"6832:417:37"},{"body":{"nativeSrc":"7332:177:37","nodeType":"YulBlock","src":"7332:177:37","statements":[{"body":{"nativeSrc":"7378:16:37","nodeType":"YulBlock","src":"7378:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7387:1:37","nodeType":"YulLiteral","src":"7387:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"7390:1:37","nodeType":"YulLiteral","src":"7390:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7380:6:37","nodeType":"YulIdentifier","src":"7380:6:37"},"nativeSrc":"7380:12:37","nodeType":"YulFunctionCall","src":"7380:12:37"},"nativeSrc":"7380:12:37","nodeType":"YulExpressionStatement","src":"7380:12:37"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7353:7:37","nodeType":"YulIdentifier","src":"7353:7:37"},{"name":"headStart","nativeSrc":"7362:9:37","nodeType":"YulIdentifier","src":"7362:9:37"}],"functionName":{"name":"sub","nativeSrc":"7349:3:37","nodeType":"YulIdentifier","src":"7349:3:37"},"nativeSrc":"7349:23:37","nodeType":"YulFunctionCall","src":"7349:23:37"},{"kind":"number","nativeSrc":"7374:2:37","nodeType":"YulLiteral","src":"7374:2:37","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7345:3:37","nodeType":"YulIdentifier","src":"7345:3:37"},"nativeSrc":"7345:32:37","nodeType":"YulFunctionCall","src":"7345:32:37"},"nativeSrc":"7342:52:37","nodeType":"YulIf","src":"7342:52:37"},{"nativeSrc":"7403:36:37","nodeType":"YulVariableDeclaration","src":"7403:36:37","value":{"arguments":[{"name":"headStart","nativeSrc":"7429:9:37","nodeType":"YulIdentifier","src":"7429:9:37"}],"functionName":{"name":"calldataload","nativeSrc":"7416:12:37","nodeType":"YulIdentifier","src":"7416:12:37"},"nativeSrc":"7416:23:37","nodeType":"YulFunctionCall","src":"7416:23:37"},"variables":[{"name":"value","nativeSrc":"7407:5:37","nodeType":"YulTypedName","src":"7407:5:37","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7473:5:37","nodeType":"YulIdentifier","src":"7473:5:37"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7448:24:37","nodeType":"YulIdentifier","src":"7448:24:37"},"nativeSrc":"7448:31:37","nodeType":"YulFunctionCall","src":"7448:31:37"},"nativeSrc":"7448:31:37","nodeType":"YulExpressionStatement","src":"7448:31:37"},{"nativeSrc":"7488:15:37","nodeType":"YulAssignment","src":"7488:15:37","value":{"name":"value","nativeSrc":"7498:5:37","nodeType":"YulIdentifier","src":"7498:5:37"},"variableNames":[{"name":"value0","nativeSrc":"7488:6:37","nodeType":"YulIdentifier","src":"7488:6:37"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"7254:255:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7298:9:37","nodeType":"YulTypedName","src":"7298:9:37","type":""},{"name":"dataEnd","nativeSrc":"7309:7:37","nodeType":"YulTypedName","src":"7309:7:37","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7321:6:37","nodeType":"YulTypedName","src":"7321:6:37","type":""}],"src":"7254:255:37"},{"body":{"nativeSrc":"7671:309:37","nodeType":"YulBlock","src":"7671:309:37","statements":[{"nativeSrc":"7681:26:37","nodeType":"YulAssignment","src":"7681:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"7693:9:37","nodeType":"YulIdentifier","src":"7693:9:37"},{"kind":"number","nativeSrc":"7704:2:37","nodeType":"YulLiteral","src":"7704:2:37","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7689:3:37","nodeType":"YulIdentifier","src":"7689:3:37"},"nativeSrc":"7689:18:37","nodeType":"YulFunctionCall","src":"7689:18:37"},"variableNames":[{"name":"tail","nativeSrc":"7681:4:37","nodeType":"YulIdentifier","src":"7681:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7723:9:37","nodeType":"YulIdentifier","src":"7723:9:37"},{"arguments":[{"name":"value0","nativeSrc":"7738:6:37","nodeType":"YulIdentifier","src":"7738:6:37"},{"kind":"number","nativeSrc":"7746:42:37","nodeType":"YulLiteral","src":"7746:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7734:3:37","nodeType":"YulIdentifier","src":"7734:3:37"},"nativeSrc":"7734:55:37","nodeType":"YulFunctionCall","src":"7734:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7716:6:37","nodeType":"YulIdentifier","src":"7716:6:37"},"nativeSrc":"7716:74:37","nodeType":"YulFunctionCall","src":"7716:74:37"},"nativeSrc":"7716:74:37","nodeType":"YulExpressionStatement","src":"7716:74:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7810:9:37","nodeType":"YulIdentifier","src":"7810:9:37"},{"kind":"number","nativeSrc":"7821:2:37","nodeType":"YulLiteral","src":"7821:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7806:3:37","nodeType":"YulIdentifier","src":"7806:3:37"},"nativeSrc":"7806:18:37","nodeType":"YulFunctionCall","src":"7806:18:37"},{"arguments":[{"name":"value1","nativeSrc":"7830:6:37","nodeType":"YulIdentifier","src":"7830:6:37"},{"kind":"number","nativeSrc":"7838:42:37","nodeType":"YulLiteral","src":"7838:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7826:3:37","nodeType":"YulIdentifier","src":"7826:3:37"},"nativeSrc":"7826:55:37","nodeType":"YulFunctionCall","src":"7826:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7799:6:37","nodeType":"YulIdentifier","src":"7799:6:37"},"nativeSrc":"7799:83:37","nodeType":"YulFunctionCall","src":"7799:83:37"},"nativeSrc":"7799:83:37","nodeType":"YulExpressionStatement","src":"7799:83:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7902:9:37","nodeType":"YulIdentifier","src":"7902:9:37"},{"kind":"number","nativeSrc":"7913:2:37","nodeType":"YulLiteral","src":"7913:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7898:3:37","nodeType":"YulIdentifier","src":"7898:3:37"},"nativeSrc":"7898:18:37","nodeType":"YulFunctionCall","src":"7898:18:37"},{"arguments":[{"name":"value2","nativeSrc":"7922:6:37","nodeType":"YulIdentifier","src":"7922:6:37"},{"kind":"number","nativeSrc":"7930:42:37","nodeType":"YulLiteral","src":"7930:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7918:3:37","nodeType":"YulIdentifier","src":"7918:3:37"},"nativeSrc":"7918:55:37","nodeType":"YulFunctionCall","src":"7918:55:37"}],"functionName":{"name":"mstore","nativeSrc":"7891:6:37","nodeType":"YulIdentifier","src":"7891:6:37"},"nativeSrc":"7891:83:37","nodeType":"YulFunctionCall","src":"7891:83:37"},"nativeSrc":"7891:83:37","nodeType":"YulExpressionStatement","src":"7891:83:37"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"7514:466:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7624:9:37","nodeType":"YulTypedName","src":"7624:9:37","type":""},{"name":"value2","nativeSrc":"7635:6:37","nodeType":"YulTypedName","src":"7635:6:37","type":""},{"name":"value1","nativeSrc":"7643:6:37","nodeType":"YulTypedName","src":"7643:6:37","type":""},{"name":"value0","nativeSrc":"7651:6:37","nodeType":"YulTypedName","src":"7651:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7662:4:37","nodeType":"YulTypedName","src":"7662:4:37","type":""}],"src":"7514:466:37"},{"body":{"nativeSrc":"8114:168:37","nodeType":"YulBlock","src":"8114:168:37","statements":[{"nativeSrc":"8124:26:37","nodeType":"YulAssignment","src":"8124:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"8136:9:37","nodeType":"YulIdentifier","src":"8136:9:37"},{"kind":"number","nativeSrc":"8147:2:37","nodeType":"YulLiteral","src":"8147:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8132:3:37","nodeType":"YulIdentifier","src":"8132:3:37"},"nativeSrc":"8132:18:37","nodeType":"YulFunctionCall","src":"8132:18:37"},"variableNames":[{"name":"tail","nativeSrc":"8124:4:37","nodeType":"YulIdentifier","src":"8124:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8166:9:37","nodeType":"YulIdentifier","src":"8166:9:37"},{"arguments":[{"name":"value0","nativeSrc":"8181:6:37","nodeType":"YulIdentifier","src":"8181:6:37"},{"kind":"number","nativeSrc":"8189:42:37","nodeType":"YulLiteral","src":"8189:42:37","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8177:3:37","nodeType":"YulIdentifier","src":"8177:3:37"},"nativeSrc":"8177:55:37","nodeType":"YulFunctionCall","src":"8177:55:37"}],"functionName":{"name":"mstore","nativeSrc":"8159:6:37","nodeType":"YulIdentifier","src":"8159:6:37"},"nativeSrc":"8159:74:37","nodeType":"YulFunctionCall","src":"8159:74:37"},"nativeSrc":"8159:74:37","nodeType":"YulExpressionStatement","src":"8159:74:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8253:9:37","nodeType":"YulIdentifier","src":"8253:9:37"},{"kind":"number","nativeSrc":"8264:2:37","nodeType":"YulLiteral","src":"8264:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8249:3:37","nodeType":"YulIdentifier","src":"8249:3:37"},"nativeSrc":"8249:18:37","nodeType":"YulFunctionCall","src":"8249:18:37"},{"name":"value1","nativeSrc":"8269:6:37","nodeType":"YulIdentifier","src":"8269:6:37"}],"functionName":{"name":"mstore","nativeSrc":"8242:6:37","nodeType":"YulIdentifier","src":"8242:6:37"},"nativeSrc":"8242:34:37","nodeType":"YulFunctionCall","src":"8242:34:37"},"nativeSrc":"8242:34:37","nodeType":"YulExpressionStatement","src":"8242:34:37"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7985:297:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8075:9:37","nodeType":"YulTypedName","src":"8075:9:37","type":""},{"name":"value1","nativeSrc":"8086:6:37","nodeType":"YulTypedName","src":"8086:6:37","type":""},{"name":"value0","nativeSrc":"8094:6:37","nodeType":"YulTypedName","src":"8094:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8105:4:37","nodeType":"YulTypedName","src":"8105:4:37","type":""}],"src":"7985:297:37"},{"body":{"nativeSrc":"8416:119:37","nodeType":"YulBlock","src":"8416:119:37","statements":[{"nativeSrc":"8426:26:37","nodeType":"YulAssignment","src":"8426:26:37","value":{"arguments":[{"name":"headStart","nativeSrc":"8438:9:37","nodeType":"YulIdentifier","src":"8438:9:37"},{"kind":"number","nativeSrc":"8449:2:37","nodeType":"YulLiteral","src":"8449:2:37","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8434:3:37","nodeType":"YulIdentifier","src":"8434:3:37"},"nativeSrc":"8434:18:37","nodeType":"YulFunctionCall","src":"8434:18:37"},"variableNames":[{"name":"tail","nativeSrc":"8426:4:37","nodeType":"YulIdentifier","src":"8426:4:37"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8468:9:37","nodeType":"YulIdentifier","src":"8468:9:37"},{"name":"value0","nativeSrc":"8479:6:37","nodeType":"YulIdentifier","src":"8479:6:37"}],"functionName":{"name":"mstore","nativeSrc":"8461:6:37","nodeType":"YulIdentifier","src":"8461:6:37"},"nativeSrc":"8461:25:37","nodeType":"YulFunctionCall","src":"8461:25:37"},"nativeSrc":"8461:25:37","nodeType":"YulExpressionStatement","src":"8461:25:37"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8506:9:37","nodeType":"YulIdentifier","src":"8506:9:37"},{"kind":"number","nativeSrc":"8517:2:37","nodeType":"YulLiteral","src":"8517:2:37","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8502:3:37","nodeType":"YulIdentifier","src":"8502:3:37"},"nativeSrc":"8502:18:37","nodeType":"YulFunctionCall","src":"8502:18:37"},{"name":"value1","nativeSrc":"8522:6:37","nodeType":"YulIdentifier","src":"8522:6:37"}],"functionName":{"name":"mstore","nativeSrc":"8495:6:37","nodeType":"YulIdentifier","src":"8495:6:37"},"nativeSrc":"8495:34:37","nodeType":"YulFunctionCall","src":"8495:34:37"},"nativeSrc":"8495:34:37","nodeType":"YulExpressionStatement","src":"8495:34:37"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"8287:248:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8377:9:37","nodeType":"YulTypedName","src":"8377:9:37","type":""},{"name":"value1","nativeSrc":"8388:6:37","nodeType":"YulTypedName","src":"8388:6:37","type":""},{"name":"value0","nativeSrc":"8396:6:37","nodeType":"YulTypedName","src":"8396:6:37","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8407:4:37","nodeType":"YulTypedName","src":"8407:4:37","type":""}],"src":"8287:248:37"},{"body":{"nativeSrc":"8731:14:37","nodeType":"YulBlock","src":"8731:14:37","statements":[{"nativeSrc":"8733:10:37","nodeType":"YulAssignment","src":"8733:10:37","value":{"name":"pos","nativeSrc":"8740:3:37","nodeType":"YulIdentifier","src":"8740:3:37"},"variableNames":[{"name":"end","nativeSrc":"8733:3:37","nodeType":"YulIdentifier","src":"8733:3:37"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"8540:205:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8715:3:37","nodeType":"YulTypedName","src":"8715:3:37","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8723:3:37","nodeType":"YulTypedName","src":"8723:3:37","type":""}],"src":"8540:205:37"},{"body":{"nativeSrc":"8880:201:37","nodeType":"YulBlock","src":"8880:201:37","statements":[{"body":{"nativeSrc":"8918:16:37","nodeType":"YulBlock","src":"8918:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8927:1:37","nodeType":"YulLiteral","src":"8927:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"8930:1:37","nodeType":"YulLiteral","src":"8930:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8920:6:37","nodeType":"YulIdentifier","src":"8920:6:37"},"nativeSrc":"8920:12:37","nodeType":"YulFunctionCall","src":"8920:12:37"},"nativeSrc":"8920:12:37","nodeType":"YulExpressionStatement","src":"8920:12:37"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"8896:10:37","nodeType":"YulIdentifier","src":"8896:10:37"},{"name":"endIndex","nativeSrc":"8908:8:37","nodeType":"YulIdentifier","src":"8908:8:37"}],"functionName":{"name":"gt","nativeSrc":"8893:2:37","nodeType":"YulIdentifier","src":"8893:2:37"},"nativeSrc":"8893:24:37","nodeType":"YulFunctionCall","src":"8893:24:37"},"nativeSrc":"8890:44:37","nodeType":"YulIf","src":"8890:44:37"},{"body":{"nativeSrc":"8967:16:37","nodeType":"YulBlock","src":"8967:16:37","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8976:1:37","nodeType":"YulLiteral","src":"8976:1:37","type":"","value":"0"},{"kind":"number","nativeSrc":"8979:1:37","nodeType":"YulLiteral","src":"8979:1:37","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8969:6:37","nodeType":"YulIdentifier","src":"8969:6:37"},"nativeSrc":"8969:12:37","nodeType":"YulFunctionCall","src":"8969:12:37"},"nativeSrc":"8969:12:37","nodeType":"YulExpressionStatement","src":"8969:12:37"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"8949:8:37","nodeType":"YulIdentifier","src":"8949:8:37"},{"name":"length","nativeSrc":"8959:6:37","nodeType":"YulIdentifier","src":"8959:6:37"}],"functionName":{"name":"gt","nativeSrc":"8946:2:37","nodeType":"YulIdentifier","src":"8946:2:37"},"nativeSrc":"8946:20:37","nodeType":"YulFunctionCall","src":"8946:20:37"},"nativeSrc":"8943:40:37","nodeType":"YulIf","src":"8943:40:37"},{"nativeSrc":"8992:36:37","nodeType":"YulAssignment","src":"8992:36:37","value":{"arguments":[{"name":"offset","nativeSrc":"9009:6:37","nodeType":"YulIdentifier","src":"9009:6:37"},{"name":"startIndex","nativeSrc":"9017:10:37","nodeType":"YulIdentifier","src":"9017:10:37"}],"functionName":{"name":"add","nativeSrc":"9005:3:37","nodeType":"YulIdentifier","src":"9005:3:37"},"nativeSrc":"9005:23:37","nodeType":"YulFunctionCall","src":"9005:23:37"},"variableNames":[{"name":"offsetOut","nativeSrc":"8992:9:37","nodeType":"YulIdentifier","src":"8992:9:37"}]},{"nativeSrc":"9037:38:37","nodeType":"YulAssignment","src":"9037:38:37","value":{"arguments":[{"name":"endIndex","nativeSrc":"9054:8:37","nodeType":"YulIdentifier","src":"9054:8:37"},{"name":"startIndex","nativeSrc":"9064:10:37","nodeType":"YulIdentifier","src":"9064:10:37"}],"functionName":{"name":"sub","nativeSrc":"9050:3:37","nodeType":"YulIdentifier","src":"9050:3:37"},"nativeSrc":"9050:25:37","nodeType":"YulFunctionCall","src":"9050:25:37"},"variableNames":[{"name":"lengthOut","nativeSrc":"9037:9:37","nodeType":"YulIdentifier","src":"9037:9:37"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"8750:331:37","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"8814:6:37","nodeType":"YulTypedName","src":"8814:6:37","type":""},{"name":"length","nativeSrc":"8822:6:37","nodeType":"YulTypedName","src":"8822:6:37","type":""},{"name":"startIndex","nativeSrc":"8830:10:37","nodeType":"YulTypedName","src":"8830:10:37","type":""},{"name":"endIndex","nativeSrc":"8842:8:37","nodeType":"YulTypedName","src":"8842:8:37","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"8855:9:37","nodeType":"YulTypedName","src":"8855:9:37","type":""},{"name":"lengthOut","nativeSrc":"8866:9:37","nodeType":"YulTypedName","src":"8866:9:37","type":""}],"src":"8750:331:37"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$758__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$1506_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$1318_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$1506(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$1318(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":37,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"612":[{"length":32,"start":248},{"length":32,"start":387},{"length":32,"start":2829},{"length":32,"start":2891},{"length":32,"start":3209},{"length":32,"start":3351}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c806361dfdae611610081578063c3666c361161005b578063c3666c36146101f0578063f2fde38b14610203578063f7ba94bd1461021657600080fd5b806361dfdae6146101c057806373c8a958146101d55780638da5cb5b146101e857600080fd5b80632bb14104116100b25780632bb141041461013d57806331e66e1e1461015d578063572b6c051461017357600080fd5b806301ffc9a7146100ce5780632b4c9f16146100f6575b600080fd5b6100e16100dc366004610ff2565b610229565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ed565b6000546101189073ffffffffffffffffffffffffffffffffffffffff1681565b610165610243565b6040516100ed92919061103b565b6100e16101813660046110aa565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101d36101ce3660046110aa565b610256565b005b6101d36101e3366004611113565b610335565b610118610356565b6101d36101fe366004611113565b610382565b6101d36102113660046110aa565b61039b565b6101d36102243660046111b9565b6103b9565b600061023d826102376103d6565b90610404565b92915050565b36600061024e6104de565b915091509091565b73ffffffffffffffffffffffffffffffffffffffff81166102a3576040517ff6a5e70400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6102bc6102ae6104e9565b6102b66104f3565b90610521565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f3d38713ec8fb49acced894a52df2f06a371a15960550da9ba0f017cb7d07a8ec9060200160405180910390a150565b6103406102ae6104e9565b61034e868686868686610595565b505050505050565b600061037d6103636104f3565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b61038d6102ae6104e9565b61034e868686868686610680565b6103b66103a66104e9565b826103af6104f3565b9190610916565b50565b6103c46102ae6104e9565b6103d084848484610a2a565b50505050565b60008061023d60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61122a565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016104545750600061023d565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016104a55750600161023d565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b36600061024e610ad6565b600061037d610c46565b60008061023d60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61122a565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610591576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b8483811415806105a55750808214155b156105dc576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106765761066e8888838181106105fc576105fc611264565b905060200201602081019061061191906110aa565b85858481811061062357610623611264565b9050602002013588888581811061063c5761063c611264565b905060200201602081019061065191906110aa565b73ffffffffffffffffffffffffffffffffffffffff169190610d93565b6001016105df565b5050505050505050565b8483811415806106905750808214155b156106c7576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156106765760008686838181106106e6576106e6611264565b90506020020160208101906106fb91906110aa565b6040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f80ac58cd00000000000000000000000000000000000000000000000000000000600482015290915073ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac9190611293565b6107fa576040517f986b9f1f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610588565b86868381811061080c5761080c611264565b905060200201602081019061082191906110aa565b73ffffffffffffffffffffffffffffffffffffffff166342842e0e308b8b8681811061084f5761084f611264565b905060200201602081019061086491906110aa565b88888781811061087657610876611264565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156108f257600080fd5b505af1158015610906573d6000803e3d6000fd5b50505050508060010190506106ca565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610983576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610588565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103d05783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b82818114610a64576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8181101561034e57610ace848483818110610a8457610a84611264565b90506020020135878784818110610a9d57610a9d611264565b9050602002016020810190610ab291906110aa565b73ffffffffffffffffffffffffffffffffffffffff1690610e25565b600101610a67565b36600033321480610ae75750601836105b15610af55750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610c30575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663019a2028367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152306044820152606401602060405180830381865afa158015610c0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c309190611293565b15610c3d5761024e610edb565b50600091369150565b600033321480610c565750601836105b15610c6057503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610d8257506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015610d5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d829190611293565b15610d8c57919050565b3391505090565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610e20908490610f0c565b505050565b80471015610e68576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101829052604401610588565b6000808373ffffffffffffffffffffffffffffffffffffffff168360405160006040518083038185875af1925050503d8060008114610ec3576040519150601f19603f3d011682016040523d82523d6000602084013e610ec8565b606091505b5091509150816103d0576103d081610fb0565b36600061024e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec83018284816112b5565b600080602060008451602086016000885af180610f2f576040513d6000823e3d81fd5b50506000513d91508115610f47578060011415610f61565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156103d0576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610588565b805115610fc05780518082602001fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561100457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461103457600080fd5b9392505050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b73ffffffffffffffffffffffffffffffffffffffff811681146103b657600080fd5b6000602082840312156110bc57600080fd5b813561103481611088565b60008083601f8401126110d957600080fd5b50813567ffffffffffffffff8111156110f157600080fd5b6020830191508360208260051b850101111561110c57600080fd5b9250929050565b6000806000806000806060878903121561112c57600080fd5b863567ffffffffffffffff81111561114357600080fd5b61114f89828a016110c7565b909750955050602087013567ffffffffffffffff81111561116f57600080fd5b61117b89828a016110c7565b909550935050604087013567ffffffffffffffff81111561119b57600080fd5b6111a789828a016110c7565b979a9699509497509295939492505050565b600080600080604085870312156111cf57600080fd5b843567ffffffffffffffff8111156111e657600080fd5b6111f2878288016110c7565b909550935050602085013567ffffffffffffffff81111561121257600080fd5b61121e878288016110c7565b95989497509550505050565b8181038181111561023d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156112a557600080fd5b8151801515811461103457600080fd5b600080858511156112c557600080fd5b838611156112d257600080fd5b505082019391909203915056fea2646970667358221220232bcb72ca2dd5199d2463a715cc5c7aa5cced43440526aa13e28b02dd947cbf64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x61DFDAE6 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xC3666C36 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x1F0 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x216 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x61DFDAE6 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2BB14104 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x2BB14104 EQ PUSH2 0x13D JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x173 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0xF6 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0xDC CALLDATASIZE PUSH1 0x4 PUSH2 0xFF2 JUMP JUMPDEST PUSH2 0x229 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xED JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x118 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x243 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xED SWAP3 SWAP2 SWAP1 PUSH2 0x103B JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x181 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AA JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x1CE CALLDATASIZE PUSH1 0x4 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0x256 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1D3 PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1113 JUMP JUMPDEST PUSH2 0x335 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x356 JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x1FE CALLDATASIZE PUSH1 0x4 PUSH2 0x1113 JUMP JUMPDEST PUSH2 0x382 JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x211 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AA JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST PUSH2 0x1D3 PUSH2 0x224 CALLDATASIZE PUSH1 0x4 PUSH2 0x11B9 JUMP JUMPDEST PUSH2 0x3B9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23D DUP3 PUSH2 0x237 PUSH2 0x3D6 JUMP JUMPDEST SWAP1 PUSH2 0x404 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x24E PUSH2 0x4DE JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x2A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF6A5E70400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2BC PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x2B6 PUSH2 0x4F3 JUMP JUMPDEST SWAP1 PUSH2 0x521 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x3D38713EC8FB49ACCED894A52DF2F06A371A15960550DA9BA0F017CB7D07A8EC SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH2 0x340 PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x34E DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x595 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D PUSH2 0x363 PUSH2 0x4F3 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x38D PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x34E DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH2 0x680 JUMP JUMPDEST PUSH2 0x3B6 PUSH2 0x3A6 PUSH2 0x4E9 JUMP JUMPDEST DUP3 PUSH2 0x3AF PUSH2 0x4F3 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x916 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x3C4 PUSH2 0x2AE PUSH2 0x4E9 JUMP JUMPDEST PUSH2 0x3D0 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA2A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23D PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x122A JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x454 JUMPI POP PUSH1 0x0 PUSH2 0x23D JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x4A5 JUMPI POP PUSH1 0x1 PUSH2 0x23D JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x24E PUSH2 0xAD6 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37D PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x23D PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x122A JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x591 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x5A5 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x5DC JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x676 JUMPI PUSH2 0x66E DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x5FC JUMPI PUSH2 0x5FC PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x611 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x623 JUMPI PUSH2 0x623 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x63C JUMPI PUSH2 0x63C PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x651 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0xD93 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x5DF JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x690 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x676 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x6E6 JUMPI PUSH2 0x6E6 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x6FB SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 PUSH4 0x1FFC9A7 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x788 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7AC SWAP2 SWAP1 PUSH2 0x1293 JUMP JUMPDEST PUSH2 0x7FA JUMPI PUSH1 0x40 MLOAD PUSH32 0x986B9F1F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x588 JUMP JUMPDEST DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x80C JUMPI PUSH2 0x80C PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x821 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x42842E0E ADDRESS DUP12 DUP12 DUP7 DUP2 DUP2 LT PUSH2 0x84F JUMPI PUSH2 0x84F PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x864 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST DUP9 DUP9 DUP8 DUP2 DUP2 LT PUSH2 0x876 JUMPI PUSH2 0x876 PUSH2 0x1264 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x906 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x6CA JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x983 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x588 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3D0 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0xA64 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x34E JUMPI PUSH2 0xACE DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0xA84 JUMPI PUSH2 0xA84 PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xA9D JUMPI PUSH2 0xA9D PUSH2 0x1264 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xAB2 SWAP2 SWAP1 PUSH2 0x10AA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0xE25 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0xA67 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xAE7 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xAF5 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xC30 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x19A2028 CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC30 SWAP2 SWAP1 PUSH2 0x1293 JUMP JUMPDEST ISZERO PUSH2 0xC3D JUMPI PUSH2 0x24E PUSH2 0xEDB JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xC56 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xC60 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xD82 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD5E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD82 SWAP2 SWAP1 PUSH2 0x1293 JUMP JUMPDEST ISZERO PUSH2 0xD8C JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0xE20 SWAP1 DUP5 SWAP1 PUSH2 0xF0C JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0xE68 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCF47918100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SELFBALANCE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x588 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xEC3 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xEC8 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 PUSH2 0x3D0 JUMPI PUSH2 0x3D0 DUP2 PUSH2 0xFB0 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x24E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x12B5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0xF2F JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0xF47 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0xF61 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x588 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0xFC0 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xD6BDA27500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1004 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1034 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1034 DUP2 PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x10D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x10F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x110C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x112C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1143 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114F DUP10 DUP3 DUP11 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x116F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x117B DUP10 DUP3 DUP11 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x40 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x119B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11A7 DUP10 DUP3 DUP11 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x11CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x11E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F2 DUP8 DUP3 DUP9 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x121E DUP8 DUP3 DUP9 ADD PUSH2 0x10C7 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x23D JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1034 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x12C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 0x2B 0xCB PUSH19 0xCA2DD5199D2463A715CC5C7AA5CCED43440526 0xAA SGT 0xE2 DUP12 MUL 0xDD SWAP5 PUSH29 0xBF64736F6C634300081C00330000000000000000000000000000000000 ","sourceMap":"221:248:36:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:8;;;;;;:::i;:::-;;:::i;:::-;;;516:14:37;;509:22;491:41;;479:2;464:18;542:165:8;;;;;;;;728:115:12;817:19;728:115;;;745:42:37;733:55;;;715:74;;703:2;688:18;728:115:12;543:252:37;951:21:35;;;;;;;;;373:94:36;;;:::i;:::-;;;;;;;;:::i;878:149:12:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1303:237:35;;;;;;:::i;:::-;;:::i;:::-;;1786:279:20;;;;;;:::i;:::-;;:::i;710:120:2:-;;;:::i;2389:290:20:-;;;;;;:::i;:::-;;:::i;864:152:2:-;;;;;;:::i;:::-;;:::i;1219:247:20:-;;;;;;:::i;:::-;;:::i;542:165:8:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:8:o;373:94:36:-;417:14;;450:10;:8;:10::i;:::-;443:17;;;;373:94;;:::o;1303:237:35:-;1357:18;;;1353:48;;1384:17;;;;;;;;;;;;;;1353:48;1411:70;1468:12;:10;:12::i;:::-;1411:33;:31;:33::i;:::-;:56;;:70::i;:::-;1492:6;:13;;;;;;;;;;;;;1520;;715:74:37;;;1520:13:35;;703:2:37;688:18;1520:13:35;;;;;;;1303:237;:::o;1786:279:20:-;1917:70;1974:12;:10;:12::i;1917:70::-;1997:61;2032:8;;2042:6;;2050:7;;1997:34;:61::i;:::-;1786:279;;;;;;:::o;710:120:2:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:7;;;;3550:118;782:41:2;775:48;;710:120;:::o;2389:290:20:-;2526:70;2583:12;:10;:12::i;2526:70::-;2606:66;2642:8;;2652:9;;2663:8;;2606:35;:66::i;864:152:2:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1219:247:20:-;1329:70;1386:12;:10;:12::i;1329:70::-;1409:50;1441:8;;1451:7;;1409:31;:50::i;:::-;1219:247;;;;:::o;1705:174:11:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:11;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:11;1620:11;;1560:82;-1:-1:-1;1658:34:11;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1825:178:35:-;1924:14;;1957:39;:37;:39::i;1595:175::-;1696:7;1722:41;:39;:41::i;5060:174:7:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;745:42:37;733:55;;4538:25:7;;;715:74:37;688:18;;4538:25:7;;;;;;;;4499:64;4408:162;;:::o;2609:378:22:-;2751:8;2780:23;;;;;:51;;-1:-1:-1;2807:24:22;;;;2780:51;2776:90;;;2840:26;;;;;;;;;;;;;;2776:90;2881:9;2876:105;2896:6;2892:1;:10;2876:105;;;2923:47;2946:8;;2955:1;2946:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2959:7;;2967:1;2959:10;;;;;;;:::i;:::-;;;;;;;2923:6;;2930:1;2923:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;2904:3;;2876:105;;;;2724:263;2609:378;;;;;;:::o;3679:647::-;3827:8;3856:26;;;;;:55;;-1:-1:-1;3886:25:22;;;;3856:55;3852:94;;;3920:26;;;;;;;;;;;;;;3852:94;3961:9;3956:364;3976:6;3972:1;:10;3956:364;;;4003:21;4027:9;;4037:1;4027:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4058:76;;;;;4108:25;4058:76;;;6441:98:37;4003:36:22;;-1:-1:-1;4058:49:22;;;;;;6414:18:37;;4058:76:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4053:173;;4161:50;;;;;745:42:37;733:55;;4161:50:22;;;715:74:37;688:18;;4161:50:22;543:252:37;4053:173:22;4239:9;;4249:1;4239:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:29;;;4277:4;4284:8;;4293:1;4284:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4297:8;;4306:1;4297:11;;;;;;;:::i;:::-;4239:70;;;;;;;;;;7064:42:37;7052:55;;;4239:70:22;;;7034:74:37;7144:55;;;;7124:18;;;7117:83;-1:-1:-1;4297:11:22;;;;;;7216:18:37;;;7209:34;7007:18;;4239:70:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3989:331;3984:3;;;;;3956:364;;3054:369:7;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;745:42:37;733:55;;3237:24:7;;;715:74:37;688:18;;3237:24:7;543:252:37;3201:60:7;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:7;3142:281;3054:369;;;:::o;1610:316:22:-;1731:8;1760:24;;;1756:63;;1793:26;;;;;;;;;;;;;;1756:63;1834:9;1829:91;1849:6;1845:1;:10;1829:91;;;1876:33;1898:7;;1906:1;1898:10;;;;;;;:::i;:::-;;;;;;;1876:8;;1885:1;1876:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;1857:3;;1829:91;;1658:784:13;1709:14;;1926:10;1940:9;1926:23;;:47;;-1:-1:-1;1971:2:13;1953:8;:20;1926:47;1922:93;;;-1:-1:-1;1996:8:13;;;;-1:-1:-1;1658:784:13:o;1922:93::-;2189:10;:42;2211:19;2189:42;;;:153;;-1:-1:-1;2247:39:13;:19;:39;;466:14:16;462:23;;449:37;445:2;441:46;2247:95:13;;;;;;;;;;7746:42:37;7734:55;;;2247:95:13;;;7716:74:37;2316:10:13;7806:18:37;;;7799:83;2336:4:13;7898:18:37;;;7891:83;7689:18;;2247:95:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2172:238;;;2374:25;:23;:25::i;2172:238::-;-1:-1:-1;2427:8:13;;;;-1:-1:-1;1658:784:13:o;784:760::-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:13;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:13;;784:760::o;1043:95::-;462:23:16;466:14;462:23;449:37;445:2;441:46;1372:19:13;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:13;;;;;:39;7734:55:37;;;1396:74:13;;;7716::37;1444:10:13;7806:18:37;;;7799:83;1464:4:13;7898:18:37;;;7891:83;1396:19:13;:39;;;;7689:18:37;;1396:74:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:13:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;1219:160:29:-;1328:43;;;1343:14;8177:55:37;;1328:43:29;;;8159:74:37;8249:18;;;;8242:34;;;1328:43:29;;;;;;;;;;8132:18:37;;;;1328:43:29;;;;;;;;;;;;;;1301:71;;1321:5;;1301:19;:71::i;:::-;1219:160;;;:::o;1290:365:30:-;1399:6;1375:21;:30;1371:125;;;1428:57;;;;;1455:21;1428:57;;;8461:25:37;8502:18;;;8495:34;;;8434:18;;1428:57:30;8287:248:37;1371:125:30;1507:12;1521:23;1548:9;:14;;1570:6;1548:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1506:75;;;;1596:7;1591:58;;1619:19;1627:10;1619:7;:19::i;616:152:16:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;7686:720:29:-;7766:18;7794:19;7932:4;7929:1;7922:4;7916:11;7909:4;7903;7899:15;7896:1;7889:5;7882;7877:60;7989:7;7979:176;;8033:4;8027:11;8078:16;8075:1;8070:3;8055:40;8124:16;8119:3;8112:29;7979:176;-1:-1:-1;;8232:1:29;8226:8;8182:16;;-1:-1:-1;8258:15:29;;:68;;8310:11;8325:1;8310:16;;8258:68;;;8276:26;;;;:31;8258:68;8254:146;;;8349:40;;;;;745:42:37;733:55;;8349:40:29;;;715:74:37;688:18;;8349:40:29;543:252:37;5559:487:30;5690:17;;:21;5686:354;;5887:10;5881:17;5943:15;5930:10;5926:2;5922:19;5915:44;5686:354;6010:19;;;;;;;;;;;;;;14:332:37;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:37:o;1031:447::-;1188:2;1177:9;1170:21;1227:6;1222:2;1211:9;1207:18;1200:34;1284:6;1276;1271:2;1260:9;1256:18;1243:48;1340:1;1311:22;;;1335:2;1307:31;;;1300:42;;;;1394:2;1382:15;;;1399:66;1378:88;1363:104;1359:113;;1031:447;-1:-1:-1;1031:447:37:o;1483:154::-;1569:42;1562:5;1558:54;1551:5;1548:65;1538:93;;1627:1;1624;1617:12;1642:247;1701:6;1754:2;1742:9;1733:7;1729:23;1725:32;1722:52;;;1770:1;1767;1760:12;1722:52;1809:9;1796:23;1828:31;1853:5;1828:31;:::i;1894:367::-;1957:8;1967:6;2021:3;2014:4;2006:6;2002:17;1998:27;1988:55;;2039:1;2036;2029:12;1988:55;-1:-1:-1;2062:20:37;;2105:18;2094:30;;2091:50;;;2137:1;2134;2127:12;2091:50;2174:4;2166:6;2162:17;2150:29;;2234:3;2227:4;2217:6;2214:1;2210:14;2202:6;2198:27;2194:38;2191:47;2188:67;;;2251:1;2248;2241:12;2188:67;1894:367;;;;;:::o;2266:1114::-;2439:6;2447;2455;2463;2471;2479;2532:2;2520:9;2511:7;2507:23;2503:32;2500:52;;;2548:1;2545;2538:12;2500:52;2588:9;2575:23;2621:18;2613:6;2610:30;2607:50;;;2653:1;2650;2643:12;2607:50;2692:70;2754:7;2745:6;2734:9;2730:22;2692:70;:::i;:::-;2781:8;;-1:-1:-1;2666:96:37;-1:-1:-1;;2869:2:37;2854:18;;2841:32;2898:18;2885:32;;2882:52;;;2930:1;2927;2920:12;2882:52;2969:72;3033:7;3022:8;3011:9;3007:24;2969:72;:::i;:::-;3060:8;;-1:-1:-1;2943:98:37;-1:-1:-1;;3148:2:37;3133:18;;3120:32;3177:18;3164:32;;3161:52;;;3209:1;3206;3199:12;3161:52;3248:72;3312:7;3301:8;3290:9;3286:24;3248:72;:::i;:::-;2266:1114;;;;-1:-1:-1;2266:1114:37;;-1:-1:-1;2266:1114:37;;3339:8;;2266:1114;-1:-1:-1;;;2266:1114:37:o;4505:776::-;4635:6;4643;4651;4659;4712:2;4700:9;4691:7;4687:23;4683:32;4680:52;;;4728:1;4725;4718:12;4680:52;4768:9;4755:23;4801:18;4793:6;4790:30;4787:50;;;4833:1;4830;4823:12;4787:50;4872:70;4934:7;4925:6;4914:9;4910:22;4872:70;:::i;:::-;4961:8;;-1:-1:-1;4846:96:37;-1:-1:-1;;5049:2:37;5034:18;;5021:32;5078:18;5065:32;;5062:52;;;5110:1;5107;5100:12;5062:52;5149:72;5213:7;5202:8;5191:9;5187:24;5149:72;:::i;:::-;4505:776;;;;-1:-1:-1;5240:8:37;-1:-1:-1;;;;4505:776:37:o;5286:282::-;5353:9;;;5374:11;;;5371:191;;;5418:77;5415:1;5408:88;5519:4;5516:1;5509:15;5547:4;5544:1;5537:15;5573:184;5625:77;5622:1;5615:88;5722:4;5719:1;5712:15;5746:4;5743:1;5736:15;6550:277;6617:6;6670:2;6658:9;6649:7;6645:23;6641:32;6638:52;;;6686:1;6683;6676:12;6638:52;6718:9;6712:16;6771:5;6764:13;6757:21;6750:5;6747:32;6737:60;;6793:1;6790;6783:12;8750:331;8855:9;8866;8908:8;8896:10;8893:24;8890:44;;;8930:1;8927;8920:12;8890:44;8959:6;8949:8;8946:20;8943:40;;;8979:1;8976;8969:12;8943:40;-1:-1:-1;;9005:23:37;;;9050:25;;;;;-1:-1:-1;8750:331:37:o"},"gasEstimates":{"creation":{"codeDepositCost":"977000","executionCost":"infinite","totalCost":"infinite"},"external":{"__msgData()":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","myData()":"2336","owner()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","setData(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"__msgData()":"31e66e1e","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","myData()":"2bb14104","owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","setData(address)":"61dfdae6","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"IncorrectTokenContractType\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroData\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"DataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"IncorrectTokenContractType(address)\":[{\"params\":{\"tokenContract\":\"The token contract being recovered.\"}}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"IncorrectTokenContractType(address)\":[{\"notice\":\"Thrown when trying to recover a token of the wrong contract type.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MyContractMock.sol\":\"MyContractMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0x016ea12044fa81e3c57662985c8cfa863543ca873697926085a0f7cee10622f3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {}\\n\",\"keccak256\":\"0x4982da4ea4d0a4b736a2f4590d57f721485bb6a3bc06ffff8f897aa17f8cb532\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ITokenRecovery} from \\\"./../interfaces/ITokenRecovery.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {TokenRecoveryLibrary} from \\\"./../libraries/TokenRecoveryLibrary.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is ITokenRecovery, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverETH(accounts, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ITokenRecovery\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        TokenRecoveryLibrary.recoverERC721s(accounts, contracts, tokenIds);\\n    }\\n}\\n\",\"keccak256\":\"0xdf6b0670ec616970d9eae2e8fc3a14d488126dcc050728a257decc45cfa76afa\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/interfaces/ITokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\n\\n/// @title Uniquely identified seals management.\\ninterface ITokenRecovery {\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) external;\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x5dd48bdb86016d25fbc9b310b41410016e47c9812d9d6138bc7b50f03a658ae4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/libraries/TokenRecoveryLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC165} from \\\"./../../introspection/interfaces/IERC165.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary TokenRecoveryLibrary {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Thrown when trying to recover a token of the wrong contract type.\\n    /// @param tokenContract The token contract being recovered.\\n    error IncorrectTokenContractType(address tokenContract);\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            accounts[i].sendValue(amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) internal {\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            tokens[i].safeTransfer(accounts[i], amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) internal {\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            IERC721 tokenContract = contracts[i];\\n            if (!IERC165(address(tokenContract)).supportsInterface(type(IERC721).interfaceId)) {\\n                revert IncorrectTokenContractType(address(tokenContract));\\n            }\\n            contracts[i].safeTransferFrom(address(this), accounts[i], tokenIds[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4e81ec9b43dc55f71b124037a3db600ffef56233365927821e4403eb0c97038b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x0ae492d8a517113ac1931fe3be5432d7eafd5cb66f6ade9491531ebea1b5e67f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/MyContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\ncontract MyContract is TokenRecovery, ForwarderRegistryContext {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    address public myData;\\n\\n    event DataSet(address data);\\n\\n    error InvalidZeroData();\\n\\n    constructor(address data, IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        if (data == address(0)) revert InvalidZeroData();\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    function setData(address data) external {\\n        if (data == address(0)) revert InvalidZeroData();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        myData = data;\\n        emit DataSet(data);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xe4b3d203b10bbfd6864e9b3452370c17ee7112d29b3977b97cfe9f842abbedd7\",\"license\":\"MIT\"},\"contracts/mocks/MyContractMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {MyContract} from \\\"./../MyContract.sol\\\";\\n\\ncontract MyContractMock is MyContract {\\n    constructor(address data, IForwarderRegistry forwarderRegistry) MyContract(data, forwarderRegistry) {}\\n\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xeba4ac23867aed1d0c9c42dc914502ee97e67c1021f898901dfe682e1fef9675\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2389,"contract":"contracts/mocks/MyContractMock.sol:MyContractMock","label":"myData","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"IncorrectTokenContractType(address)":[{"notice":"Thrown when trying to recover a token of the wrong contract type."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}